{
  "_id": {
    "$oid": ""
  },
  "actions": [
    {
      "_id": {
        "$oid": ""
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n            return\n    } else {\n        var response = hashedParams['response'];\n        var data = {};\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            data[\"task_id\"] = body.data.gid;\n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = {\n                parsedValues: data\n            };\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 400){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"BAD REQUEST\";\n            var message = \"\";\n            hashedParams.body.errors.forEach(function(error){\n                message += error.message + \", \"\n            });\n            message = message.slice(0, message.length - 2);\n            retObj.error = {\n                message: message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/tasks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  if(!(hashedParams[\"params\"][\"task_id\"])){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Required Params are missing\";\n    callback(retObj);\n    return;\n  }\n\n  if(!(hashedUtils || {}) || !(hashedUtils._ || {} ) || !(hashedUtils.moment || {}) ){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Please provide utils with underscore and moment\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var newTask = {};\n\n  var inputParams = hashedParams.params;\n\n  var _ = hashedUtils._;\n\n  var moment = hashedUtils.moment;\n  let sectionUpdate = false;\n  let stepUrl=\"\"\n  _.each(inputParams, function(data, key){\n\n    if(key.includes('custom_field') && data !== null) {\n\n        newTask.custom_fields = newTask.custom_fields || {}\n        newTask.custom_fields[key.replace('custom_field_','')] = data\n\n    }\n    else if(key === \"due_on\"){\n        if(data){\n            var due_on = hashedUtils.libDate.parseStandardStringToJSDate(data);\n            newTask[key] = moment(due_on).format(\"YYYY-MM-DD\");\n        }\n    }\n    else if (key === \"due_at\"){\n        if(data){\n            var due_at = hashedUtils.libDate.parseStandardStringToJSDateTime(data);\n            newTask[key] = due_at.toISOString();\n        }\n    }\n    else if (key === \"assignee\"){\n        if(data){\n            newTask[key] = {\n                gid: data\n            }\n        }\n    } else if(key !== \"resource_id\" && key !== \"task_id\" ){\n        if(data !== null){\n            newTask[key] = data;\n        }\n    }\n\n  });\n\n  var task_id = hashedParams.params.task_id;\n\n  var options = {\n      method: 'PUT',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + task_id,\n\n     headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      body: {\n          data: newTask\n      },\n\n      json: true\n\n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
      "description": "Update a specified Task",
      "dynamicInputFields": true,
      "dynamicInputFieldsDependsOn": [
        "resource_id"
      ],
      "dynamicInputFieldsParse": "function dynamicInputFieldsParse(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n  var responseObjArray = [];\n  // Input Validation\n  if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n    retObj['status'] = \"ERROR\";\n    retObj['error'] = {};\n    retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n    retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n    callback(retObj);\n        return;\n  } else {\n    var response = hashedParams['response'];\n    var data = [];\n\n    if (response['statusCode'] === 200) {\n\n      var body = hashedParams[\"body\"];\n\n      if(!(body || {}) || !(body.data || {}) ){\n        retObj[\"status\"] = \"ERROR\";\n        retObj[\"error\"] = {};\n        retObj[\"error\"][\"message\"] = \"Missing data from body\";\n        callback(retObj);\n        return;\n      }\n\n      if (body.data && body.data.length) {\n        body.data.forEach(field => {\n          if (field.custom_field.type === 'enum') {\n            data.push({\n              id: 'custom_field_' + (field.custom_field.id || field.custom_field.gid),\n              name: field.custom_field.name,\n              inputType: \"select\",\n              type: \"String\",\n              fixedValueSource: field.custom_field.enum_options.map(option => {\n                return {\n                  id: option.id || option.gid,\n                  name: option.name\n                }\n              })\n            })\n          } else {\n            data.push({\n              id: 'custom_field_' + (field.custom_field.id || field.custom_field.gid),\n              name: field.custom_field.name,\n              inputType: \"input\",\n              type: \"String\"\n            })\n          }\n        })\n      }\n\n      retObj[\"status\"] = \"SUCCESS\";\n      retObj[\"data\"] = data;\n\n      callback(retObj);\n      return\n\n\n      // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n\n      var code = \"ERROR_AUTH_REFRESH\";\n      retObj.status = \"ERROR\";\n      retObj.errorCode = code;\n      retObj.error = {\n        code,\n        message: \"error occured due to expiration of token\"\n      };\n      callback(retObj);\n      return\n\n    } else if (hashedParams.response.statusCode === 402){\n\n      retObj[\"status\"] = \"SUCCESS\";\n      retObj[\"data\"] = [];\n      callback(retObj);\n      return;\n\n    } else if (hashedParams.response.statusCode === 403){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Forbidden\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    }  else if (hashedParams.response.statusCode === 404){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Not found\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    } else if (hashedParams.response.statusCode === 429){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Rate Limit Enforced\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    } else {\n      retObj['status'] = \"ERROR\";\n      retObj['error'] = {};\n      retObj['error']['code'] = \"ERROR_UNKNOWN\";\n      callback(retObj);\n      return;\n\n    }\n  }\n}",
      "dynamicInputFieldsRequest": "function dynamicInputFieldsRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var project_id = null;\n\n  var triggerParams = hashedParams.params || {};\n\n  if(triggerParams && triggerParams.length){\n    triggerParams.forEach(function(param){\n      if(param.id === \"resource_id\"){\n        project_id = param.value;\n      }\n    });\n  }\n\n  if(!project_id){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Project Id is missing from Workflow\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: \"https://app.asana.com/api/1.0\",\n\n    url: \"/projects/\" + project_id + \"/custom_field_settings\",\n\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true\n\n  };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n}",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "activity",
      "id": "update-task",
      "important": true,
      "name": "Update Task",
      "params": [
        {
          "dependsOn": "resource_id",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n            return\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(task){\n                    data.push({\n                        id: task.id || task.gid, \n                        name: task.name\n                    });\n                });\n            }\n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    }  else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var project_id = hashedParams.params.resource_id;\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + project_id + \"/tasks\",\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "task_id",
          "inputType": "select",
          "name": "Task",
          "required": true,
          "searchAction": "find-task",
          "searchID": "id",
          "type": "String"
        },
        {
          "description": "If you wish to add only a Due date without time",
          "fixedValueSource": [
            
          ],
          "groupName": "Due",
          "groupType": "OR",
          "id": "due_on",
          "inputType": "input",
          "name": "Due Date",
          "required": false,
          "type": "Date"
        },
        {
          "description": "If you wish to set a due date & time",
          "fixedValueSource": [
            
          ],
          "groupName": "Due",
          "groupType": "OR",
          "id": "due_at",
          "inputType": "input",
          "name": "Due Date & Time",
          "required": false,
          "type": "Date"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n            return\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing users from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No users Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(user){\n                    data.push({\n                        id: user.id || user.gid,\n                        name: user.name\n                    });\n                });\n            }\n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    }  else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/users\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "assignee",
          "inputType": "select",
          "name": "Assignee",
          "required": false,
          "searchAction": "find-user",
          "searchID": "id",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(project){\n                    data.push({\n                        id: project.id || project.gid,\n                        name: project.name\n                    });\n                });\n            }\n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    }  else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "name",
          "inputType": "input",
          "name": "Task Name",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "notes",
          "inputType": "input",
          "name": "Notes",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            {
              "id": "false",
              "name": "No"
            },
            {
              "id": "true",
              "name": "Yes"
            }
          ],
          "id": "completed",
          "inputType": "select",
          "name": "Task Completed",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            {
              "id": "false",
              "name": "No"
            },
            {
              "id": "true",
              "name": "Yes"
            }
          ],
          "id": "hearted",
          "inputType": "select",
          "name": "Liked",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            {
              "id": "inbox",
              "name": "Inbox"
            },
            {
              "id": "later",
              "name": "Later"
            },
            {
              "id": "today",
              "name": "Today"
            },
            {
              "id": "upcoming",
              "name": "Upcoming"
            }
          ],
          "id": "assignee_status",
          "inputType": "select",
          "name": "Status",
          "required": false,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "id": "task_id",
          "name": "Task Id",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": ""
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    \n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n     \n        if (response['statusCode'] === 200) {  \n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = {};\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    }  else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 400){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"BAD REQUEST\";\n            var message = \"\";\n            hashedParams.body.errors.forEach(function(error){\n                message += error.message + \",\"\n            });\n            retObj.error = {\n                message: message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/tasks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if (!hashedParams|| !hashedParams.userapp || !hashedParams.appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var inputParams = hashedParams.params;\n  if(!inputParams || !inputParams.task_id || !inputParams.projects || !inputParams.section){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Required input fields task Id or section or project are missing\";\n    callback(retObj);\n    return;\n  }\n\n  var task_id = hashedParams.params.task_id;\n\n  var options = {\n      method: 'POST',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + task_id + \"/addProject\",\n\n     headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      body: {\n          data: {\"project\":inputParams.projects,\n                 \"section\":inputParams.section\n                }\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
      "description": "Move Task to a section",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "collection.activity",
      "id": "move-task",
      "important": true,
      "name": "Move Task to section",
      "params": [
        {
          "dependsOn": "projects",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var response = params['response'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body']['data'];\n            \n            var arr = parsed;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['id'] || arr[index]['gid'],\n                    name: arr[index]['name']\n                });\n            }\n            if (response.body.next_page && response.body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: response.body.next_page.offset\n                    }\n                }\n            }\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else if (params.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n      }  else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\n\n        }\n    }\n\n    callback(retObj);\n    return\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/projects/' + params.params.projects + '/sections',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\n                'User-Agent': 'Automate (http://automate.io/)'\n            },\n            baseUrl: 'https://app.asana.com/api/1.0/',\n            json: true\n        };\n        if (params.query && params.query.offset) {\n            options.qs.offset = params.query.offset\n            \n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n    return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "section",
          "inputType": "select",
          "name": "Section / Column",
          "required": true,
          "searchAction": "find-section",
          "searchID": "id",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n   \n    var retObj = {};\n   \n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if (!(body || {}) || !(body.data || {})) {\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return;\n            }\n\n            if (!(body.data.length)) {\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return;\n            }\n\n\n            if (body.data && body.data.length) {\n                body.data.forEach(function (project) {\n                    data.push({\n                        id: project.id || project.gid,\n                        name: project.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n\n\n            // add more error code specific code blocks\n        } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n                code,\n                message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else if (hashedParams.response.statusCode === 403) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if (!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: baseUrl,\n\n    url: path,\n\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true\n\n  };\n  if (hashedParams.query && hashedParams.query.offset) {\n    options.qs.offset = hashedParams.query.offset\n\n  }\n  retObj.status = \"SUCCESS\";\n  retObj.data = { options: options };\nreturn  callback(retObj);\n\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "projects",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "task_id",
          "inputType": "input",
          "name": "Task Id",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        
      ]
    },
    {
      "_id": {
        "$oid": ""
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    \n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n            return\n    } else {\n        var response = hashedParams['response'];\n        var parsed = {};\n        var _ = hashedUtils._;\n\n        if (response['statusCode'] === 200) {\n\n            var user = hashedParams[\"body\"][\"data\"];\n\n            parsed[\"found\"] = \"Yes\"\n\n            _.each(user, function(data, key){\n\n                if(key === \"workspaces\"){\n                    if(data && data.length){\n                        var workspaces = \"\";\n                        data.forEach(function(workspace){\n                            workspaces += workspace.name + \", \";\n                        });\n                        parsed[key] = workspaces.slice(0, workspaces.length - 2);\n                    }\n                }\n                else if(key !== \"photo\"){\n                    if(data){\n                        if(key == 'gid')\n                          parsed['id'] = data\n                        else    \n                          parsed[key] = data;\n                    }\n                }\n\n            });\n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = {\n                parsedValues: parsed\n            };\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 400){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"BAD REQUEST\";\n            var message = \"\";\n            hashedParams.body.errors.forEach(function(error){\n                message += error.message + \", \"\n            });\n            message = message.slice(0, (message.length - 2));\n            retObj.error = {\n                message: message\n            };\n            callback(retObj);\n            return;\n\n    } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"SUCCESS\";\n            parsed[\"found\"] = \"No\";\n            retObj[\"data\"] = {\n                parsedValues: parsed\n            }\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/users\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  if(!(hashedParams[\"params\"] || {})){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Required Params are missing\";\n    callback(retObj);\n    return;\n  }\n\n  if(!hashedParams[\"params\"][\"email\"] && !hashedParams[\"params\"][\"id\"]) {\n    retObj.status = \"ERROR\"\n    retObj.message = \"Required Input 'Id' or 'Email Address' missing\"\n    callback(retObj)\n    return\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var email = hashedParams[\"params\"][\"email\"] || hashedParams[\"params\"][\"id\"];\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + email,\n\n     headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n\n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
      "description": "Search a User by their email address",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "person",
      "id": "find-user",
      "important": true,
      "name": "Find Users",
      "params": [
        {
          "fixedValueSource": [
            
          ],
          "groupName": "User",
          "groupType": "OR_REQUIRED",
          "id": "email",
          "inputType": "input",
          "name": "Email Address",
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "groupName": "User",
          "groupType": "OR_REQUIRED",
          "id": "id",
          "inputType": "input",
          "name": "Id",
          "type": "String"
        }
      ],
      "priority": 4,
      "responseFields": [
        {
          "description": "Yes, if a matching file is found otherwise No",
          "id": "found",
          "name": "Match Found",
          "type": "String"
        },
        {
          "id": "email",
          "name": "User Email",
          "type": "String"
        },
        {
          "id": "id",
          "name": "User Id",
          "type": "String"
        },
        {
          "id": "name",
          "name": "User Name",
          "type": "String"
        },
        {
          "id": "workspaces",
          "name": "User Workspaces",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": ""
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\n\n\n    var retObj = {};\n    var responseObjArray = [];\n\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var parsed = {};\n        var _ = hashedUtils._;\n\n        if (response['statusCode'] === 200) {\n\n            var data = hashedParams[\"body\"][\"data\"];\n\n            if(hashedParams[\"step\"][\"value\"] === \"step\") {\n                parsed = parseTask(data);\n\n                retObj[\"status\"] = \"SUCCESS\";\n                retObj[\"data\"] = {\n                    parsedValues: parsed\n                };\n                callback(retObj);\n                return;\n            }\n\n            var project_id = hashedParams[\"step\"].value;\n            var name = hashedParams[\"step\"].name.toLowerCase().trim();\n            var found = [];\n\n            if(data && data.length){\n\n                data = data.filter(task => task.name.toLowerCase().trim() === name)\n                data.forEach(function(task){\n\n                    if(task.projects && task.projects.length){\n\n                        task.projects.forEach(function(project){\n                            if((project.gid || project.id) == project_id){\n                                found.push(task);\n                            }\n                        });\n\n                    }\n\n                });\n\n                if(found && found.length){\n\n                    parsed = parseTask(found[0]);\n\n                    retObj[\"status\"] = \"SUCCESS\";\n                    retObj[\"data\"] = {\n                        parsedValues: parsed\n                    };\n\n                    callback(retObj);\n\n                }//end of inner if\n\n                else {\n                    retObj.status = \"SUCCESS\";\n                    parsed[\"found\"] = \"No\";\n                    retObj[\"data\"] = {\n                        parsedValues: parsed\n                    }\n                    callback(retObj);\n                    return\n                }\n\n            } //end out outer if checking data and data.length\n            else {\n\n                retObj.status = \"SUCCESS\";\n                parsed[\"found\"] = \"No\";\n                retObj[\"data\"] = {\n                    parsedValues: parsed\n                }\n                callback(retObj);\n                return\n\n            }//end of outer else\n\n    } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n  } else if (hashedParams.response.statusCode === 400){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"BAD REQUEST\";\n            var message = \"\";\n            hashedParams.body.errors.forEach(function(error){\n                message += error.message + \", \"\n            });\n            message = message.slice(0, (message.length - 2));\n            retObj.error = {\n                message: message\n            };\n            callback(retObj);\n            return;\n\n    } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            parsed[\"found\"] = \"No\"\n\n            retObj.status = \"SUCCESS\";\n\n            retObj[\"data\"] = {\n                parsedValues: parsed\n            }\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n\n    function parseTask(task) {\n        var dates = {\n            \"created_at\": true,\n            \"modified_at\": true,\n            \"due_at\": true,\n            \"due_on\": true,\n            \"completed_at\":true\n        };\n\n        var keys = {\n            \"id\": true,\n            \"name\": true,\n            \"completed\": true,\n            \"parent\": true,\n            \"assignee_status\": true,\n            \"notes\": true,\n            \"gid\" : true\n        };\n\n        var parsed = {};\n\n        parsed[\"found\"] = \"Yes\"\n\n        _.each(task, function(data, key){\n            if(dates[key]){\n                if(data){\n                    parsed[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\n                }\n            } else if(key === \"workspace\"){\n                if(data){\n                    _.each(data, function(wData, wKey){\n                        if(wKey === \"gid\" || wKey === \"id\" || wKey === \"name\"){\n                            if(wKey == \"gid\")\n                                parsed[\"workspace_id\"] = wData;\n                            else\n                                parsed[\"workspace_\" + wKey] = wData;\n                            }\n                    });\n                }\n            } else if(key === \"tags\"){\n\n                if(data && data.length){\n                    var tags = \"\";\n                    data.forEach(function(tag) {\n                        tags += tag.name + \", \"\n                    });\n                    parsed[key] = tags.slice(0, tags.length - 2);\n                }\n\n            } else if(key === \"parent\"){\n                if(data && typeof data === 'object' && data.constructor === Object){\n                    _.each(data, function(wData, wKey){\n                        if(wKey == \"gid\")\n                            parsed[\"parent_id\"] = wData;\n                        else\n                            parsed[\"parent_\" + wKey] = wData;\n                    });\n                }\n                parsed[\"parent\"] = data\n            } else if(key === \"assignee\"){\n\n                if(data){\n                    parsed[key] = data.name;\n                    parsed[key + \"_id\"] = data.gid || data.id;\n                }\n\n            } else if(key === \"custom_fields\" && data instanceof Array){\n\n                        if(data && data.length){\n\n                          data.forEach(field => {\n\n                            if (field.type === 'enum') {\n                              parsed[field.gid || field.id] = field.enum_value ? field.enum_value.name : null\n                            } else {\n                              parsed[field.gid || field.id] = field[field.type + '_value']\n                            }\n\n                          })\n\n                        }\n\n            } else if(keys[key]){\n                if(data !== null && data !== undefined){\n                    if(key == 'gid')\n                        parsed['id'] = data\n                    else    \n                        parsed[key] = data;\n                }\n            }\n        });\n\n        return parsed;\n    }\n\n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/workspaces\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  if(!(hashedParams[\"params\"] && hashedParams[\"params\"][\"workspace_id\"] && hashedParams[\"params\"][\"project_id\"])){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Required Params are missing\";\n    callback(retObj);\n    return;\n  }\n\n  if(!hashedParams[\"params\"][\"name\"] && !hashedParams[\"params\"][\"task_id\"]) {\n    retObj.status = \"ERROR\"\n    retObj.message = \"Required Input 'Task Name' or 'Task Id' missing\"\n    callback(retObj)\n    return\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var workspace = hashedParams[\"params\"][\"workspace_id\"];\n\n  var encodedName = encodeURIComponent(hashedParams[\"params\"][\"name\"]) || null;\n\n  if (hashedParams[\"params\"][\"name\"]) {\n\n    var url = path + \"/\" + workspace + `/typeahead?type=task&query=${encodedName}&opt_expand=gid,id,name,created_at,modified_at,due_on,due_at,completed,completed_at,tags,parent,assignee,assignee_status,notes,projects,workspace`;\n\n    retObj.step = {value: hashedParams[\"params\"][\"project_id\"], name: hashedParams[\"params\"][\"name\"]};\n\n  } else {\n    var task_id = hashedParams[\"params\"][\"task_id\"]\n    var url = `/tasks/${task_id}`\n     retObj.step = {value: \"step\"};\n  }\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url,\n\n     headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n     },\n\n      json: true\n\n    };\n\n  retObj.status = \"SUCCESS\";\n\n  retObj.data = {options: options};\n\n  callback(retObj);\n  return\n\n}",
      "description": "Search a Task by its name",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFields": true,
      "dynamicResponseFieldsDependsOn": [
        "workspace_id"
      ],
      "dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(hashedParams, hashedUtils, callback) {\n\n  var retObj = {};\n  var responseObjArray = [];\n  // Input Validation\n  if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n    retObj['status'] = \"ERROR\";\n    retObj['error'] = {};\n    retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n    retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n    callback(retObj);\n        return;\n  } else {\n    var response = hashedParams['response'];\n    var data = [];\n\n    if (response['statusCode'] === 200) {\n\n      var body = hashedParams[\"body\"];\n\n      if(!(body || {}) || !(body.data || {}) ){\n        retObj[\"status\"] = \"ERROR\";\n        retObj[\"error\"] = {};\n        retObj[\"error\"][\"message\"] = \"Missing data from body\";\n        callback(retObj);\n        return;\n      }\n\n      if(body.data && body.data.length){\n        body.data.forEach(function(field){\n          data.push({\n            id: field.gid || field.id,\n            name: field.name\n          });\n        });\n      }\n\n      retObj[\"status\"] = \"SUCCESS\";\n      retObj[\"data\"] = data;\n\n      callback(retObj);\n      return\n\n\n      // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n\n      var code = \"ERROR_AUTH_REFRESH\";\n      retObj.status = \"ERROR\";\n      retObj.errorCode = code;\n      retObj.error = {\n        code,\n        message: \"error occured due to expiration of token\"\n      };\n      callback(retObj);\n      return\n\n    } else if (hashedParams.response.statusCode === 402){\n\n      retObj[\"status\"] = \"SUCCESS\";\n      retObj[\"data\"] = [];\n      callback(retObj);\n      return;\n\n    } else if (hashedParams.response.statusCode === 403){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Forbidden\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    }  else if (hashedParams.response.statusCode === 404){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Not found\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    } else if (hashedParams.response.statusCode === 429){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Rate Limit Enforced\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    } else {\n      retObj['status'] = \"ERROR\";\n      retObj['error'] = {};\n      retObj['error']['code'] = \"ERROR_UNKNOWN\";\n      callback(retObj);\n      return;\n\n    }\n  }\n\n}",
      "dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var workspace_id = null;\n\n  var triggerParams = hashedParams.params || {};\n\n  if(triggerParams && triggerParams.length){\n    triggerParams.forEach(function(param){\n      if(param.id === \"workspace_id\"){\n        workspace_id = param.value;\n      }\n    });\n  }\n\n  if(!workspace_id){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Project Id is missing from Workflow\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: \"https://app.asana.com/api/1.0\",\n\n    url: \"/workspaces/\" + workspace_id + \"/custom_fields\",\n\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true\n\n  };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
      "entity": "activity",
      "id": "find-task",
      "important": true,
      "name": "Find Tasks",
      "params": [
        {
          "dependsOn": "workspace_id",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var response = params['response'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body']['data'];\n            \n            var arr = parsed;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['id'] || arr[index]['gid'],\n                    name: arr[index]['name']\n                });\n            }\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else if (params.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n      }  else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\n\n        }\n    }\n\n    callback(retObj);\n    return\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/projects',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\n                'User-Agent': 'Automate (http://automate.io/)' \n            },\n            baseUrl: 'https://app.asana.com/api/1.0/workspaces/'+params['params']['workspace_id'],\n            json: true,\n            qs: {\n              'limit': 50\n            }\n        };\n        if (params.query && params.query.offset) {\n            options.qs.offset = params.query.offset\n        \n          }\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n    return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "project_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        },
        {
          "description": "Exact name match",
          "fixedValueSource": [
            
          ],
          "groupName": "Task",
          "groupType": "OR_REQUIRED",
          "id": "name",
          "inputType": "input",
          "name": "Task Name",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing Workspaces from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No Workspaces Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(workspace){\n                    data.push({\n                        id: workspace.gid || workspace.id,\n                        name: workspace.name\n                    });\n                });\n            }\n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    }  else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/workspaces\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "workspace_id",
          "inputType": "select",
          "name": "Workspace",
          "required": true,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "groupName": "Task",
          "groupType": "OR_REQUIRED",
          "id": "task_id",
          "inputType": "input",
          "name": "Task Id",
          "type": "String"
        }
      ],
      "priority": 2,
      "responseFields": [
        {
          "description": "Yes, if a matching file is found otherwise No",
          "id": "found",
          "name": "Match Found",
          "type": "String"
        },
        {
          "id": "assignee",
          "name": "Task Assignee Name",
          "type": "String"
        },
        {
          "id": "assignee_id",
          "name": "Task Assignee Id",
          "type": "String"
        },
        {
          "id": "assignee_status",
          "name": "Status",
          "type": "String"
        },
        {
          "id": "completed",
          "name": "Task Completed",
          "type": "String"
        },
        {
          "id": "completed_at",
          "name": "Task Completed At",
          "type": "String"
        },
        {
          "id": "created_at",
          "name": "Task Created At",
          "type": "String"
        },
        {
          "id": "due_at",
          "name": "Task Due At",
          "type": "String"
        },
        {
          "id": "due_on",
          "name": "Task Due On",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Task Id",
          "type": "String"
        },
        {
          "id": "modified_at",
          "name": "Task Modified At",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Task Name",
          "type": "String"
        },
        {
          "id": "notes",
          "name": "Task Notes",
          "type": "String"
        },
        {
          "id": "parent",
          "name": "Task's Parent",
          "type": "String"
        },
        {
          "id": "parent_gid",
          "name": "Task's Parent GID",
          "type": "String"
        },
        {
          "id": "parent_id",
          "name": "Task's Parent Id",
          "type": "String"
        },
        {
          "id": "parent_name",
          "name": "Task's Parent Name",
          "type": "String"
        },
        {
          "id": "tags",
          "name": "Task Tags",
          "type": "String"
        },
        {
          "id": "workspace_id",
          "name": "Task Workspace Id",
          "type": "String"
        },
        {
          "id": "workspace_name",
          "name": "Task Workspace Name",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": ""
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n  var responseObjArray = [];\n\n  // Input Validation\n  if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n    retObj['status'] = \"ERROR\";\n    retObj['error'] = {};\n    retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n    retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n    callback(retObj);\n        return;\n  } else {\n\n    var response = hashedParams['response'];\n    var parsed = {};\n    var _ = hashedUtils._;\n\n    if (response['statusCode'] === 200) {\n\n      var data = hashedParams[\"body\"][\"data\"];\n      var section_name = hashedParams[\"step\"][\"section_name\"].toLowerCase().trim();\n\n      if(data && data.length) {\n        var parsedSection = data.find(section => section.name.toLowerCase().trim() === section_name || section.name.toLowerCase().trim() === `${section_name}:`)\n        \n        if (parsedSection) {   \n          if(parsedSection.gid){\n            parsedSection['id'] = parsedSection.gid\n          }\n          parsed = parsedSection\n          parsed.found = 'Yes'\n          parsed.created_at = parsed.created_at ? hashedUtils.libDate.parseJSDateTimeToStandardString(parsed.created_at) : null\n          retObj[\"status\"] = \"SUCCESS\";\n          retObj[\"data\"] = {\n            parsedValues: parsed\n          };\n\n          callback(retObj);\n        } else {\n          retObj.status = \"SUCCESS\";\n          parsed[\"found\"] = \"No\";\n          retObj[\"data\"] = {\n            parsedValues: parsed\n          }\n          callback(retObj);\n          return\n        }\n\n      } else {\n\n        retObj.status = \"SUCCESS\";\n        parsed[\"found\"] = \"No\";\n        retObj[\"data\"] = {\n          parsedValues: parsed\n        }\n        callback(retObj);\n        return\n\n      }\n\n    } else if (hashedParams.response.statusCode == 401) {\n\n      var code = \"ERROR_AUTH_REFRESH\";\n      retObj.status = \"ERROR\";\n      retObj.errorCode = code;\n      retObj.error = {\n        code,\n        message: \"error occured due to expiration of token\"\n      };\n      callback(retObj);\n      return\n\n    } else if (hashedParams.response.statusCode === 400){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"BAD REQUEST\";\n      var message = \"\";\n      hashedParams.body.errors.forEach(function(error){\n        message += error.message + \", \"\n      });\n      message = message.slice(0, (message.length - 2));\n      retObj.error = {\n        message: message\n      };\n      callback(retObj);\n      return;\n\n    } else if (hashedParams.response.statusCode === 403){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Forbidden\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    }  else if (hashedParams.response.statusCode === 404){\n\n      parsed[\"found\"] = \"No\"\n\n      retObj.status = \"SUCCESS\";\n\n      retObj[\"data\"] = {\n        parsedValues: parsed\n      }\n      callback(retObj);\n      return;\n\n    } else if (hashedParams.response.statusCode === 429){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Rate Limit Enforced\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    } else {\n      retObj['status'] = \"ERROR\";\n      retObj['error'] = {};\n      retObj['error']['code'] = \"ERROR_UNKNOWN\";\n      callback(retObj);\n      return;\n\n    }\n  }\n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {}\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\"\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\"\n    callback(retObj)\n    return\n  }\n\n  if(!(hashedParams[\"params\"] || {}) || !(hashedParams[\"params\"][\"project_id\"] || {})){\n    retObj.status = \"ERROR\"\n    retObj.message = \"Required Input Params are missing\"\n    callback(retObj)\n    return\n  }\n\n  if(!hashedParams[\"params\"][\"section_name\"]) {\n    retObj.status = \"ERROR\"\n    retObj.message = \"Required Input 'Section / Column Name' missing\"\n    callback(retObj)\n    return\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo)\n\n  if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\"\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\"\n    callback(retObj)\n    return\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"]\n  var project = hashedParams[\"params\"][\"project_id\"]\n  var section_name = hashedParams[\"params\"][\"section_name\"]\n\n  var options = {\n      method: 'GET',\n      baseUrl: 'https://app.asana.com/api/1.0',\n      url: `/projects/${project}/sections`,\n      qs: {\n        'opt_fields': 'gid,id,name,created_at'\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n      json: true\n    }\n\n  retObj.status = \"SUCCESS\"\n  retObj.data = { options }\n  retObj.step = { section_name }\n  callback(retObj)\n  return\n\n}",
      "beta": false,
      "description": "Search a Section / Column by name",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "collection.activity",
      "id": "find-section",
      "important": true,
      "name": "Find Sections / Columns",
      "params": [
        {
          "description": "Exact name match",
          "fixedValueSource": [
            
          ],
          "id": "section_name",
          "inputType": "input",
          "name": "Section / Column Name",
          "required": true,
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(project){\n                    data.push({\n                        id: project.gid || project.id,\n                        name: project.name\n                    });\n                });\n            }\n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    }  else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n      method: 'GET',\n      baseUrl: 'https://app.asana.com/api/1.0',\n      url: '/projects',\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n      json: true\n  };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = { options };\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "project_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 4,
      "responseFields": [
        {
          "description": "Yes if a matching Section is found, otherwise No",
          "id": "found",
          "name": "Match Found?",
          "type": "String"
        },
        {
          "id": "created_at",
          "name": "Section Created At",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Section / Column Id",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Section / Column Name",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": ""
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\n\n\n    var retObj = {};\n    var responseObjArray = [];\n\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var parsed = {};\n        var _ = hashedUtils._;\n\n        if (response['statusCode'] === 200) {\n\n                var projects = hashedParams[\"body\"][\"data\"];\n                var name = hashedParams.step.name.toLowerCase().trim()\n                var foundProject = projects.find(proj => proj.name.toLowerCase().trim() === name)\n                if(foundProject){\n\n                    var dates = {\n                        \"created_at\": true,\n                        \"modified_at\": true\n                    };\n\n                    var keys = {\n                        \"id\": true,\n                        \"name\": true,\n                        \"archived\": true,\n                        \"notes\": true,\n                        \"gid\": true\n                    };\n\n                    parsed[\"found\"] = \"Yes\"\n\n                _.each(foundProject, function(data, key){\n\n                    if(dates[key]){\n                        if(data){\n                            parsed[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\n                        }\n                    } else if(keys[key]){\n                        if(data !== null && data !== undefined){\n                            if(key == 'gid')\n                                parsed['id'] = data\n                            else    \n                                parsed[key] = data;\n                        }\n                    }\n                });\n\n                retObj[\"status\"] = \"SUCCESS\";\n                retObj[\"data\"] = {\n                    parsedValues: parsed\n                };\n\n                callback(retObj);\n                return\n\n            } //end out outer if checking data and data.length\n            else {\n\n                retObj.status = \"SUCCESS\";\n                parsed[\"found\"] = \"No\";\n                retObj[\"data\"] = {\n                    parsedValues: parsed\n                }\n                callback(retObj);\n                return\n\n            }//end of outer else\n\n    } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n  } else if (hashedParams.response.statusCode === 400){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"BAD REQUEST\";\n            var message = \"\";\n            hashedParams.body.errors.forEach(function(error){\n                message += error.message + \", \"\n            });\n            message = message.slice(0, (message.length - 2));\n            retObj.error = {\n                message: message\n            };\n            callback(retObj);\n            return;\n\n    } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n\n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/workspaces\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  if(!(hashedParams[\"params\"][\"workspace_id\"]) || !(hashedParams[\"params\"][\"name\"])){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Required Params are missing,check Workspace and Project Name fields\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var workspace = hashedParams[\"params\"][\"workspace_id\"];\n\n  var encodedName = encodeURIComponent(hashedParams[\"params\"][\"name\"]);\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + workspace + `/typeahead?type=project&query=${encodedName}&opt_expand=gid,id,name,created_at,modified_at,notes`,\n\n     headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n     },\n\n      json: true\n\n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  retObj.step = {name : hashedParams[\"params\"][\"name\"]}\n\n  callback(retObj);\n  return\n\n}",
      "description": "Search a Project by its name",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "collection.activity",
      "id": "find-project",
      "important": true,
      "name": "Find Projects",
      "params": [
        {
          "description": "Exact name match",
          "fixedValueSource": [
            
          ],
          "id": "name",
          "inputType": "input",
          "name": "Project Name",
          "required": true,
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n       return\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing Workspaces from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No Workspaces Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(workspace){\n                    data.push({\n                        id: workspace.gid || workspace.id,\n                        name: workspace.name\n                    });\n                });\n            }\n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    }  else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/workspaces\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "workspace_id",
          "inputType": "select",
          "name": "Workspace",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "description": "Yes, if a matching file is found otherwise No",
          "id": "found",
          "name": "Match Found",
          "type": "String"
        },
        {
          "id": "created_at",
          "name": "Project Created At",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Project Id",
          "type": "String"
        },
        {
          "id": "modified_at",
          "name": "Project Modified At",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Project Name",
          "type": "String"
        },
        {
          "id": "notes",
          "name": "Project Notes",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": ""
      },
      "actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = {};\n\n    // Input Validation\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var response = params['response'];\n\n        if (response['statusCode'] == 201) {\n\n            var id = (response['body'] || {}).data.gid;\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {\n                parsedValues: {\n                    id: id\n                }\n            };\n\n        } else if (params.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n       } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\n\n        }\n    }\n\n    callback(retObj);\n    return\n}",
      "actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else if (!params['params']['workspace']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Required input 'Workspace / Organization' missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        var moment = utils.moment;\n        var newTask = {};\n        var _ = utils._;\n\n        if (params['params']['due_at']) {\n            params['params']['due_at'] = utils.libDate.parseStandardStringToJSDateTime(params['params']['due_at']);\n        }\n\n        if (params['params'][\"due_on\"]) {\n            params['params']['due_on'] = utils.libDate.parseStandardStringToJSDateTime(params['params']['due_on']);\n        }\n\n        _.each(params['params'], function (data, key) {\n\n            if (key.includes('custom_field') && data !== null) {\n\n                newTask.custom_fields = newTask.custom_fields || {}\n                newTask.custom_fields[key.replace('custom_field_', '')] = data\n\n            } else if (key === 'projects' && data !== null) {\n                newTask.memberships = newTask.memberships || [{}]\n                newTask.memberships[0]['project'] = data\n\n            } else if (key === 'section' && data !== null) {\n\n                newTask.memberships = newTask.memberships || [{}]\n                newTask.memberships[0]['section'] = data\n\n            } else if ((key === 'followers') && data !== null) {\n                let followerArr = data.map(obj => obj.value)\n                newTask[key] = followerArr;\n            }else if (data !== null) {\n\n                newTask[key] = data;\n            }\n\n        });\n\n        var body = {\n            data: newTask\n        };\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var options = {\n            // Variables to be modified\n            method: 'POST',\n            url: '/tasks',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: 'https://app.asana.com/api/1.0/',\n            json: true,\n            body: body\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n    return\n\n}",
      "description": "Add a new Task",
      "dynamicInputFields": true,
      "dynamicInputFieldsDependsOn": [
        "projects"
      ],
      "dynamicInputFieldsParse": "function dynamicInputFieldsParse(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n  var responseObjArray = [];\n  // Input Validation\n  if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n    retObj['status'] = \"ERROR\";\n    retObj['error'] = {};\n    retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n    retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n    callback(retObj);\n        return;\n  } else {\n    var response = hashedParams['response'];\n    var data = [];\n\n    if (response['statusCode'] === 200) {\n\n      var body = hashedParams[\"body\"];\n\n      if(!(body || {}) || !(body.data || {}) ){\n        retObj[\"status\"] = \"ERROR\";\n        retObj[\"error\"] = {};\n        retObj[\"error\"][\"message\"] = \"Missing data from body\";\n        callback(retObj);\n        return;\n      }\n\n      if (body.data && body.data.length) {\n        body.data.forEach(field => {\n          if (field.custom_field.type === 'enum') {\n            data.push({\n              id: 'custom_field_' + (field.custom_field.id || field.custom_field.gid),\n              name: field.custom_field.name,\n              inputType: \"select\",\n              type: \"String\",\n              fixedValueSource: field.custom_field.enum_options.map(option => {\n                return {\n                  id: option.id || option.gid,\n                  name: option.name\n                }\n              })\n            })\n          } else {\n            data.push({\n              id: 'custom_field_' + (field.custom_field.id || field.custom_field.gid),\n              name: field.custom_field.name,\n              inputType: \"input\",\n              type: \"String\"\n            })\n          }\n        })\n      }\n\n      retObj[\"status\"] = \"SUCCESS\";\n      retObj[\"data\"] = data;\n\n      callback(retObj);\n      return\n\n\n      // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n\n      var code = \"ERROR_AUTH_REFRESH\";\n      retObj.status = \"ERROR\";\n      retObj.errorCode = code;\n      retObj.error = {\n        code,\n        message: \"error occured due to expiration of token\"\n      };\n      callback(retObj);\n      return\n\n    } else if (hashedParams.response.statusCode === 402){\n\n      retObj[\"status\"] = \"SUCCESS\";\n      retObj[\"data\"] = [];\n      callback(retObj);\n      return;\n\n    } else if (hashedParams.response.statusCode === 403){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Forbidden\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    }  else if (hashedParams.response.statusCode === 404){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Not found\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    } else if (hashedParams.response.statusCode === 429){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Rate Limit Enforced\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    } else {\n      retObj['status'] = \"ERROR\";\n      retObj['error'] = {};\n      retObj['error']['code'] = \"ERROR_UNKNOWN\";\n      callback(retObj);\n      return;\n\n    }\n  }\n}",
      "dynamicInputFieldsRequest": "function dynamicInputFieldsRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var project_id = null;\n\n  var triggerParams = hashedParams.params || {};\n\n  if(triggerParams && triggerParams.length){\n    triggerParams.forEach(function(param){\n      if(param.id === \"projects\"){\n        project_id = param.value;\n      }\n    });\n  }\n\n  if(!project_id){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Project Id is missing from Workflow\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: \"https://app.asana.com/api/1.0\",\n\n    url: \"/projects/\" + project_id + \"/custom_field_settings\",\n\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true\n\n  };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n}",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "activity",
      "id": "add-task",
      "important": true,
      "name": "Add a Task",
      "params": [
        {
          "defaultValue": "",
          "fixedValueSource": [
            
          ],
          "id": "name",
          "inputType": "input",
          "name": "Name",
          "required": false,
          "type": "String"
        },
        {
          "defaultValue": "",
          "fixedValueSource": [
            
          ],
          "id": "notes",
          "inputType": "input",
          "name": "Notes",
          "required": false,
          "type": "String"
        },
        {
          "defaultValue": "upcoming",
          "fixedValueSource": [
            {
              "id": "inbox",
              "name": "Inbox"
            },
            {
              "id": "later",
              "name": "Later"
            },
            {
              "id": "today",
              "name": "Today"
            },
            {
              "id": "upcoming",
              "name": "Upcoming"
            }
          ],
          "id": "assignee_status",
          "inputType": "select",
          "name": "Status",
          "required": false,
          "type": "String"
        },
        {
          "dependsOn": "projects",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var response = params['response'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body']['data'];\n            \n            var arr = parsed;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['id'] || arr[index]['gid'],\n                    name: arr[index]['name']\n                });\n            }\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else if (params.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n      }  else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\n\n        }\n    }\n\n    callback(retObj);\n    return\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/projects/' + params.params.projects + '/sections',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\n                'User-Agent': 'Automate (http://automate.io/)'\n            },\n            baseUrl: 'https://app.asana.com/api/1.0/',\n            json: true,\n            qs: {\n              'limit': 50\n            }\n        };\n        if (params.query && params.query.offset) {\n            options.qs.offset = params.query.offset\n        \n          }\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n    return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "section",
          "inputType": "select",
          "name": "Section / Column",
          "required": false,
          "searchAction": "find-section",
          "searchID": "id",
          "type": "String"
        },
        {
          "dependsOn": "workspace",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var response = params['response'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body']['data'];\n            \n            var arr = parsed;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['id'] || arr[index]['gid'],\n                    name: arr[index]['name']\n                });\n            }\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else if (params.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n      }  else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\n\n        }\n    }\n\n    callback(retObj);\n    return\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/projects',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\n                'User-Agent': 'Automate (http://automate.io/)' \n            },\n            baseUrl: 'https://app.asana.com/api/1.0/workspaces/'+params['params']['workspace'],\n            json: true,\n            qs: {\n              'limit': 50\n            }\n        };\n        if (params.query && params.query.offset) {\n            options.qs.offset = params.query.offset\n        \n          }\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n    return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "projects",
          "inputType": "select",
          "name": "Project",
          "required": false,
          "searchAction": "find-project",
          "searchID": "id",
          "type": "String"
        },
        {
          "description": " If you wish to add only a Due date without time",
          "fixedValueSource": [
            
          ],
          "groupName": "Due",
          "groupType": "OR",
          "id": "due_on",
          "inputType": "input",
          "name": "Due Date",
          "required": false,
          "type": "Date"
        },
        {
          "description": "If you wish to set a due date & time",
          "fixedValueSource": [
            
          ],
          "groupName": "Due",
          "groupType": "OR",
          "id": "due_at",
          "inputType": "input",
          "name": "Due Date & Time",
          "required": false,
          "type": "Date"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing Workspaces from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No Workspaces Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(workspace){\n                    data.push({\n                        id: workspace.id || workspace.gid,\n                        name: workspace.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    }  else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/workspaces\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if (!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: baseUrl,\n\n    url: path,\n\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true,\n    qs: {\n      'limit': 50\n    }\n\n  };\n  if (hashedParams.query && hashedParams.query.offset) {\n    options.qs.offset = hashedParams.query.offset\n\n  }\n  retObj.status = \"SUCCESS\";\n  retObj.data = { options: options };\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "workspace",
          "inputType": "select",
          "name": "Workspace / Organization ",
          "required": true,
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var response = params['response'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body']['data'];\n\n            var arr = parsed;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['id'] || arr[index]['gid'],\n                    name: arr[index]['name']\n                });\n            }\n            if (response.body.next_page && response.body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: response.body.next_page.offset\n                    }\n                }\n            }\n\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else if (params.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n                code,\n                message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\n\n        }\n    }\n\n    callback(retObj);\n    return\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n    var retObj = {};\n  \n    var path = \"/tags\";\n  \n    var baseUrl = \"https://app.asana.com/api/1.0\";\n  \n    var _ = hashedUtils._;\n  \n    if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n      retObj.status = \"ERROR\";\n      retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n      callback(retObj);\n      return;\n    }\n  \n    var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  \n     if(!(fetchedParams[\"access_token\"])){\n  \n      retObj.status = \"ERROR\";\n      retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n      callback(retObj);\n      return;\n  \n    }//end auth fetch\n  \n    var access_token = fetchedParams[\"access_token\"];\n  \n    var options = {\n        method: 'GET',\n  \n        baseUrl: baseUrl,\n  \n        url: path,\n  \n       headers: {\n          \"Accept\": \"application/json\",\n          \"Authorization\": \"Bearer \" + access_token\n        },\n  \n        json: true\n        \n      };\n      if (hashedParams.query && hashedParams.query.offset) {\n        options.qs.offset = hashedParams.query.offset\n        \n    }\n    retObj.status = \"SUCCESS\";\n    retObj.data = {options: options};\n    callback(retObj);\n    return\n  \n  }",
          "fixedValueSource": [
            
          ],
          "id": "tags",
          "inputType": "select",
          "name": "Tags",
          "required": false,
          "searchAction": "find-user",
          "searchID": "id",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\nconsole.log(\"--------Assignee Parse---------\")\nconsole.log(params['response'])\n    var retObj = {};\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var response = params['response'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body']['data'];\n\n            var arr = parsed;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['id'] || arr[index]['gid'],\n                    name: arr[index]['name']\n                });\n            }\n            if (response.body.next_page && response.body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: response.body.next_page.offset\n                    }\n                }\n            }\n\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else if (params.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n                code,\n                message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\n\n        }\n    }\n\n    callback(retObj);\n    return\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/users',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\n                'User-Agent': 'Automate (http://automate.io/)' \n            },\n            baseUrl: 'https://app.asana.com/api/1.0/',\n            json: true\n        };\n        if (params.query && params.query.offset) {\n            options.qs.offset = params.query.offset\n            \n        }\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n    return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "assignee",
          "inputType": "select",
          "name": "Assignee",
          "required": false,
          "searchAction": "find-user",
          "searchID": "id",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\nconsole.log(\"--------Assignee Parse---------\")\nconsole.log(params['response'])\n    var retObj = {};\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var response = params['response'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body']['data'];\n\n            var arr = parsed;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['id'] || arr[index]['gid'],\n                    name: arr[index]['name']\n                });\n            }\n            if (response.body.next_page && response.body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: response.body.next_page.offset\n                    }\n                }\n            }\n\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else if (params.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n                code,\n                message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\n\n        }\n    }\n\n    callback(retObj);\n    return\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/users',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\n                'User-Agent': 'Automate (http://automate.io/)' \n            },\n            baseUrl: 'https://app.asana.com/api/1.0/',\n            json: true\n        };\n        if (params.query && params.query.offset) {\n            options.qs.offset = params.query.offset\n            \n        }\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n    return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "followers",
          "inputType": "multiselect",
          "name": "Followers",
          "required": false,
          "searchAction": "find-user",
          "searchID": "id",
          "type": "String"
        },
        {
          "fixedValueSource": [
            {
              "id": "false",
              "name": "No"
            },
            {
              "id": "true",
              "name": "Yes"
            }
          ],
          "id": "hearted",
          "inputType": "select",
          "name": "Liked",
          "required": false,
          "type": "String"
        }
      ],
      "priority": 1,
      "responseFields": [
        {
          "description": "Id of the newly added Task",
          "id": "id",
          "name": "Task Id",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": ""
      },
      "actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = {};\n\n    // Input Validation\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var response = params['response'];\n\n        if (response['statusCode'] == 201) {\n\n            var id = (response['body'].data || {}).gid;\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {\n                parsedValues: {\n                    id: id\n                }\n            };\n\n        } else if (params.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\n\n        }\n    }\n\n    callback(retObj);\n    return\n}",
      "actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n        if(!params['params'][\"text\"] || !params['params'][\"task-id\"]){\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Required parameters are missing.Check Text and Task ID fields\";\n            callback(retObj);\n            return;\n        }\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        //\n        var text = {\n            text: params['params']['text']\n        };\n        var body = { \n            data : text\n        };\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var options = {\n            // Variables to be modified\n            method: 'POST',\n            url: '/tasks/'+ params['params']['task-id']+ '/stories',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: 'https://app.asana.com/api/1.0',\n            json: true,\n            body: body\n        };\n        //\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n    return\n\n}",
      "description": "Add a New Comment to a Task",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "message",
      "id": "add-story",
      "important": true,
      "name": "Add a Comment",
      "params": [
        {
          "defaultValue": "",
          "fixedValueSource": [
            
          ],
          "id": "text",
          "inputType": "input",
          "name": "Text",
          "required": true,
          "type": "String"
        },
        {
          "dependsOn": "projects",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n    var retObj = {};\n    var responseObjArray = [];\n    console.log(hashedParams['response'])\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if (!(body || {}) || !(body.data || {})) {\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return;\n            }\n\n            if (!(body.data.length)) {\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return;\n            }\n\n\n            if (body.data && body.data.length) {\n                body.data.forEach(function (task) {\n                    data.push({\n                        id: task.id || task.gid,\n                        name: task.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n\n\n            // add more error code specific code blocks\n        } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n                code,\n                message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else if (hashedParams.response.statusCode === 403) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if (!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var project_id = hashedParams.params.projects;\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: baseUrl,\n\n    url: path + \"/\" + project_id + \"/tasks\",\n\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true,\n    qs: {\n      'limit': 50\n    }\n\n  };\n  if (hashedParams.query && hashedParams.query.offset) {\n    options.qs.offset = hashedParams.query.offset\n\n  }\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = { options: options };\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "task-id",
          "inputType": "select",
          "name": "Task",
          "required": true,
          "searchAction": "find-task",
          "searchID": "id",
          "type": "String"
        },
        {
          "dependsOn": "workspace",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var response = params['response'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body']['data'];\n            \n            var arr = parsed;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['id'] || arr[index]['gid'],\n                    name: arr[index]['name']\n                });\n            }\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else if (params.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n      }  else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\n\n        }\n    }\n\n    callback(retObj);\n    return\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/projects',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\n                'User-Agent': 'Automate (http://automate.io/)' \n            },\n            baseUrl: 'https://app.asana.com/api/1.0/workspaces/'+params['params']['workspace'],\n            json: true,\n            qs: {\n              'limit': 50\n            }\n        };\n        if (params.query && params.query.offset) {\n            options.qs.offset = params.query.offset\n        \n          }\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n    return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "projects",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "searchAction": "find-project",
          "searchID": "id",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing Workspaces from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No Workspaces Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(workspace){\n                    data.push({\n                        id: workspace.id || workspace.gid,\n                        name: workspace.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    }  else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/workspaces\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if (!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: baseUrl,\n\n    url: path,\n\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true,\n    qs: {\n      'limit': 50\n    }\n\n  };\n  if (hashedParams.query && hashedParams.query.offset) {\n    options.qs.offset = hashedParams.query.offset\n\n  }\n  retObj.status = \"SUCCESS\";\n  retObj.data = { options: options };\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "workspace",
          "inputType": "select",
          "name": "Workspace / Organization ",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 2,
      "responseFields": [
        {
          "description": "Id of the newly added Story",
          "id": "id",
          "name": "Story Id",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": ""
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    \n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n     \n        if (response['statusCode'] === 200) {  \n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = {};\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    }  else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 400){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"BAD REQUEST\";\n            var message = \"\";\n            hashedParams.body.errors.forEach(function(error){\n                message += error.message + \",\"\n            });\n            retObj.error = {\n                message: message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/tasks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if (!hashedParams|| !hashedParams.userapp || !hashedParams.appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var inputParams = hashedParams.params;\n  if(!inputParams || !inputParams.task_id || !inputParams.tag){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Required input fields task Id or tag are missing\";\n    callback(retObj);\n    return;\n  }\n\n  var task_id = hashedParams.params.task_id;\n  let tag = hashedParams.params.tag;\n\n  var options = {\n      method: 'POST',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + task_id + \"/addTag\",\n\n     headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      body: {\n          data: {tag}\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
      "description": "Add Tag to a Task",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "collection.activity",
      "id": "add-tag",
      "important": true,
      "name": "Add Tag to a Task",
      "params": [
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var response = params['response'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body']['data'];\n\n            var arr = parsed;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['id'] || arr[index]['gid'],\n                    name: arr[index]['name']\n                });\n            }\n            if (response.body.next_page && response.body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: response.body.next_page.offset\n                    }\n                }\n            }\n\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else if (params.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n                code,\n                message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\n\n        }\n    }\n\n    callback(retObj);\n    return\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n    var retObj = {};\n  \n    var path = \"/tags\";\n  \n    var baseUrl = \"https://app.asana.com/api/1.0\";\n  \n    var _ = hashedUtils._;\n  \n    if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n      retObj.status = \"ERROR\";\n      retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n      callback(retObj);\n      return;\n    }\n  \n    var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  \n     if(!(fetchedParams[\"access_token\"])){\n  \n      retObj.status = \"ERROR\";\n      retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n      callback(retObj);\n      return;\n  \n    }//end auth fetch\n  \n    var access_token = fetchedParams[\"access_token\"];\n  \n    var options = {\n        method: 'GET',\n  \n        baseUrl: baseUrl,\n  \n        url: path,\n  \n       headers: {\n          \"Accept\": \"application/json\",\n          \"Authorization\": \"Bearer \" + access_token\n        },\n  \n        json: true\n        \n      };\n      if (hashedParams.query && hashedParams.query.offset) {\n        options.qs.offset = hashedParams.query.offset\n        \n    }\n    retObj.status = \"SUCCESS\";\n    retObj.data = {options: options};\n    callback(retObj);\n    return\n  \n  }",
          "fixedValueSource": [
            
          ],
          "id": "tag",
          "inputType": "select",
          "name": "Tag",
          "required": true,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "task_id",
          "inputType": "input",
          "name": "Task Id",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        
      ]
    },
    {
      "_id": {
        "$oid": ""
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    \n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = {};\n\n        if (response['statusCode'] === 201) {\n\n            var body = hashedParams[\"body\"];\n            data[\"subtask_id\"] = body.data.gid;\n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = {\n                parsedValues: data\n            };\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    }  else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 400){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"BAD REQUEST\";\n            var message = \"\";\n            hashedParams.body.errors.forEach(function(error){\n                message += error.message + \",\"\n            });\n            retObj.error = {\n                message: message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/tasks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  if(!(hashedParams[\"params\"][\"task_id\"])){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Required Params are missing\";\n    callback(retObj);\n    return;\n  }\n\n  if(!(hashedUtils || {}) || !(hashedUtils._ || {} ) || !(hashedUtils.moment || {}) ){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Please provide utils with underscore and moment\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var newSubtask = {};\n\n  var inputParams = hashedParams.params;\n\n  var _ = hashedUtils._;\n\n  var moment = hashedUtils.moment;\n\n  _.each(inputParams, function(data, key){\n\n    if(key === \"due_on\"){\n        // if(data){\n        //     var due_on = hashedUtils.libDate.parseStandardStringToJSDate(data);\n        //     newSubtask[key] = moment(due_on).format(\"YYYY-MM-DD\");\n        // }\n    } \n    else if (key === \"due_at\"){\n        if(data){\n            var due_at = hashedUtils.libDate.parseStandardStringToJSDateTime(data);\n            newSubtask[key] = due_at\n        }\n    }\n    else if (key === \"assignee\"){\n        if(data){\n            newSubtask[key] = {\n                gid: data\n            }\n        }\n    }\n    else if (key === \"followers\"){\n        if(data && data.length){\n            var followers = [];\n            data.forEach(function(user){\n                if(user.value) {\n                    followers.push({\n                        gid: user.value\n                    });\n                }\n            });\n            newSubtask[key] = followers;\n        }\n    }\n    else if(key !== \"resource_id\" && key !== \"task_id\" ){\n        if(data !== null){\n            newSubtask[key] = data;\n        }\n    }\n\n  });\n\n\n  var task_id = hashedParams.params.task_id;\n\n  var options = {\n      method: 'POST',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + task_id + \"/subtasks\",\n\n     headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      body: {\n          data: newSubtask\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
      "description": "Add a new Subtask on a Task",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "activity",
      "id": "add-subtask",
      "important": true,
      "name": "Add a Subtask",
      "params": [
        {
          "dependsOn": "resource_id",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n    var retObj = {};\n    var responseObjArray = [];\n   \n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if (!(body || {}) || !(body.data || {})) {\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return;\n            }\n\n            if (!(body.data.length)) {\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return;\n            }\n\n\n            if (body.data && body.data.length) {\n                body.data.forEach(function (task) {\n                    data.push({\n                        id: task.id || task.gid,\n                        name: task.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n\n\n            // add more error code specific code blocks\n        } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n                code,\n                message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else if (hashedParams.response.statusCode === 403) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if (!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var project_id = hashedParams.params.resource_id;\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: baseUrl,\n\n    url: path + \"/\" + project_id + \"/tasks\",\n\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true,\n    qs: {\n      'limit': 50\n    }\n\n  };\n  if (hashedParams.query && hashedParams.query.offset) {\n    options.qs.offset = hashedParams.query.offset\n\n  }\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = { options: options };\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "task_id",
          "inputType": "select",
          "name": "Parent Task",
          "required": true,
          "searchAction": "find-task",
          "searchID": "id",
          "type": "String"
        },
        {
          "description": "Due date and time",
          "fixedValueSource": [
            
          ],
          "id": "due_at",
          "inputType": "input",
          "name": "Due At",
          "required": false,
          "type": "Date"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n   \n    var retObj = {};\n   \n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if (!(body || {}) || !(body.data || {})) {\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return;\n            }\n\n            if (!(body.data.length)) {\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return;\n            }\n\n\n            if (body.data && body.data.length) {\n                body.data.forEach(function (project) {\n                    data.push({\n                        id: project.id || project.gid,\n                        name: project.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n\n\n            // add more error code specific code blocks\n        } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n                code,\n                message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else if (hashedParams.response.statusCode === 403) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if (!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: baseUrl,\n\n    url: path,\n\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true\n\n  };\n  if (hashedParams.query && hashedParams.query.offset) {\n    options.qs.offset = hashedParams.query.offset\n\n  }\n  retObj.status = \"SUCCESS\";\n  retObj.data = { options: options };\nreturn  callback(retObj);\n\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "searchAction": "find-project",
          "searchID": "id",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing users from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No users Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(user){\n                    data.push({\n                        id: user.id || user.gid,\n                        name: user.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    }  else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/users\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n    if (hashedParams.query && hashedParams.query.offset) {\n      options.qs.offset = hashedParams.query.offset\n      \n  }\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "assignee",
          "inputType": "select",
          "name": "Assignee",
          "required": false,
          "searchAction": "find-user",
          "searchID": "id",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing users from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No users Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(user){\n                    data.push({\n                        id: user.id || user.gid,\n                        name: user.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    }  else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/users\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n    if (hashedParams.query && hashedParams.query.offset) {\n      options.qs.offset = hashedParams.query.offset\n      \n  }\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "followers",
          "inputType": "multiselect",
          "name": "Followers",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "name",
          "inputType": "input",
          "name": "Sub Task Name",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "notes",
          "inputType": "input",
          "name": "Notes",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            {
              "id": "false",
              "name": "No"
            },
            {
              "id": "true",
              "name": "Yes"
            }
          ],
          "id": "hearted",
          "inputType": "select",
          "name": "Liked",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            {
              "id": "inbox",
              "name": "Inbox"
            },
            {
              "id": "later",
              "name": "Later"
            },
            {
              "id": "today",
              "name": "Today"
            },
            {
              "id": "upcoming",
              "name": "Upcoming"
            }
          ],
          "id": "assignee_status",
          "inputType": "select",
          "name": "Status",
          "required": false,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "id": "subtask_id",
          "name": "Subtask Id",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": ""
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    \n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = {};\n\n        if (response['statusCode'] === 201) {\n\n            var body = hashedParams[\"body\"];\n          \n            data[\"project_id\"] = body.data.gid;\n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = {\n                parsedValues: data\n            };\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 400){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"BAD REQUEST\";\n            var message = \"\";\n            hashedParams.body.errors.forEach(function(error){\n                message += error.message + \", \"\n            });\n            message = message.slice(0, (message.length - 2));\n            retObj.error = {\n                message: message\n            };\n            callback(retObj);\n            return;\n\n    } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  if(!(hashedParams[\"params\"]) || !(hashedParams[\"params\"][\"workspace\"]) || !(hashedParams[\"params\"][\"name\"])){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Required Params are missing.Check Project Name,Workspace Fields\";\n    callback(retObj);\n    return;\n  }\n\n  if(!(hashedUtils || {}) || !(hashedUtils._ || {} )){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Please provide utils with underscore.\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n  var inputParams = hashedParams.params;\n  var newProject = {};\n \n  _.each(inputParams, function(data, key){\n      if(data){\n          newProject[key] = data;\n      }\n  });\n\n  var options = {\n      method: 'POST',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      body: {\n          data: newProject\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n\n}",
      "description": "Add a new Project in a Workspace",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "collection.activity",
      "id": "add-project",
      "important": true,
      "name": "Add a Project",
      "params": [
        {
          "dependsOn": "workspace",
          "description": "If the workspace for your project is an organization, you must also supply a team to share the project with.",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing teams from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No teams Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(team){\n                    data.push({\n                        id: team.id || team.gid,\n                        name: team.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    }  else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 400){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"BAD REQUEST\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/organizations\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if (!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var organization_id = hashedParams.params.workspace;\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: baseUrl,\n\n    url: path + \"/\" + organization_id + \"/teams\",\n\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true\n\n  };\n  if (hashedParams.query && hashedParams.query.offset) {\n    options.qs.offset = hashedParams.query.offset\n\n  }\n  retObj.status = \"SUCCESS\";\n  retObj.data = { options: options };\n  callback(retObj);\n  return\n}",
          "fixedValueSource": [
            
          ],
          "id": "team",
          "inputType": "select",
          "name": "Team",
          "required": false,
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing Workspaces from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No Workspaces Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(workspace){\n                    data.push({\n                        id: workspace.id || workspace.gid,\n                        name: workspace.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    }  else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/workspaces\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if (!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: baseUrl,\n\n    url: path,\n\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true,\n    qs: {\n      'limit': 50\n    }\n\n  };\n  if (hashedParams.query && hashedParams.query.offset) {\n    options.qs.offset = hashedParams.query.offset\n\n  }\n  retObj.status = \"SUCCESS\";\n  retObj.data = { options: options };\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "workspace",
          "inputType": "select",
          "name": "Workspace",
          "required": true,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "name",
          "inputType": "input",
          "name": "Name",
          "required": true,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "notes",
          "inputType": "input",
          "name": "Notes",
          "required": false,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "id": "project_id",
          "name": "Project Id",
          "type": "String"
        }
      ]
    }
  ],
  "app_url": "https://asana.com/",
  "appId": "asana",
  "auth": {
    "authCallBack": "function authCallBack(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n  var params = [];\n  if (!((hashedParams || {})).queryObj) {\n    retObj.status = 'ERROR';\n    retObj.error = { message: 'There was an error while connecting to Asana. Please try reconnecting the app to fix this issue. If the issue persists, you can reach out to Asana support' };\n    callback(retObj);\n    return;\n  }\n  var queryObj = hashedParams.queryObj;\n  if (!(hashedUtils || {}).oauth2) {\n    retObj.status = 'ERROR';\n    retObj.error = {\n      message: 'There was an error while connecting with Asana. Please get in touch with us and we\\'ll help you set it up.'\n    };\n    callback(retObj);\n    return;\n  }\n  //var oauth2 = hashedUtils.oauth2;\n  var appInfo = hashedParams.appInfo;\n  var oauth2 = hashedUtils.oauth2({\n    clientID: appInfo.auth.authParams.clientID,\n    clientSecret: appInfo.auth.authParams.clientSecret,\n    grant_type: \"authorization_code\",\n    site: appInfo.auth.authParams.site,\n    tokenPath: appInfo.auth.authParams.tokenPath,\n    authorizationPath: appInfo.auth.authParams.authorizationPath\n  });\n\n  if (!hashedParams.queryObj.code) {\n    retObj.status = 'ERROR';\n    retObj.error = { message: 'There was an error while connecting to Asana. Please try reconnecting the app to fix this issue. If the issue persists, you can reach out to Asana support' };\n    callback(retObj);\n    return;\n  }\n  var code = queryObj.code;\n  oauth2.authCode.getToken({\n    code: code,\n    redirect_uri: appInfo.auth.authParams.redirect_uri\n  }, saveToken);\n\n  function saveToken(ERROR, result) {\n    if (ERROR) {\n      retObj.status = 'ERROR';\n      retObj.error = { message: 'Access Token ERROR' + ERROR };\n      callback(retObj);\n      return;\n    } else {\n\n      if (result && result['access_token'] && result['refresh_token']) {\n        params.push({ 'id': 'access_token', value: result['access_token'] });\n        params.push({ 'id': 'refresh_token', value: result['refresh_token'] });\n        retObj.status = 'SUCCESS';\n        retObj.data = { oauth2Info: result, params: params };\n        callback(retObj);\n        return;\n      } else {\n        retObj.status = 'ERROR';\n        retObj.error = { message: 'Cannot retrieve all the required tokens ' };\n        callback(retObj);\n        return;\n      }\n    }\n  }\n}\n",
    "authParams": {
      "authorizationPath": "/-/oauth_authorize",
      "clientID": "99920826362729",
      "clientSecret": "cbc86c4285c9be3d07039c367d67643c",
      "redirect_uri": "https://api-dev.automate.io/auth/asana/callback",
      "site": "https://app.asana.com",
      "tokenPath": "/-/oauth_token"
    },
    "authRefreshParse": "function authRefreshParse(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\n    retObj.status = \"ERROR\";\n    retObj.message = \"response or body to parse is missing while requesting in dynamicValueSourceParse\";\n    callback(retObj);\n    return;\n  }\n  if ((hashedParams.response.statusCode || {}) == 200) {\n    hashedParams.body= JSON.parse(hashedParams.body);\n    if(!hashedParams.body || !hashedParams.body.access_token){\n      retObj.status = \"ERROR\";\n      retObj.message = \"Failed to refresh the access_token\";\n      callback(retObj);\n      return;\n    }else{\n      retObj.status = \"SUCCESS\";\n      retObj.access_token = hashedParams.body.access_token;\n      retObj.message = \"successfully refreshed access_token\";\n      callback(retObj);\n      return;\n    }\n  } else {\n    retObj.status = \"ERROR\";\n    retObj.message = \"error while refreshing the token\";\n    callback(retObj);\n    return;\n  }\n}",
    "authRefreshRequest": "function authRefreshRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo){\n    retObj.status = \"ERROR\";\n    retObj.error = {message :\"Userapp or appinfo is missing while requesting in dynamicValueSourceRequest\"};\n    callback(retObj);\n    return;\n  }\n  if(!(hashedUtils || {})._){\n    retObj.status = \"ERROR\";\n    retObj.error ={message:  \"hashedUtils doesnot contain underscore module\"};\n    callback(retObj);\n    return;\n  }\n  var _ = hashedUtils._;\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if((!fetchedParams || {}).access_token){\n    retObj.status = \"ERROR\";\n    retObj.error = {message: \"cannot fetch access_token from fetchAuthParams\"};\n    callback(retObj);\n    return;\n  }\n  if(!((((hashedParams || {}).appinfo || {}).auth || {}).authParams || {}).clientID){\n    retObj.status = \"ERROR\";\n    retObj.error ={message:  \"appInfo is missing clientId\"};\n    callback(retObj);\n    return;\n  }\n  if(!((((hashedParams || {}).appinfo || {}).auth || {}).authParams || {}).clientSecret){\n    retObj.status = \"ERROR\";\n    retObj.error ={message: \"appInfo is missing clientId\"};\n    callback(retObj);\n    return;\n  }\n  var refresh_token = _.findWhere(hashedParams.userapp.params, {id: 'refresh_token'});\n  if(!refresh_token || !refresh_token.value){\n    retObj.status = \"ERROR\";\n    retObj.error ={message: \"refresh token is missing in userApp\"};\n    callback(retObj);\n    return;\n  }\n  var options = {\n    url: 'https://app.asana.com/-/oauth_token',\n    method: 'POST',\n    headers: [\n      {\n        name: 'content-type',\n        value: 'application/x-www-form-urlencoded'\n      }\n    ],\n    form: {\n      client_id: hashedParams.appinfo.auth.authParams['clientID'],\n      client_secret: hashedParams.appinfo.auth.authParams['clientSecret'],\n      refresh_token: refresh_token.value,\n      grant_type: 'refresh_token',\n      redirect_uri: hashedParams.appinfo.auth.authParams.redirect_uri\n    }\n  };\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n}",
    "authStrategy": "function authStrategy(hashedParams, hashedUtils, callback) {\n  var appInfo = hashedParams.appInfo;\n  var oauth2 = hashedUtils.oauth2({\n    clientID: appInfo.auth.authParams.clientID,\n    clientSecret: appInfo.auth.authParams.clientSecret,\n    grant_type: \"authorization_code\",\n    site: appInfo.auth.authParams.site,\n    tokenPath: appInfo.auth.authParams.tokenPath,\n    authorizationPath: appInfo.auth.authParams.authorizationPath\n  });\n\n  var retObj = {};\n  if(!(hashedUtils || {}).oauth2){\n    retObj.status = 'ERROR';\n    retObj.error = {message: 'doesNot have simple-oauth2 object while requesting in authCallback function'};\n    callback(retObj);\n    return;\n  }\n  //var oauth2 = hashedUtils.oauth2;\n  var authorization_uri = oauth2.authCode.authorizeURL({\n    redirect_uri: appInfo.auth.authParams.redirect_uri,\n    'response_type': 'code'\n  });\n  retObj.status = 'SUCCESS';\n  retObj.data = {authorization_uri: authorization_uri};\n  callback(retObj);\n  return\n}\n",
    "response": [
      {
        "id": "access_token"
      },
      {
        "id": "refresh_token"
      }
    ],
    "type": "OAuth2"
  },
  "category": "project-management",
  "description": "Asana is a project management application for teams of all sizes, available on web and mobile",
  "draft": false,
  "logo": "assets/images/logos/asana.png",
  "maintainance": {
    "status": false
  },
  "name": "Asana",
  "priority": 2,
  "searchKeywords": "Asana, management",
  "triggers": [
    {
      "beta": true,
      "description": "Triggers when Task due date is updated",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "activity",
      "id": "change-duedate",
      "important": true,
      "name": "Task Due Date Changed",
      "params": [
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n   \n    var retObj = {};\n   \n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if (!(body || {}) || !(body.data || {})) {\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return;\n            }\n\n            if (!(body.data.length)) {\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return;\n            }\n\n\n            if (body.data && body.data.length) {\n                body.data.forEach(function (project) {\n                    data.push({\n                        id: project.id || project.gid,\n                        name: project.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n\n\n            // add more error code specific code blocks\n        } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n                code,\n                message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else if (hashedParams.response.statusCode === 403) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if (!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: baseUrl,\n\n    url: path,\n\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true\n\n  };\n  if (hashedParams.query && hashedParams.query.offset) {\n    options.qs.offset = hashedParams.query.offset\n\n  }\n  retObj.status = \"SUCCESS\";\n  retObj.data = { options: options };\nreturn  callback(retObj);\n\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "description": "Global unique ID of the activity.",
          "id": "id",
          "name": "Activity Id",
          "type": "String"
        },
        {
          "description": "Human-readable text for the activity.",
          "id": "text",
          "name": "Activity Text",
          "type": "String"
        },
        {
          "description": "The component of the Asana product the user used to trigger the activity.",
          "id": "source",
          "name": "Activity Source",
          "type": "String"
        },
        {
          "description": "The id of the user who created the activity.",
          "id": "created_by_id",
          "name": "Activity Created By Id",
          "type": "String"
        },
        {
          "description": "The name of the user who created the activity.",
          "id": "created_by_name",
          "name": "Activity Created By Name",
          "type": "String"
        },
        {
          "description": "The task related to this activity.",
          "id": "target_id",
          "name": "Task Id",
          "searchAction": "find-task",
          "searchID": "task_id",
          "searchLabel": "Get Task info",
          "type": "String"
        },
        {
          "description": "The time at which this activity was created.",
          "id": "created_at",
          "name": "Activity Created At",
          "type": "String"
        },
        {
          "description": "The type of Activity. Example: System, Comment..",
          "id": "type",
          "name": "Activity Type",
          "type": "String"
        },
        {
          "id": "resource_subtype",
          "name": "Resource Subtype",
          "type": "String"
        },
        {
          "id": "resource_type",
          "name": "Resource Type",
          "type": "String"
        }
      ],
      "sampleData": {
        "created_at": "05-Aug-2019 09:15:00",
        "created_by_id": 840504531510598,
        "created_by_name": "Ratan",
        "gid": "1135026385087801",
        "id": "1135026385087801",
        "resource_subtype": "due_date_changed",
        "resource_type": "story",
        "source": "web",
        "target_id": 1134219505003201,
        "text": "changed the due date to August 20",
        "type": "system"
      },
      "source": {
        "type": "webhook",
        "webhookDeleteParse": "function webhookDeleteParse(hashedParams, hashedUtils, callback) {\n\n  var retObj = {};\n\n  if( !(hashedParams || {}).response ){\n\n    retObj.status = \"ERROR\";\n    retObj.error = {\n      message: \"response is missing while requesting webhook Delete Request\"\n    };\n    callback(retObj);\n    return;\n\n  }\n\n  if ( ( hashedParams.response.statusCode || {} ) == 200 ) {\n    \n    retObj.status = \"SUCCESS\";\n    callback(retObj);\n    return;\n      \n  } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else {\n\n    retObj.status = \"ERROR\";\n    retObj.error = {\n      message: \"error occured while deleting webhook with status code:\" + hashedParams.response.statusCode\n    };\n    callback(retObj);\n    return;\n  }\n}",
        "webhookDeleteRequest": "function webhookDeleteRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/webhooks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var workflow = hashedParams.workflow;\n\n  var webhookId = null;\n\n \n  if( workflow && workflow.trigger && workflow.trigger.webHook && workflow.trigger.webHook.status == 'registered' && workflow.trigger.webHook.data) {\n\n    webhookId = workflow.trigger.webHook.data.gid || workflow.trigger.webHook.data.id;\n    \n  }\n\n  if ( !webhookId ) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch webhookId from workflow to delete webhook\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n\n    method: 'DELETE',\n\n    baseUrl: baseUrl,\n\n    headers: {\n        Authorization: \"Bearer \" + access_token\n    },\n\n    url: path + \"/\" + webhookId,\n\n    json: true\n      \n  };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
        "webhookObjectParse": "function webhookObjectParse(hashedParams, hashedUtils, callback) {\n\n    var retObj = {};\n    var _ = hashedUtils._;\n\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in webhookObjectRequest.\"\n\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n            if (body.data && body.data.resource_subtype !== 'due_date_changed') {\n                retObj.status = \"SUCCESS\";\n                retObj.data = [];\n\n                callback(retObj);\n                return;\n            }\n            var params = {};\n\n            var dates = {\n                \"created_at\": true\n            };\n\n            var keys = {\n                text: true,\n                type: true,\n                source: true,\n                id: true,\n                gid: true,\n                resource_subtype: true,\n                resource_type: true\n            };\n\n            _.each(body.data, function (data, key) {\n                if (dates[key]) {\n                    if (data) {\n                        params[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\n                    }\n                } else if (key === \"created_by\") {\n                    if (data) {\n                        _.each(data, function (wData, wKey) {\n                            params[\"created_by_\" + wKey] = wData;\n                        });\n                    }\n                } else if (key === \"target\") {\n\n                    if (data) {\n                        _.each(data, function (tData, tKey) {\n                            if (tKey === \"gid\") {\n                                if (tData) {\n                                    params[\"target_\" + 'id'] = tData;\n                                }\n                            }\n                        });\n                       \n                    }\n\n                } else if (keys[key]) {\n                    if (data !== null && data !== undefined) {\n                        params[key] = data;\n                    }\n                }\n            });\n\n            retObj.status = \"SUCCESS\";\n            retObj.data = params;\n\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n                code,\n                message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else if (hashedParams.response.statusCode === 403) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n\n        }\n    }\n    callback(retObj);\n    return\n}",
        "webhookObjectQuery": true,
        "webhookObjectRequest": "function webhookObjectRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/stories\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var story = hashedParams.parsedData;\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + story.resource.gid,\n\n     headers: {\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n\n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: [options]};\n\n  callback(retObj);\n  return\n\n}",
        "webhookRegisterParse": "function webhookRegisterParse(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\n    retObj.status = \"ERROR\";\n    retObj.error = {message: \"response or body to parse is missing while requesting in dynamicValueSourceParse\"};\n    callback(retObj);\n    return;\n  }\n\n  if (( hashedParams.response.statusCode || {} ) == 200 || ( hashedParams.response.statusCode || {} ) == 201) {\n      var parsed = hashedParams.body;\n      retObj.status = \"SUCCESS\";\n      retObj.data = {\n          webHook:{\n            status: 'registered',\n            data: parsed.data\n          }\n        };\n\n      callback(retObj);\n      return;\n\n  } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n  } else if (hashedParams.response.statusCode == 400) {\n\n    var message = hashedParams && hashedParams.body && hashedParams.body.errors.map(err => err.message).join()\n    message = message.includes('Unknown object') ? 'Does the selected project exist?' : message\n    retObj.status = \"ERROR\";\n    retObj.error = { message };\n    retObj.data =  { webHook : {} };\n    retObj.data.webHook.status = 'Failed';\n    retObj.data.webHook.data = { message };\n    callback(retObj);\n\n  } else {\n\n    retObj.status = \"ERROR\";\n    retObj.data=  {};\n    retObj.error = {message: \"error occured with status code:\"+hashedParams.response.statusCode};\n    retObj.data.webHook = {};\n    retObj.data.webHook.status = 'Failed';\n    retObj.data.webHook.data = {message: \"Error while requesting for webhook registration with status code \" + hashedParams.response.statusCode + \" body \" + JSON.stringify(hashedParams.body)};\n    callback(retObj);\n    return\n  }\n}",
        "webhookRegisterRequest": "function webhookRegisterRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/webhooks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var resource_id = null;\n\n  var triggerParams = hashedParams.workflow.trigger.params || {};\n\n  if(triggerParams && triggerParams.length){\n    triggerParams.forEach(function(param){\n      if(param.id === \"resource_id\"){\n        resource_id = param.value;\n      }\n    });\n  }\n\n  if(!resource_id){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Resource Id is missing from Workflow\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n      method: 'POST',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      body: {\n          \"data\": {\n            \"resource\": resource_id,\n            \"target\": process.env['webhookUrl'] + '/webhook/' + hashedParams.workflow._id\n          }\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  \n  callback(retObj);\n  return\n\n}",
        "webhookTriggerParse": "function webhookTriggerParse(hashedParams, hashedUtils, callback){\n\n    var retObj = {};\n\n    var _ = hashedUtils._;\n\n     if(hashedParams.request.headers[\"x-hook-secret\"] && _.isEmpty(hashedParams.request.body)){\n\n        retObj.status = \"SKIP\";\n        retObj.message = \"Handshake\";\n        retObj.response = {};\n        retObj.response.headers = {\n            \"x-hook-secret\": hashedParams.request.headers[\"x-hook-secret\"]\n        };\n\n        callback(retObj);\n        return;\n\n    } else if (hashedParams['body'].events.length) {\n      var events = hashedParams.body.events\n\n      var removedStories = events\n        .filter(event => (event.resource || {}).resource_type === 'story' && event.action === 'removed')\n      var addedStories = events\n        .filter(event => (event.resource || {}).resource_type === 'story' && event.action === 'added')\n        .filter(aEvent => !removedStories.find(rEvent => rEvent.resource === aEvent.resource))\n\n      if (addedStories.length) {\n        retObj.data = {objects: addedStories}\n        retObj.status = 'SUCCESS'\n        callback(retObj)\n      } else {\n        retObj.status = 'SKIP'\n        retObj.message = 'Unwanted Resource'\n        callback(retObj)\n      }\n  \n    } else if(hashedParams[\"body\"].events.length === 0) {\n\n        retObj.status = \"SKIP\";\n        retObj.message = \"TEST PING\";\n\n        callback(retObj);\n        return;\n\n    } else {\n        retObj.status = \"ERROR\";\n        retObj.error = {\n            message: \"Error Occured\"\n        }\n        callback(retObj);\n        return\n    }\n\n}"
      },
      "webhookType": "workflow"
    },
    {
      "beta": true,
      "description": "Triggers when the task is moved to a different section",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "activity",
      "id": "change-section",
      "important": true,
      "name": "Task moved to section",
      "params": [
        {
          "dependsOn": "projects",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        callback(retObj);\n        return;\n    } else {\n\n        var response = params['response'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body']['data'];\n            \n            var arr = parsed;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['id'] || arr[index]['gid'],\n                    name: arr[index]['name']\n                });\n            }\n            if (response.body.next_page && response.body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: response.body.next_page.offset\n                    }\n                }\n            }\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else if (params.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n      }  else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\n\n        }\n    }\n\n    callback(retObj);\n    return\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/projects/' + params.params.projects + '/sections',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\n                'User-Agent': 'Automate (http://automate.io/)'\n            },\n            baseUrl: 'https://app.asana.com/api/1.0/',\n            json: true\n        };\n        if (params.query && params.query.offset) {\n            options.qs.offset = params.query.offset\n            \n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n    return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "section",
          "inputType": "select",
          "name": "Section / Column",
          "required": false,
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n   \n    var retObj = {};\n   \n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if (!(body || {}) || !(body.data || {})) {\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return;\n            }\n\n            if (!(body.data.length)) {\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return;\n            }\n\n\n            if (body.data && body.data.length) {\n                body.data.forEach(function (project) {\n                    data.push({\n                        id: project.id || project.gid,\n                        name: project.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n\n\n            // add more error code specific code blocks\n        } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n                code,\n                message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else if (hashedParams.response.statusCode === 403) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if (!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: baseUrl,\n\n    url: path,\n\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true\n\n  };\n  if (hashedParams.query && hashedParams.query.offset) {\n    options.qs.offset = hashedParams.query.offset\n\n  }\n  retObj.status = \"SUCCESS\";\n  retObj.data = { options: options };\nreturn  callback(retObj);\n\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "projects",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "description": "Global unique ID of the activity.",
          "id": "id",
          "name": "Activity Id",
          "type": "String"
        },
        {
          "description": "Human-readable text for the activity.",
          "id": "text",
          "name": "Activity Text",
          "type": "String"
        },
        {
          "description": "The component of the Asana product the user used to trigger the activity.",
          "id": "source",
          "name": "Activity Source",
          "type": "String"
        },
        {
          "description": "The id of the user who created the activity.",
          "id": "created_by_id",
          "name": "Activity Created By Id",
          "type": "String"
        },
        {
          "description": "The name of the user who created the activity.",
          "id": "created_by_name",
          "name": "Activity Created By Name",
          "type": "String"
        },
        {
          "description": "The task related to this activity.",
          "id": "target_id",
          "name": "Task Id",
          "searchAction": "find-task",
          "searchID": "task_id",
          "searchLabel": "Get Task info",
          "type": "String"
        },
        {
          "description": "The time at which this activity was created.",
          "id": "created_at",
          "name": "Activity Created At",
          "type": "String"
        },
        {
          "description": "The type of Activity. Example: System, Comment..",
          "id": "type",
          "name": "Activity Type",
          "type": "String"
        },
        {
          "id": "resource_subtype",
          "name": "Resource Subtype",
          "type": "String"
        },
        {
          "id": "resource_type",
          "name": "Resource Type",
          "type": "String"
        }
      ],
      "sampleData": {
        "created_at": "05-Aug-2019 09:15:00",
        "created_by_id": 840504531510598,
        "created_by_name": "Ratan",
        "gid": "1135026385087801",
        "id": "1135026385087801",
        "resource_subtype": "due_date_changed",
        "resource_type": "story",
        "source": "web",
        "target_id": 1134219505003201,
        "text": "changed the due date to August 20",
        "type": "system"
      },
      "source": {
        "type": "webhook",
        "webhookDeleteParse": "function webhookDeleteParse(hashedParams, hashedUtils, callback) {\n\n  var retObj = {};\n\n  if( !(hashedParams || {}).response ){\n\n    retObj.status = \"ERROR\";\n    retObj.error = {\n      message: \"response is missing while requesting webhook Delete Request\"\n    };\n    callback(retObj);\n    return;\n\n  }\n\n  if ( ( hashedParams.response.statusCode || {} ) == 200 ) {\n    \n    retObj.status = \"SUCCESS\";\n    callback(retObj);\n    return;\n      \n  } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else {\n\n    retObj.status = \"ERROR\";\n    retObj.error = {\n      message: \"error occured while deleting webhook with status code:\" + hashedParams.response.statusCode\n    };\n    callback(retObj);\n    return;\n  }\n}",
        "webhookDeleteRequest": "function webhookDeleteRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/webhooks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var workflow = hashedParams.workflow;\n\n  var webhookId = null;\n  if( workflow && workflow.trigger && workflow.trigger.webHook && workflow.trigger.webHook.status == 'registered' && workflow.trigger.webHook.data) {\n\n    webhookId = workflow.trigger.webHook.data.gid || workflow.trigger.webHook.data.id;\n    \n  }\n\n  if (!webhookId) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch webhookId from workflow to delete webhook\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n\n    method: 'DELETE',\n\n    baseUrl: baseUrl,\n\n    headers: {\n        Authorization: \"Bearer \" + access_token\n    },\n\n    url: path + \"/\" + webhookId,\n\n    json: true\n      \n  };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
        "webhookObjectParse": "function webhookObjectParse(hashedParams, hashedUtils, callback) {\n\n    var retObj = {};\n    var _ = hashedUtils._;\n\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in webhookObjectRequest.\"\n\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n            if (hashedParams.step.request === 'storyRequest') {\n                var body = hashedParams[\"body\"];\n                if (body.data && body.data.resource_subtype !== 'section_changed') {\n                    retObj.status = \"SUCCESS\";\n                    retObj.data = [];\n\n                    callback(retObj);\n                    return;\n                }\n\n                var params = {};\n\n                var dates = {\n                    \"created_at\": true\n                };\n\n                var keys = {\n                    text: true,\n                    type: true,\n                    source: true,\n                    id: true,\n                    gid: true,\n                    resource_subtype: true,\n                    resource_type: true\n                };\n\n                _.each(body.data, function (data, key) {\n                    if (dates[key]) {\n                        if (data) {\n                            params[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\n                        }\n                    } else if (key === \"created_by\") {\n                        if (data) {\n                            _.each(data, function (wData, wKey) {\n                                params[\"created_by_\" + wKey] = wData;\n                            });\n                        }\n                    } else if (key === \"target\") {\n\n                        if (data) {\n                            _.each(data, function (tData, tKey) {\n                                if (tKey === \"gid\") {\n                                    if (tData) {\n                                        params[\"target_\" + 'id'] = tData;\n                                    }\n                                }\n                            });\n\n                        }\n\n                    } else if (keys[key]) {\n                        if (data !== null && data !== undefined) {\n                            params[key] = data;\n                        }\n                    }\n                });\n                if (hashedParams.step.sectionId) {\n                    retObj.step = {\n                        \"responseData\": params,\n                        \"request\": \"taskDetails\",\n                        \"taskId\": params.target_id\n                    }\n                }\n\n                retObj.status = \"SUCCESS\";\n                retObj.data = params;\n\n                callback(retObj);\n                return;\n            } else {\n                var body = hashedParams[\"body\"];\n\n                retObj.status = \"SUCCESS\";\n                retObj.data = [];\n                if (body.data && body.data.memberships) {\n                    let section = body.data.memberships.find((obj) => {\n                        if (obj.section && (obj.section.id || obj.section.gid) == hashedParams.step.sectionId) {\n                            return obj;\n                        }\n                    })\n                    if (section) {\n                        retObj.data = hashedParams.step.responseData\n                    }\n\n\n\n                }\n                callback(retObj);\n                return;\n            }\n\n\n        } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n                code,\n                message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else if (hashedParams.response.statusCode === 403) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n\n        }\n    }\n    callback(retObj);\n    return\n}",
        "webhookObjectQuery": true,
        "webhookObjectRequest": "function webhookObjectRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/stories\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if (!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var story = hashedParams.parsedData;\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: baseUrl,\n\n    url: path + \"/\" + story.resource.gid,\n\n    headers: {\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true\n\n  };\n\n  var triggerParams = hashedParams.workflow.trigger.params || {};\n  // console.log(triggerParams,\"params\")\n  let sectionId = (triggerParams.find(el=> el.id && el.id === \"section\") || {}).value \n  if (hashedParams.step && hashedParams.step.request === 'taskDetails') {\n    options.url = `/tasks/${hashedParams.step.taskId}`;\n    retObj.step = {\n      'request': \"taskDetails\",\n      \"sectionId\": sectionId,\n      \"responseData\": hashedParams.step.responseData\n    }\n  } else {\n    retObj.step = {\n      'request': \"storyRequest\",\n      \"sectionId\": sectionId\n    }\n  }\n\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = { options: [options] };\n\n  callback(retObj);\n  return\n\n}",
        "webhookRegisterParse": "function webhookRegisterParse(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\n    retObj.status = \"ERROR\";\n    retObj.error = {message: \"response or body to parse is missing while requesting in dynamicValueSourceParse\"};\n    callback(retObj);\n    return;\n  }\n\n  if (( hashedParams.response.statusCode || {} ) == 200 || ( hashedParams.response.statusCode || {} ) == 201) {\n      var parsed = hashedParams.body;\n      retObj.status = \"SUCCESS\";\n      retObj.data = {\n          webHook:{\n            status: 'registered',\n            data: parsed.data\n          }\n        };\n\n      callback(retObj);\n      return;\n\n  } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n  } else if (hashedParams.response.statusCode == 400) {\n\n    var message = hashedParams && hashedParams.body && hashedParams.body.errors.map(err => err.message).join()\n    message = message.includes('Unknown object') ? 'Does the selected project exist?' : message\n    retObj.status = \"ERROR\";\n    retObj.error = { message };\n    retObj.data =  { webHook : {} };\n    retObj.data.webHook.status = 'Failed';\n    retObj.data.webHook.data = { message };\n    callback(retObj);\n\n  } else {\n\n    retObj.status = \"ERROR\";\n    retObj.data=  {};\n    retObj.error = {message: \"error occured with status code:\"+hashedParams.response.statusCode};\n    retObj.data.webHook = {};\n    retObj.data.webHook.status = 'Failed';\n    retObj.data.webHook.data = {message: \"Error while requesting for webhook registration with status code \" + hashedParams.response.statusCode + \" body \" + JSON.stringify(hashedParams.body)};\n    callback(retObj);\n    return\n  }\n}",
        "webhookRegisterRequest": "function webhookRegisterRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/webhooks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var resource_id = null;\n\n  let triggerParams = hashedParams.workflow.trigger.params || {};\n  if(triggerParams && triggerParams.length){\n    triggerParams.forEach(function(param){\n      if(param.id === \"projects\"){\n        resource_id = param.value;\n      }\n    });\n  }\n\n  if(!resource_id){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Resource Id is missing from Workflow\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n      method: 'POST',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      body: {\n          \"data\": {\n            \"resource\": resource_id,\n            \"target\": process.env['webhookUrl'] + '/webhook/' + hashedParams.workflow._id\n          }\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  \n  callback(retObj);\n  return\n\n}",
        "webhookTriggerParse": "function webhookTriggerParse(hashedParams, hashedUtils, callback){\n\n    var retObj = {};\n\n    var _ = hashedUtils._;\n\n     if(hashedParams.request.headers[\"x-hook-secret\"] && _.isEmpty(hashedParams.request.body)){\n\n        retObj.status = \"SKIP\";\n        retObj.message = \"Handshake\";\n        retObj.response = {};\n        retObj.response.headers = {\n            \"x-hook-secret\": hashedParams.request.headers[\"x-hook-secret\"]\n        };\n\n        callback(retObj);\n        return;\n\n    } else if (hashedParams['body'].events.length) {\n      var events = hashedParams.body.events\n\n      var removedStories = events\n        .filter(event => (event.resource || {}).resource_type === 'story' && event.action === 'removed')\n\n      var addedStories = events\n        .filter(event => (event.resource || {}).resource_type === 'story' && event.action === 'added')\n        .filter(aEvent => !removedStories.find(rEvent => rEvent.resource === aEvent.resource))\n\n      // if(triggerParams.section){\n      //   addedStories.forEach(obj => {\n      //     obj[\"sectionId\"] = sectionId\n      //   });\n      // }\n\n      if (addedStories.length) {\n        retObj.data = {objects: addedStories}\n        retObj.status = 'SUCCESS'\n        callback(retObj)\n      } else {\n        retObj.status = 'SKIP'\n        retObj.message = 'Unwanted Resource'\n        callback(retObj)\n      }\n  \n    } else if(hashedParams[\"body\"].events.length === 0) {\n\n        retObj.status = \"SKIP\";\n        retObj.message = \"TEST PING\";\n\n        callback(retObj);\n        return;\n\n    } else {\n        retObj.status = \"ERROR\";\n        retObj.error = {\n            message: \"Error Occured\"\n        }\n        callback(retObj);\n        return\n    }\n\n}"
      },
      "webhookType": "workflow"
    },
    {
      "description": "Triggers when a new Project is added to workspace",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "collection.activity",
      "id": "new-project",
      "name": "New Project",
      "params": [
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n            return\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing Workspaces from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No Workspaces Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(workspace){\n                    data.push({\n                        id: workspace.gid || workspace.id,\n                        name: workspace.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/workspaces\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true,\n      qs:{\n        'limit':50\n      }\n      \n    };\n    if (hashedParams.query && hashedParams.query.offset) {\n      options.qs.offset = hashedParams.query.offset\n  \n    }\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return  \n\n}",
          "fixedValueSource": [
            
          ],
          "id": "workspace_id",
          "inputType": "select",
          "name": "Workspace",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "id": "created_at",
          "name": "Project Created At",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Project Id",
          "type": "String"
        },
        {
          "id": "modified_at",
          "name": "Project Modified At",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Project Name",
          "type": "String"
        },
        {
          "id": "notes",
          "name": "Project Notes",
          "type": "String"
        }
      ],
      "sampleData": {
        "created_at": "05-Aug-2019 09:15:00",
        "id": "930510267487562",
        "modified_at": "05-Aug-2019 09:15:00",
        "name": "testing",
        "notes": ""
      },
      "source": {
        "initialPollParse": "function intialPollParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in intialPollParse.\"\n        callback(retObj);\n            return\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing tasks from body\";\n                callback(retObj);\n                return; \n            }\n\n            var uniqueId = 0;\n\n            if(body.data && body.data.length){\n                uniqueId = body.data[body.data.length - 1].id || body.data[body.data.length - 1].gid;\n            }\n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = {};\n            retObj[\"data\"][\"pollData\"] = {\n                status: \"SUCCESS\",\n                data: {\n                    uniqueId: uniqueId\n                }\n            };\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n    } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
        "initialPollRequest": "function intialPollRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/workspaces\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var workspace_id = _.findWhere(hashedParams.workflow.trigger.params, {\n      id: \"workspace_id\"\n  });\n\n  workspace_id = workspace_id.value;\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + workspace_id + \"/projects\",\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
        "objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = {};\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (params.response.statusCode === 200) {\n        \n        var parsed = {};\n        var _ = utils._;\n\n        var body = JSON.parse(params.body);\n\n            var dates = {\n                \"created_at\": true,\n                \"modified_at\": true\n            };\n\n            var keys = {\n                \"id\": true,\n                \"name\": true,\n                \"archived\": true,\n                \"notes\": true,\n                \"gid\": true\n            };\n\n            _.each(body.data, function(data, key){\n\n                if(dates[key]){\n                    if(data){\n                        parsed[key] = utils.libDate.parseJSDateTimeToStandardString(new Date(data));\n                    }\n                } else if(keys[key]){\n                    if(data !== null && data !== undefined){\n                        if(key == 'gid')\n                            parsed['id'] = data\n                        else    \n                            parsed[key] = data;\n                    }\n                }\n            });\n\n            retObj.status = \"SUCCESS\";\n            retObj.data = {\n                newObject: {\n                    response: {\n                        params: parsed\n                    }\n                },\n                hash: {\n                    id: body.data.gid || body.data.id\n                }\n            }\n\n            callback(retObj);\n            return;\n\n    } else {\n        let code\n        if (params.response.statusCode === 401) {\n            code = 'ERROR_AUTH_REFRESH'\n        } else if (params.response.statusCode === 400) {\n            code = 'ERROR_MISSING_PARAM'\n        } else if (params.response.statusCode === 403 || params.response.statusCode === 429) {\n            code = 'ERROR_RATE_LIMIT'\n        } else {\n            code = 'ERROR_UNKNOWN'\n        }\n        return callback({\n            error: {\n                code,\n                message: body.error || params.response.statusCode\n            },\n            errorCode: code,\n            status: 'ERROR'\n        })\n    }\n}",
        "objectQuery": true,
        "objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n    const authParams = params.userapp.fetchAuthParams(params.appinfo)\n    if (!authParams || !authParams.access_token) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n    const url = 'https://app.asana.com/api/1.0/projects'\n    const parsedData = params.parsedData.data.objects || []\n    const options = parsedData\n        .filter(p => p && p.gid)\n        .map(p => ({\n            headers: {\n                Authorization: `Bearer ${authParams.access_token}`\n            },\n            method: 'GET',\n            url: `${url}/${p.gid}`\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
        "pollParse": "function intialPollParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in intialPollParse.\"\n        callback(retObj);\n            return\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing tasks from body\";\n                callback(retObj);\n                return; \n            }\n\n            var uniqueId = hashedParams.workflow.trigger.pollData.data.uniqueId;\n\n            if(body.data && body.data.length && (body.data[body.data.length - 1].gid || body.data[body.data.length - 1].id) > uniqueId){\n                \n                var projects = body.data;\n\n                var newData = projects.filter(project => {\n                    return (project.gid) > uniqueId\n                });\n\n                retObj[\"status\"] = \"SUCCESS\";\n                retObj[\"data\"] = {};\n                retObj[\"data\"][\"pollData\"] = {\n                    status: \"SUCCESS\",\n                    data: {\n                        uniqueId: body.data[body.data.length - 1].id || body.data[body.data.length - 1].gid\n                    }\n                };\n\n                retObj[\"data\"][\"objects\"] = newData;\n\n            } else {\n\n                retObj['status'] = \"SUCCESS\";\n                retObj['data'] = {};\n                retObj['data']['objects'] = [];\n                retObj['data']['pollData']  = (hashedParams.workflow.trigger || {}).pollData;\n\n            }\n\n            \n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n    } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
        "pollRequest": "function pollRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/workspaces\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var workspace_id = _.findWhere(hashedParams.workflow.trigger.params, {\n      id: \"workspace_id\"\n  });\n\n  workspace_id = workspace_id.value;\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + workspace_id + \"/projects\",\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
        "type": "poll"
      },
      "webhookType": "workflow"
    },
    {
      "description": "Triggers when a new comment is added to a task",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "message",
      "id": "new-comment",
      "important": true,
      "name": "New Comment On Task",
      "params": [
        {
          "dependsOn": "resource_id",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n            return\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(task){\n                    data.push({\n                        id:  task.gid || task.id,\n                        name: task.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n    } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var project_id = hashedParams.params.resource_id;\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + project_id + \"/tasks\",\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true,\n      qs:{\n        'limit':50\n      }\n      \n    };\n    if (hashedParams.query && hashedParams.query.offset) {\n      options.qs.offset = hashedParams.query.offset\n  \n    }\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "task_id",
          "inputType": "select",
          "name": "Task",
          "required": false,
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n            return\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(project){\n                    data.push({\n                        id: project.gid || project.id,\n                        name: project.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n    } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n    if (hashedParams.query && hashedParams.query.offset) {\n      options.qs.offset = hashedParams.query.offset\n  \n    }\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 2,
      "responseFields": [
        {
          "id": "created_at",
          "name": "Comment Created At",
          "type": "String"
        },
        {
          "id": "created_by_id",
          "name": "Comment Created By Id",
          "type": "String"
        },
        {
          "id": "created_by_name",
          "name": "Comment Created By Name",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Comment Id",
          "type": "String"
        },
        {
          "id": "source",
          "name": "Comment Source",
          "type": "String"
        },
        {
          "id": "target_id",
          "name": "Task Id",
          "searchAction": "find-task",
          "searchID": "task_id",
          "searchLabel": "Get Task info",
          "type": "String"
        },
        {
          "id": "text",
          "name": "Comment Text",
          "type": "String"
        },
        {
          "id": "type",
          "name": "Comment Type",
          "type": "String"
        }
      ],
      "sampleData": {
        "created_at": "05-Aug-2019 09:15:00",
        "created_by_id": 840504531510598,
        "created_by_name": "Ratan",
        "gid": "1135026385087801",
        "id": "1135026385087801",
        "resource_subtype": "due_date_changed",
        "resource_type": "story",
        "source": "web",
        "target_id": 1134219505003201,
        "text": "changed the due date to August 20",
        "type": "system"
      },
      "source": {
        "type": "webhook",
        "webhookDeleteParse": "function webhookDeleteParse(hashedParams, hashedUtils, callback) {\n\n  var retObj = {};\n\n  if( !(hashedParams || {}).response ){\n\n    retObj.status = \"ERROR\";\n    retObj.error = {\n      message: \"response is missing while requesting webhook Delete Request\"\n    };\n    callback(retObj);\n    return;\n\n  }\n\n  if ( ( hashedParams.response.statusCode || {} ) == 200 ) {\n    \n    retObj.status = \"SUCCESS\";\n    callback(retObj);\n    return;\n      \n  } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else {\n\n    retObj.status = \"ERROR\";\n    retObj.error = {\n      message: \"error occured while deleting webhook with status code:\" + hashedParams.response.statusCode\n    };\n    callback(retObj);\n    return;\n  }\n}",
        "webhookDeleteRequest": "function webhookDeleteRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/webhooks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var workflow = hashedParams.workflow;\n\n  var webhookId = null;\n\n \n  if( workflow && workflow.trigger && workflow.trigger.webHook && workflow.trigger.webHook.status == 'registered' && workflow.trigger.webHook.data) {\n\n    webhookId = workflow.trigger.webHook.data.gid;\n\n    if (!webhookId) {\n      webhookId = workflow.trigger.webHook.data.gid;\n    }\n    \n  }\n\n  if ( !webhookId ) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch webhookId from workflow to delete webhook\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n\n    method: 'DELETE',\n\n    baseUrl: baseUrl,\n\n    headers: {\n        Authorization: \"Bearer \" + access_token\n    },\n\n    url: path + \"/\" + webhookId,\n\n    json: true\n      \n  };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
        "webhookObjectParse": "function webhookObjectParse(hashedParams, hashedUtils, callback) {\n\n    var retObj = {};\n    var _ = hashedUtils._;\n\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in webhookObjectRequest.\"\n\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(body.data.type !== \"comment\"){\n                retObj.status = \"SUCCESS\";\n                retObj.data = [];\n                callback(retObj);\n                return;\n            }\n\n            var params = {};\n\n            var dates = {\n                \"created_at\": true\n            };\n\n            var keys = {\n                text: true,\n                type: true,\n                source: true,\n                id: true,\n                gid : true\n            };\n\n            _.each(body.data, function(data, key){\n                if(dates[key]){\n                    if(data){\n                        params[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\n                    }\n                } else if(key === \"created_by\"){\n                    if(data){\n                        _.each(data, function(wData, wKey){\n                            if(wKey == 'gid')\n                                params[\"created_by_id\"] = wData;\n                            else\n                                params[\"created_by_\" + wKey] = wData;\n                        });\n                    }\n                } else if(key === \"target\"){\n\n                    if(data){\n                        _.each(data, function(tData, tKey){\n                            if(tKey === \"id\" || tKey === \"gid\"){\n                                if(tData){\n                                    params[\"target_id\"] = tData;\n                                }\n                            }\n                        });\n                    }\n\n                } else if(keys[key]){\n                    if(data !== null && data !== undefined){\n                        if(key == 'gid')    \n                            params[\"id\"] = data;\n                        else\n                            params[key] = data;\n                    }\n                }\n            });\n\n            retObj.status = \"SUCCESS\";\n            retObj.data = params;\n\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n\n        }\n    }\n    callback(retObj);\n    return\n}",
        "webhookObjectQuery": true,
        "webhookObjectRequest": "function webhookObjectRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n  \n  var path = \"/stories\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var story = hashedParams.parsedData.data.response;\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + story.resource.gid,\n\n     headers: {\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: [options]};\n\n  callback(retObj);\n  return\n\n}",
        "webhookRegisterParse": "function webhookRegisterParse(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\n    retObj.status = \"ERROR\";\n    retObj.error = {message: \"response or body to parse is missing while requesting in dynamicValueSourceParse\"};\n    callback(retObj);\n    return;\n  }\n\n  if (( hashedParams.response.statusCode || {} ) == 200 || ( hashedParams.response.statusCode || {} ) == 201) {\n      var parsed = hashedParams.body;\n      retObj.status = \"SUCCESS\";\n      retObj.data = {\n          webHook:{\n            status: 'registered',\n            data: parsed.data\n          }\n        };\n\n      callback(retObj);\n      return;\n\n  } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n } else if (hashedParams.response.statusCode == 400) {\n\n   var message = hashedParams && hashedParams.body && hashedParams.body.errors.map(err => err.message).join()\n   message = message.includes('Unknown object') ? 'Does the selected project exist?' : message\n   retObj.status = \"ERROR\";\n   retObj.error = { message };\n   retObj.data =  { webHook : {} };\n   retObj.data.webHook.status = 'Failed';\n   retObj.data.webHook.data = { message };\n   callback(retObj);\n\n } else {\n\n    retObj.status = \"ERROR\";\n    retObj.data=  {};\n    retObj.error = {message: \"error occured with status code:\"+hashedParams.response.statusCode};\n    retObj.data.webHook = {};\n    retObj.data.webHook.status = 'Failed';\n    retObj.data.webHook.data = {message: \"Error while requesting for webhook registration with status code \" + hashedParams.response.statusCode + \" body \" + JSON.stringify(hashedParams.body)};\n    callback(retObj);\n    return\n  }\n}",
        "webhookRegisterRequest": "function webhookRegisterRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/webhooks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var resource_id = null;\n\n  var triggerParams = hashedParams.workflow.trigger.params || {};\n\n  if(triggerParams && triggerParams.length){\n    triggerParams.forEach(function(param){\n      if(param.id === \"resource_id\"){\n        resource_id = param.value;\n      }\n    });\n  }\n\n  if(!resource_id){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Resource Id is missing from Workflow\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n      method: 'POST',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      body: {\n          \"data\": {\n            \"resource\": resource_id,\n            \"target\": process.env['webhookUrl'] + '/webhook/' + hashedParams.workflow._id\n          }\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  \n  callback(retObj);\n  return\n\n}",
        "webhookTriggerParse": "function webhookTriggerParse(hashedParams, hashedUtils, callback){\n    \n    var retObj = {};\n\n    var _ = hashedUtils._;\n\n     if(hashedParams.request.headers[\"x-hook-secret\"] && _.isEmpty(hashedParams.request.body)){\n\n        retObj.status = \"SKIP\";\n        retObj.message = \"Handshake\";\n        retObj.response = {};\n        retObj.response.headers = {\n            \"x-hook-secret\": hashedParams.request.headers[\"x-hook-secret\"]\n        };\n\n        callback(retObj);\n        return;\n\n    } else if(hashedParams[\"body\"].events.length) {\n\n        var story = null;\n\n        var task_id = _.findWhere(hashedParams.workflow.trigger.params, {\n            id: \"task_id\"\n        });\n\n        task_id = task_id ? task_id.value : null;\n\n        hashedParams.body.events.forEach(function(event){\n            if(event.resource.resource_type === \"story\" && event.action === \"added\" && task_id){\n                if(event.parent.gid == task_id) {\n                    story = event;\n                }\n                \n            } else if (event.resource.resource_type === \"story\" && event.action === \"added\") {\n                story = event;\n            }\n        });\n\n        if(story){\n\n            retObj.data = {response: story};\n            retObj.status = \"SUCCESS\";\n            callback(retObj);\n            return\n            \n        } else{\n\n            retObj.status = \"SKIP\";\n            retObj.message = \"Unwanted Resource\"; \n            callback(retObj);\n            return;\n        }        \n        \n    } else if(hashedParams[\"body\"].events.length === 0) {\n\n        retObj.status = \"SKIP\";\n        retObj.message = \"TEST PING\";\n\n        callback(retObj);\n        return;\n\n    } else {\n        retObj.status = \"ERROR\";\n        retObj.error = {\n            message: \"Error Occured\"\n        }\n        callback(retObj);\n        return\n    }\n\n}"
      },
      "webhookType": "workflow"
    },
    {
      "description": "Triggers when a new subtask is added to a task",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "activity",
      "id": "new-subtask",
      "important": true,
      "name": "New Subtask",
      "params": [
        {
          "dependsOn": "resource_id",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n                return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(task){\n                    data.push({\n                        id: task.gid || task.id,\n                        name: task.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n    } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var project_id = hashedParams.params.resource_id;\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + project_id + \"/tasks\",\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true,\n      qs:{\n          'limit':50\n      }\n      \n    };\n    if (hashedParams.query && hashedParams.query.offset) {\n      options.qs.offset = hashedParams.query.offset\n  \n    }\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "task_id",
          "inputType": "select",
          "name": "Task",
          "required": false,
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(project){\n                    data.push({\n                        id: project.gid || project.id,\n                        name: project.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n    } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n    if (hashedParams.query && hashedParams.query.offset) {\n      options.qs.offset = hashedParams.query.offset\n  \n    }\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "description": "Due Date and Time",
          "id": "due_at",
          "name": "Subtask Due At",
          "type": "String"
        },
        {
          "description": "Due Date",
          "id": "due_on",
          "name": "Subtask Due On",
          "type": "String"
        },
        {
          "id": "assignee",
          "name": "Subtask Assignee Name",
          "type": "String"
        },
        {
          "id": "assignee_id",
          "name": "Subtask Assignee Id",
          "type": "String"
        },
        {
          "id": "assignee_status",
          "name": "Subtask Assignee Status",
          "type": "String"
        },
        {
          "id": "completed",
          "name": "Subtask Completed",
          "type": "String"
        },
        {
          "id": "completed_at",
          "name": "Subtask Completed At",
          "type": "String"
        },
        {
          "id": "created_at",
          "name": "Subtask Created At",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Subtask Id",
          "type": "String"
        },
        {
          "id": "modified_at",
          "name": "Subtask Modified At",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Subtask Name",
          "type": "String"
        },
        {
          "id": "notes",
          "name": "Subtask Notes",
          "type": "String"
        },
        {
          "id": "parent_id",
          "name": "Task Id",
          "type": "String"
        },
        {
          "id": "parent_name",
          "name": "Task Name",
          "type": "String"
        },
        {
          "id": "tags",
          "name": "Subtask Tags",
          "type": "String"
        },
        {
          "id": "workspace_id",
          "name": "Subtask Workspace Id",
          "type": "String"
        },
        {
          "id": "workspace_name",
          "name": "Subtask Workspace Name",
          "type": "String"
        }
      ],
      "sampleData": {
        "assignee": "Ratan",
        "assignee_id": 840504531510598,
        "assignee_status": "inbox",
        "completed": false,
        "completed_at": null,
        "created_at": "05-Aug-2019 09:15:00",
        "due_at": null,
        "due_on": "19-Aug-2019",
        "gid": "1134219505003204",
        "id": 1134219505003204,
        "modified_at": "05-Aug-2019 09:15:00",
        "name": "3rd subtask",
        "notes": "notes",
        "parent_gid": "1134219505003201",
        "parent_id": 1134219505003201,
        "parent_name": "party-task-1-**",
        "tags": "",
        "workspace_id": 840493337087127,
        "workspace_name": "Automate"
      },
      "source": {
        "type": "webhook",
        "webhookDeleteParse": "function webhookDeleteParse(hashedParams, hashedUtils, callback) {\n\n  var retObj = {};\n\n  if( !(hashedParams || {}).response ){\n\n    retObj.status = \"ERROR\";\n    retObj.error = {\n      message: \"response is missing while requesting webhook Delete Request\"\n    };\n    callback(retObj);\n    return;\n\n  }\n\n  if ( ( hashedParams.response.statusCode || {} ) == 200 ) {\n    \n    retObj.status = \"SUCCESS\";\n    callback(retObj);\n    return;\n      \n  } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else {\n\n    retObj.status = \"ERROR\";\n    retObj.error = {\n      message: \"error occured while deleting webhook with status code:\" + hashedParams.response.statusCode\n    };\n    callback(retObj);\n    return;\n  }\n}",
        "webhookDeleteRequest": "function webhookDeleteRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/webhooks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var workflow = hashedParams.workflow;\n\n  var webhookId = null;\n\n \n  if( workflow && workflow.trigger && workflow.trigger.webHook && workflow.trigger.webHook.status == 'registered' && workflow.trigger.webHook.data) {\n\n    webhookId = workflow.trigger.webHook.data.gid;\n\n    if (!webhookId) {\n      webhookId = workflow.trigger.webHook.data.gid;\n    }\n    \n  }\n\n  if ( !webhookId ) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch webhookId from workflow to delete webhook\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n\n    method: 'DELETE',\n\n    baseUrl: baseUrl,\n\n    headers: {\n        Authorization: \"Bearer \" + access_token\n    },\n\n    url: path + \"/\" + webhookId,\n\n    json: true\n      \n  };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
        "webhookObjectParse": "function webhookObjectParse(hashedParams, hashedUtils, callback) {\n\n    var retObj = {};\n    var _ = hashedUtils._;\n\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in webhookObjectRequest.\"\n\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if (body.data && (body.data.parent === null || Object.keys(body.data.parent).length === 0)) {\n                retObj.status = \"SUCCESS\";\n                retObj.data = [];\n\n              return callback(retObj);\n            }\n           \n            if ( body.data.parent.gid !== hashedParams.step.parent.gid) {\n               \n                retObj.status = \"SUCCESS\";\n                retObj.data = [];\n\n               return callback(retObj);   \n            }\n\n            var params = {};\n\n            var dates = {\n                \"created_at\": true,\n                \"modified_at\": true,\n                \"due_on\": true,\n                \"due_at\": true,\n                \"completed_at\": true\n            };\n\n            var keys = {\n                \"id\": true,\n                \"name\": true,\n                \"completed\": true,\n                \"assignee_status\": true,\n                \"notes\": true,\n                \"gid\" : true\n            };\n\n            _.each(body.data, function (data, key) {\n                if (dates[key]) {\n                    if (data) {\n                        params[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\n                    }\n                } else if(key === \"workspace\"){\n                    if(data){\n                        _.each(data, function(wData, wKey){\n                            if(wKey == \"gid\")\n                                params[\"workspace_id\"] = wData;\n                            else\n                                params[\"workspace_\" + wKey] = wData;\n                        });\n                    }\n                } else if (key === \"tags\") {\n\n                    if (data && data.length) {\n                        var tags = \"\";\n                        data.forEach(function (tag) {\n                            tags += tag.name + \", \"\n                        });\n                        params[key] = tags.slice(0, tags.length - 2);\n                    }\n\n                } else if(key === \"parent\"){\n                    if(data){\n                        _.each(data, function(wData, wKey){\n                            if(wKey == \"gid\")\n                            params[\"parent_id\"] = wData;\n                        else\n                            params[\"parent_\" + wKey] = wData;\n                        });\n                    }\n                } else if (key === \"assignee\") {\n\n                            if(data){\n                                params[key] = data.name;\n                                params[key + \"_id\"] = data.gid || data.id;\n                            }\n\n                } else if(keys[key]){\n                    if(data !== null && data !== undefined){\n                        if(key == 'gid')    \n                            params[\"id\"] = data;\n                        else\n                            params[key] = data;\n                    }\n                }\n            });\n\n            retObj.status = \"SUCCESS\";\n            retObj.data = params;\n\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n                code,\n                message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else if (hashedParams.response.statusCode === 403) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n\n        }\n    }\n    callback(retObj);\n    return\n}",
        "webhookObjectQuery": true,
        "webhookObjectRequest": "function webhookObjectRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/tasks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var task = hashedParams.parsedData.data.response;\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + task.resource.gid,\n\n     headers: {\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n    retObj.step = { 'parent':task.parent }\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: [options]};\n\n  callback(retObj);\n  return\n\n}",
        "webhookRegisterParse": "function webhookRegisterParse(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\n    retObj.status = \"ERROR\";\n    retObj.error = {message: \"response or body to parse is missing while requesting in dynamicValueSourceParse\"};\n    callback(retObj);\n    return;\n  }\n\n  if (( hashedParams.response.statusCode || {} ) == 200 || ( hashedParams.response.statusCode || {} ) == 201) {\n      var parsed = hashedParams.body;\n      retObj.status = \"SUCCESS\";\n      retObj.data = {\n          webHook:{\n            status: 'registered',\n            data: parsed.data\n          }\n        };\n\n      callback(retObj);\n      return;\n\n  } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n  } else if (hashedParams.response.statusCode == 400) {\n\n    var message = hashedParams && hashedParams.body && hashedParams.body.errors.map(err => err.message).join()\n    message = message.includes('Unknown object') ? 'Do the selected project and task exist?' : message\n    retObj.status = \"ERROR\";\n    retObj.error = { message };\n    retObj.data =  { webHook : {} };\n    retObj.data.webHook.status = 'Failed';\n    retObj.data.webHook.data = { message };\n    callback(retObj);\n\n  } else {\n\n    retObj.status = \"ERROR\";\n    retObj.data=  {};\n    retObj.error = {message: \"error occured with status code:\"+hashedParams.response.statusCode};\n    retObj.data.webHook = {};\n    retObj.data.webHook.status = 'Failed';\n    retObj.data.webHook.data = {message: \"Error while requesting for webhook registration with status code \" + hashedParams.response.statusCode + \" body \" + JSON.stringify(hashedParams.body)};\n    callback(retObj);\n    return\n  }\n}",
        "webhookRegisterRequest": "function webhookRegisterRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/webhooks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if (!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var resource_id = null;\n\n  var triggerParams = hashedParams.workflow.trigger.params || {};\n\n  if (triggerParams && triggerParams.length) {\n    var resource = hashedUtils._.findWhere(hashedParams.workflow.trigger.params, {\n      id: \"task_id\"\n    });\n    if (resource) {\n      resource_id = resource.value;\n    }\n\n    if (!resource_id) {\n      var resource = hashedUtils._.findWhere(triggerParams, {\n        id: \"resource_id\"\n      });\n      if (resource) {\n        resource_id = resource.value;\n      }\n\n    }\n  }\n\n  if (!resource_id) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Resource Id is missing from Workflow\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n    method: 'POST',\n\n    baseUrl: baseUrl,\n\n    url: path,\n\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    body: {\n      \"data\": {\n        \"resource\": resource_id,\n        \"target\": process.env['webhookUrl'] + '/webhook/' + hashedParams.workflow._id\n      }\n    },\n\n    json: true\n\n  };\n  console.log(options.body.data)\n  retObj.status = \"SUCCESS\";\n  retObj.data = { options: options };\n\n  callback(retObj);\n  return\n\n}",
        "webhookTriggerParse": "function webhookTriggerParse(hashedParams, hashedUtils, callback){\n  \n    var retObj = {};\n\n    var _ = hashedUtils._;\n\n     if(hashedParams.request.headers[\"x-hook-secret\"] && _.isEmpty(hashedParams.request.body)){\n\n        retObj.status = \"SKIP\";\n        retObj.message = \"Handshake\";\n        retObj.response = {};\n        retObj.response.headers = {\n            \"x-hook-secret\": hashedParams.request.headers[\"x-hook-secret\"]\n        };\n\n        callback(retObj);\n        return;\n\n    } else if(hashedParams[\"body\"].events.length) {\n\n        var resource_id = _.findWhere(hashedParams.workflow.trigger.params, {\n            id: \"task_id\"\n        });\n\n        resource_id = (resource_id || {}).value;\n\n        var task = null;\n\n        hashedParams.body.events.forEach(function(event){\n            if(event.resource.resource_type === \"task\" && event.action === \"added\" && (!resource_id || (event.parent.gid == resource_id))){\n                task = event;\n            }\n        });\n\n        if(task){\n\n            retObj.data = {response: task};\n            retObj.status = \"SUCCESS\";\n            callback(retObj);\n            return\n            \n        } else{\n\n            retObj.status = \"SKIP\";\n            retObj.message = \"Unwanted Resource\"; \n            callback(retObj);\n            return;\n        }        \n        \n    } else if(hashedParams[\"body\"].events.length === 0) {\n\n        retObj.status = \"SKIP\";\n        retObj.message = \"TEST PING\";\n\n        callback(retObj);\n        return;\n\n    } else {\n        retObj.status = \"ERROR\";\n        retObj.error = {\n            message: \"Error Occured\"\n        }\n        callback(retObj);\n        return\n    }\n\n}"
      },
      "webhookType": "workflow"
    },
    {
      "description": "Triggers when a new task is added to project",
      "dynamicResponseFields": true,
      "dynamicResponseFieldsDependsOn": [
        "resource_id"
      ],
      "dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(hashedParams, hashedUtils, callback) {\n\n  var retObj = {};\n  var responseObjArray = [];\n  // Input Validation\n  if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n    retObj['status'] = \"ERROR\";\n    retObj['error'] = {};\n    retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n    retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n    callback(retObj);\n                return;\n  } else {\n    var response = hashedParams['response'];\n    var data = [];\n\n    if (response['statusCode'] === 200) {\n\n      var body = hashedParams[\"body\"];\n\n      if(!(body || {}) || !(body.data || {}) ){\n        retObj[\"status\"] = \"ERROR\";\n        retObj[\"error\"] = {};\n        retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n        callback(retObj);\n        return;\n      }\n\n      if(body.data && body.data.length){\n        body.data.forEach(function(project){\n          data.push({\n            id: project.custom_field.gid | project.custom_field.id,\n            name: project.custom_field.name\n          });\n        });\n      }\n\n      retObj[\"status\"] = \"SUCCESS\";\n      retObj[\"data\"] = data;\n\n      callback(retObj);\n      return\n\n\n      // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n\n      var code = \"ERROR_AUTH_REFRESH\";\n      retObj.status = \"ERROR\";\n      retObj.errorCode = code;\n      retObj.error = {\n        code,\n        message: \"error occured due to expiration of token\"\n      };\n      callback(retObj);\n      return\n\n    } else if (hashedParams.response.statusCode === 402){\n\n      retObj[\"status\"] = \"SUCCESS\";\n      retObj[\"data\"] = [];\n      callback(retObj);\n      return;\n\n    } else if (hashedParams.response.statusCode === 403){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Forbidden\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    }  else if (hashedParams.response.statusCode === 404){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Not found\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    } else if (hashedParams.response.statusCode === 429){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Rate Limit Enforced\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    } else {\n      retObj['status'] = \"ERROR\";\n      retObj['error'] = {};\n      retObj['error']['code'] = \"ERROR_UNKNOWN\";\n      callback(retObj);\n      return;\n\n    }\n  }\n\n}",
      "dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var resource_id = null;\n\n  var triggerParams = hashedParams.params || {};\n\n  if(triggerParams && triggerParams.length){\n    triggerParams.forEach(function(param){\n      if(param.id === \"resource_id\"){\n        resource_id = param.value;\n      }\n    });\n  }\n\n  if(!resource_id){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Project Id is missing from Workflow\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: \"https://app.asana.com/api/1.0\",\n\n    url: \"/projects/\" + resource_id + \"/custom_field_settings\",\n\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true\n\n  };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
      "entity": "activity",
      "id": "new-task",
      "important": true,
      "name": "New Task",
      "params": [
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n                return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(project){\n                    data.push({\n                        id: project.gid || project.id,\n                        name: project.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n    } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n    if (hashedParams.query && hashedParams.query.offset) {\n      options.qs.offset = hashedParams.query.offset\n  \n    }\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 1,
      "responseFields": [
        {
          "description": "Comma separated list if task belongs to multiple projects",
          "id": "projectIds",
          "name": "Task Project Id",
          "type": "String"
        },
        {
          "description": "Comma separated list if task belongs to multiple projects",
          "id": "projectNames",
          "name": "Task Project Name",
          "type": "String"
        },
        {
          "description": "Due Date and Time",
          "id": "due_at",
          "name": "Task Due At",
          "type": "String"
        },
        {
          "description": "Due Date",
          "id": "due_on",
          "name": "Task Due On",
          "type": "String"
        },
        {
          "id": "assignee",
          "name": "Task Assignee Name",
          "type": "String"
        },
        {
          "id": "assignee_id",
          "name": "Task Assignee Id",
          "type": "String"
        },
        {
          "id": "assignee_status",
          "name": "Task Assignee Status",
          "type": "String"
        },
        {
          "id": "completed",
          "name": "Task Completed",
          "type": "String"
        },
        {
          "id": "completed_at",
          "name": "Task Completed At",
          "type": "String"
        },
        {
          "id": "created_at",
          "name": "Task Created At",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Task Id",
          "type": "String"
        },
        {
          "id": "modified_at",
          "name": "Task Modified At",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Task Name",
          "type": "String"
        },
        {
          "id": "notes",
          "name": "Task Notes",
          "type": "String"
        },
        {
          "id": "tags",
          "name": "Task Tags",
          "type": "String"
        },
        {
          "id": "workspace_id",
          "name": "Task Workspace Id",
          "type": "String"
        },
        {
          "id": "workspace_name",
          "name": "Task Workspace Name",
          "type": "String"
        }
      ],
      "sampleData": {
        "assignee": "Ratan",
        "assignee_id": 840504531510598,
        "assignee_status": "inbox",
        "completed": false,
        "completed_at": null,
        "created_at": "05-Aug-2019 09:15:00",
        "due_at": null,
        "due_on": "19-Aug-2019",
        "gid": "1134219505003204",
        "id": 1134219505003204,
        "modified_at": "05-Aug-2019 09:15:00",
        "name": "3rd subtask",
        "notes": "notes",
        "tags": "",
        "workspace_id": 840493337087127,
        "workspace_name": "Automate"
      },
      "source": {
        "type": "webhook",
        "webhookDeleteParse": "function webhookDeleteParse(hashedParams, hashedUtils, callback) {\n\n  var retObj = {};\n\n  if( !(hashedParams || {}).response ){\n\n    retObj.status = \"ERROR\";\n    retObj.error = {\n      message: \"response is missing while requesting webhook Delete Request\"\n    };\n    callback(retObj);\n    return;\n\n  }\n\n  if ( ( hashedParams.response.statusCode || {} ) == 200 ) {\n    \n    retObj.status = \"SUCCESS\";\n    callback(retObj);\n    return;\n      \n  } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else {\n\n    retObj.status = \"ERROR\";\n    retObj.error = {\n      message: \"error occured while deleting webhook with status code:\" + hashedParams.response.statusCode\n    };\n    callback(retObj);\n    return;\n  }\n}",
        "webhookDeleteRequest": "function webhookDeleteRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/webhooks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var workflow = hashedParams.workflow;\n\n  var webhookId = null;\n\n \n  if( workflow && workflow.trigger && workflow.trigger.webHook && workflow.trigger.webHook.status == 'registered' && workflow.trigger.webHook.data) {\n\n    webhookId = workflow.trigger.webHook.data.gid;\n\n    if (!webhookId) {\n      webhookId = workflow.trigger.webHook.data.gid;\n    }\n    \n  }\n\n  if ( !webhookId ) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch webhookId from workflow to delete webhook\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n\n    method: 'DELETE',\n\n    baseUrl: baseUrl,\n\n    headers: {\n        Authorization: \"Bearer \" + access_token\n    },\n\n    url: path + \"/\" + webhookId,\n\n    json: true\n      \n  };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
        "webhookObjectParse": "function webhookObjectParse(hashedParams, hashedUtils, callback) {\n\n    var retObj = {};\n    var _ = hashedUtils._;\n\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in webhookObjectRequest.\"\n\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            var params = {};\n\n            var dates = {\n                \"created_at\": true,\n                \"modified_at\": true,\n                \"due_at\": true,\n                \"due_on\": true,\n                \"completed_at\":true\n            };\n\n            var keys = {\n                \"id\": true,\n                \"name\": true,\n                \"completed\": true,\n                \"parent\": true,\n                \"assignee_status\": true,\n                \"notes\": true,\n                \"gid\": true\n            };\n\n            _.each(body.data, function(data, key){\n                if(dates[key]){\n                    if(data){\n                        params[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\n                    }\n                } else if(key === \"workspace\"){\n                    if(data){\n                        _.each(data, function(wData, wKey){\n                            if(wKey == \"gid\")\n                                params[\"workspace_id\"] = wData;\n                            else\n                                params[\"workspace_\" + wKey] = wData;\n                        });\n                    }\n                } else if(key === \"tags\"){\n\n                    if(data && data.length){\n                        var tags = \"\";\n                        data.forEach(function(tag) {\n                            tags += tag.name + \", \"\n                        });\n                        params[key] = tags.slice(0, tags.length - 2);\n                    }\n\n                }else if(key === \"parent\"){\n                    if(data && typeof data === 'object' && data.constructor === Object){\n                        _.each(data, function(wData, wKey){\n                             if(wKey == \"gid\")\n                                 params[\"parent_id\"] = wData;\n                             else\n                                 params[\"parent_\" + wKey] = wData;\n                        });\n                    }\n                    params[\"parent\"] = data\n                } else if(key === \"assignee\"){\n\n                            if(data){\n                                params[key] = data.name,\n                                params[key + \"_id\"] = data.gid || data.id;\n                            }\n\n                } else if(key === \"custom_fields\" && data instanceof Array){\n\n                    if(data && data.length){\n\n                      data.forEach(field => {\n\n                        if (field.type === 'enum') {\n                          params[field.gid || field.id] = field.enum_value ? field.enum_value.name : null\n                        } else {\n                          params[field.gid || field.id] = field[field.type + '_value']\n                        }\n\n                      })\n\n                    }\n\n                } else if(key === \"projects\") {\n\n                    if(data instanceof Array && data.length) {\n                        params['projectIds'] = data.map(pro => pro.gid || pro.id).join()\n                        params['projectNames'] = data.map(pro => pro.name).join()\n                    }\n\n                } else if(keys[key]){\n                    if(data !== null && data !== undefined){\n                        if(key == 'gid')\n                             params['id'] = data\n                        else    \n                             params[key] = data;\n                    }\n                }\n            });\n\n            retObj.status = \"SUCCESS\";\n            retObj.data = params;\n\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n\n        }\n    }\n    callback(retObj);\n    return\n}",
        "webhookObjectQuery": true,
        "webhookObjectRequest": "function webhookObjectRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/tasks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var task = hashedParams.parsedData.data.response;\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + task.resource.gid,\n\n     headers: {\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: [options]};\n\n  callback(retObj);\n  return\n\n}",
        "webhookRegisterParse": "function webhookRegisterParse(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\n    retObj.status = \"ERROR\";\n    retObj.error = {message: \"response or body to parse is missing while requesting in dynamicValueSourceParse\"};\n    callback(retObj);\n    return;\n  }\n\n  if (( hashedParams.response.statusCode || {} ) == 200 || ( hashedParams.response.statusCode || {} ) == 201) {\n      var parsed = hashedParams.body;\n      retObj.status = \"SUCCESS\";\n      retObj.data = {\n          webHook:{\n            status: 'registered',\n            data: parsed.data\n          }\n        };\n\n      callback(retObj);\n      return;\n\n  } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n  } else if (hashedParams.response.statusCode == 400) {\n\n    var message = hashedParams && hashedParams.body && hashedParams.body.errors.map(err => err.message).join()\n    message = message.includes('Unknown object') ? 'Does the selected project exist?' : message\n    retObj.status = \"ERROR\";\n    retObj.error = { message };\n    retObj.data =  { webHook : {} };\n    retObj.data.webHook.status = 'Failed';\n    retObj.data.webHook.data = { message };\n    callback(retObj);\n\n  } else {\n\n    retObj.status = \"ERROR\";\n    retObj.data=  {};\n    retObj.error = {message: \"error occured with status code:\"+hashedParams.response.statusCode};\n    retObj.data.webHook = {};\n    retObj.data.webHook.status = 'Failed';\n    retObj.data.webHook.data = {message: \"Error while requesting for webhook registration with status code \" + hashedParams.response.statusCode + \" body \" + JSON.stringify(hashedParams.body)};\n    callback(retObj);\n    return\n  }\n}",
        "webhookRegisterRequest": "function webhookRegisterRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/webhooks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var resource_id = null;\n\n  var triggerParams = hashedParams.workflow.trigger.params || {};\n\n  if(triggerParams && triggerParams.length){\n    triggerParams.forEach(function(param){\n      if(param.id === \"resource_id\"){\n        resource_id = param.value;\n      }\n    });\n  }\n\n  if(!resource_id){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Resource Id is missing from Workflow\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n      method: 'POST',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      body: {\n          \"data\": {\n            \"resource\": resource_id,\n            \"target\": process.env['webhookUrl'] + '/webhook/' + hashedParams.workflow._id\n          }\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  \n  callback(retObj);\n  return\n\n}",
        "webhookTriggerParse": "function webhookTriggerParse(hashedParams, hashedUtils, callback){\n    \n    var retObj = {};\n\n    var _ = hashedUtils._;\n\n     if(hashedParams.request.headers[\"x-hook-secret\"] && _.isEmpty(hashedParams.request.body)){\n\n        retObj.status = \"SKIP\";\n        retObj.message = \"Handshake\";\n        retObj.response = {};\n        retObj.response.headers = {\n            \"x-hook-secret\": hashedParams.request.headers[\"x-hook-secret\"]\n        };\n\n        callback(retObj);\n        return;\n\n    } else if(hashedParams[\"body\"].events.length) {\n\n        var resource_id = _.findWhere(hashedParams.workflow.trigger.params, {\n            id: \"resource_id\"\n        });\n\n        resource_id = resource_id.value;\n\n        var task = null;\n\n        hashedParams.body.events.forEach(function(event){\n            if(event.resource.resource_type === \"task\" && event.action === \"added\" && event.parent.gid == resource_id){\n                task = event;\n            }\n        });\n\n        if(task){\n\n            retObj.data = {response: task};\n            retObj.status = \"SUCCESS\";\n            callback(retObj);\n            return\n            \n        } else{\n\n            retObj.status = \"SKIP\";\n            retObj.message = \"Unwanted Resource\"; \n            callback(retObj);\n            return;\n        }\n        \n        \n    } else if(hashedParams[\"body\"].events.length === 0) {\n\n        retObj.status = \"SKIP\";\n        retObj.message = \"TEST PING\";\n\n        callback(retObj);\n        return;\n\n    } else {\n        retObj.status = \"ERROR\";\n        retObj.error = {\n            message: \"Error Occured\"\n        }\n        callback(retObj);\n        return\n    }\n\n}"
      },
      "webhookType": "workflow"
    },
    {
      "description": "Triggers when a specified tag is added to a task",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "activity",
      "id": "new-tag",
      "name": "Tag added to Task",
      "params": [
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n                return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing tags from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No tags Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(tag){\n                    data.push({\n                        id: tag.gid || tag.id,\n                        name: tag.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n    } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/tags\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n    if (hashedParams.query && hashedParams.query.offset) {\n      options.qs.offset = hashedParams.query.offset\n  \n    }\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "tag_id",
          "inputType": "select",
          "name": "Tag",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "id": "assignee",
          "name": "Task Assignee",
          "type": "String"
        },
        {
          "id": "assignee_status",
          "name": "Task Assignee Status",
          "type": "String"
        },
        {
          "id": "completed",
          "name": "Task Completed",
          "type": "String"
        },
        {
          "id": "completed_at",
          "name": "Task Completed At",
          "type": "String"
        },
        {
          "id": "created_at",
          "name": "Task Created At",
          "type": "String"
        },
        {
          "id": "due_on",
          "name": "Task Due On",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Task Id",
          "type": "String"
        },
        {
          "id": "modified_at",
          "name": "Task Modified At",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Task Name",
          "type": "String"
        },
        {
          "id": "notes",
          "name": "Task Notes",
          "type": "String"
        },
        {
          "id": "parent",
          "name": "Task's Parent",
          "type": "String"
        },
        {
          "id": "parent_gid",
          "name": "Task's Parent GID",
          "type": "String"
        },
        {
          "id": "parent_id",
          "name": "Task's Parent Id",
          "type": "String"
        },
        {
          "id": "parent_name",
          "name": "Task's Parent Name",
          "type": "String"
        },
        {
          "id": "tags",
          "name": "Task Tags",
          "type": "String"
        },
        {
          "id": "workspace_id",
          "name": "Task Workspace Id",
          "type": "String"
        },
        {
          "id": "workspace_name",
          "name": "Task Workspace Name",
          "type": "String"
        }
      ],
      "sampleData": {
        "assignee": "Ratan",
        "assignee_id": 840504531510598,
        "assignee_status": "inbox",
        "completed": false,
        "completed_at": null,
        "created_at": "05-Aug-2019 09:15:00",
        "due_at": null,
        "due_on": "19-Aug-2019",
        "gid": "1134219505003204",
        "id": 1134219505003204,
        "modified_at": "05-Aug-2019 09:15:00",
        "name": "3rd subtask",
        "notes": "notes",
        "parent_gid": "1134219505003201",
        "parent_id": 1134219505003201,
        "parent_name": "party-task-1-**",
        "tags": "tag1",
        "workspace_id": 840493337087127,
        "workspace_name": "Automate"
      },
      "source": {
        "initialPollParse": "function intialPollParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in intialPollParse.\"\n        callback(retObj);\n        return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing tasks from body\";\n                callback(retObj);\n                return; \n            }\n\n            var polledIds = [];\n\n            if(body.data && body.data.length){\n                for(var i = 0 ; i < body.data.length ; i++) {\n                    if (i === 3) {\n                        break;\n                    }\n                    polledIds.push(body.data[i].id || body.data[i].gid)\n                }\n            }\n            else {\n                retObj['status'] = 'ERROR';\n                retObj['error'] = {\n                    message: 'No tasks found for the provided tag, please tag a few tasks to generate the poll data'\n                }\n                return callback(retObj)\n            }\n\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = {};\n            retObj[\"data\"][\"pollData\"] = {\n                status: \"SUCCESS\",\n                data: {\n                    polledIds\n                }\n            };\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n    } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
        "initialPollRequest": "function intialPollRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/tags\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var tag_id = _.findWhere(hashedParams.workflow.trigger.params, {\n      id: \"tag_id\"\n  });\n\n  tag_id = tag_id.value;\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + tag_id + \"/tasks\",\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
        "objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = {};\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (params.response.statusCode === 200) {\n        \n        var parsed = {};\n        var _ = utils._;\n\n        var body = JSON.parse(params.body);\n\n            var dates = {\n                \"created_at\": true,\n                \"modified_at\": true,\n                \"due_on\": true,\n                \"completed_at\":true\n            };\n            console.log(\"in object parse\")\n            var keys = {\n                \"id\": true,\n                \"name\": true,\n                \"completed\": true,\n                \"parent\": true,\n                \"assignee_status\": true,\n                \"notes\": true,\n                \"gid\": true\n            };\n\n            _.each(body.data, function(data, key){\n\n                if(dates[key]){\n                    if(data){\n                        parsed[key] = utils.libDate.parseJSDateTimeToStandardString(new Date(data));\n                    }\n                } else if(key === \"workspace\"){\n                    if(data){\n                        _.each(data, function(wData, wKey){\n                            if(wKey == \"gid\")\n                                parsed[\"workspace_id\"] = wData;\n                            else\n                                parsed[\"workspace_\" + wKey] = wData;\n                        });\n                    }\n                } else if(key === \"tags\"){\n\n                    if(data && data.length){\n                        var tags = \"\";\n                        data.forEach(function(tag) {\n                            tags += tag.name + \", \"\n                        });\n                        parsed[key] = tags.slice(0, tags.length - 2);\n                    }\n\n                } else if(key === \"parent\"){\n                    if(data && typeof data === 'object' && data.constructor === Object){\n                        _.each(data, function(wData, wKey){\n                            if(wKey == \"gid\")\n                                 parsed[\"parent_id\"] = wData;\n                            else\n                                 parsed[\"parent_\" + wKey] = wData;\n                        });\n                    }\n                    parsed[\"parent\"] = data\n                } else if (key === 'assignee') {\n                    if (data && data.name) {\n                        parsed[key] = data.name\n                    }\n                } else if(keys[key]){\n                    if(data !== null && data !== undefined){\n                        if(key == 'gid')\n                             parsed['id'] = data\n                         else    \n                            parsed[key] = data;\n                    }\n                }\n            });\n\n            retObj.status = \"SUCCESS\";\n            retObj.data = {\n                newObject: {\n                    response: {\n                        params: parsed\n                    }\n                },\n                hash: {\n                    id: body.data.id || body.data.id\n                }\n            }\n\n            callback(retObj);\n            return;\n\n    } else {\n        let code\n        if (params.response.statusCode === 401) {\n            code = 'ERROR_AUTH_REFRESH'\n        } else if (params.response.statusCode === 400) {\n            code = 'ERROR_MISSING_PARAM'\n        } else if (params.response.statusCode === 403 || params.response.statusCode === 429) {\n            code = 'ERROR_RATE_LIMIT'\n        } else {\n            code = 'ERROR_UNKNOWN'\n        }\n        return callback({\n            error: {\n                code,\n                message: body.error || params.response.statusCode\n            },\n            errorCode: code,\n            status: 'ERROR'\n        })\n    }\n}",
        "objectQuery": true,
        "objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n    const authParams = params.userapp.fetchAuthParams(params.appinfo)\n    if (!authParams || !authParams.access_token) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n    const url = 'https://app.asana.com/api/1.0/tasks'\n    const parsedData = params.parsedData.data.objects || []\n    const options = parsedData\n        .filter(p => p && p.gid)\n        .map(p => ({\n            headers: {\n                Authorization: `Bearer ${authParams.access_token}`\n            },\n            method: 'GET',\n            url: `${url}/${p.gid}`\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
        "pollParse": "function intialPollParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in intialPollParse.\"\n        callback(retObj);\n                return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n        var _ = hashedUtils._;\n        var newPolledIds = [];\n        var newObjects = []\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing tasks from body\";\n                callback(retObj);\n                return; \n            }\n\n            //check for any data at all\n            if (!body.data.length) {\n\n                retObj['status'] = \"SUCCESS\";\n                retObj['data'] = {};\n                retObj['data']['objects'] = [];\n                retObj['data']['pollData']  = (hashedParams.workflow.trigger || {}).pollData;\n                callback(retObj);\n                return;\n            }\n\n\n            //backward compatibility check\n            var pollCount = hashedParams.workflow.trigger.pollData.data.count\n            //if needs to be made backward compatible\n            if (pollCount || pollCount === 0) {\n\n                for (let i = 0 ; i < body.data.length ; i++) {\n                    if (i === 3) \n                        break;\n                    newPolledIds.push(body.data[i].id || body.data[i].gid)\n                }\n\n                if (body.data.length > pollCount) {\n\n                    var newData = body.data.slice(pollCount, body.data.length);\n\n                    retObj[\"status\"] = \"SUCCESS\";\n                    retObj[\"data\"] = {};\n                    retObj[\"data\"][\"pollData\"] = {\n                        status: \"SUCCESS\",\n                        data: {\n                            polledIds: newPolledIds\n                        }\n                    };\n    \n                    retObj[\"data\"][\"objects\"] = newData;\n    \n\n                } else {\n                    retObj['status'] = \"SUCCESS\";\n                    retObj['data'] = {};\n                    retObj['data']['objects'] = [];\n                    retObj['data']['pollData']  = {\n                        status: \"SUCCESS\",\n                        data: {\n                            polledIds: newPolledIds\n                        },\n                        forceSave: true\n                    }\n                }\n                callback(retObj);\n                return;\n            }//end for backward compatibility\n\n\n\n            var polledIds = hashedParams.workflow.trigger.pollData.data.polledIds;\n            var index = null;\n\n            //finding if one of our saved ids is present in data\n            if (polledIds[0]) {\n                index = _.findWhere(body.data, {gid: polledIds[0]});\n            }\n            if (!index && polledIds[1]) {\n                index = _.findWhere(body.data, {gid: polledIds[1]});\n            }\n            if (!index && polledIds[2]) {\n                index = _.findWhere(body.data, {gid: polledIds[2]});\n            }\n            if (!index) {\n                index = null\n            }\n\n            //if saved id is present then slicing data before the id\n            if (index) {\n\n                index = _.findLastIndex(body.data, {gid: index.gid})\n\n                var newTasks = body.data.slice(0, index);\n\n                if (newTasks && newTasks.length) {\n                    newTasks.forEach(function(task){\n                        newObjects.push(task)\n                    });\n                }\n\n                if (newObjects.length) {\n                    for (var i = 0 ; i < body.data.length ; i++) {\n                        if (i === 3) \n                            break;\n                        newPolledIds.push(body.data[i].gid)\n                    }\n                }\n\n            }//end for if we find the id\n            else {\n                //if all three saved ids are missing from data, then generate three new ids\n                for (var i = 0 ; i < body.data.length ; i++) {\n                    if (i === 3) \n                        break;\n                    newPolledIds.push(body.data[i].gid)\n                }\n\n                retObj['status'] = \"SUCCESS\";\n                retObj['data'] = {};\n                retObj['data']['objects'] = [];\n                retObj['data']['pollData']  = {\n                    status: \"SUCCESS\",\n                    data: {\n                        polledIds: newPolledIds\n                    },\n                    forceSave: true\n                }\n                callback(retObj)\n                return\n\n            }//else we generate three new ids and force save them as new poll data \n\n            //if newObjects array has some new data then we return success\n            if(newObjects.length){\n            \n                retObj[\"status\"] = \"SUCCESS\";\n                retObj[\"data\"] = {};\n                retObj[\"data\"][\"pollData\"] = {\n                    status: \"SUCCESS\",\n                    data: {\n                        polledIds: newPolledIds\n                    }\n                };\n\n                retObj[\"data\"][\"objects\"] = newObjects;\n\n            } else {\n\n                retObj['status'] = \"SUCCESS\";\n                retObj['data'] = {};\n                retObj['data']['objects'] = [];\n                retObj['data']['pollData']  = (hashedParams.workflow.trigger || {}).pollData;\n\n            }//else saving the old poll data\n\n            \n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n    } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
        "pollRequest": "function pollRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/tags\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  var _ = hashedUtils._;\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var tag_id = _.findWhere(hashedParams.workflow.trigger.params, {\n      id: \"tag_id\"\n  });\n\n  tag_id = tag_id.value;\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + tag_id + \"/tasks\",\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
        "type": "poll"
      },
      "webhookType": "workflow"
    },
    {
      "description": "Triggers when a task is completed in a project",
      "dynamicResponseFields": true,
      "dynamicResponseFieldsDependsOn": [
        "resource_id"
      ],
      "dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(hashedParams, hashedUtils, callback) {\n\n  var retObj = {};\n  var responseObjArray = [];\n  // Input Validation\n  if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n    retObj['status'] = \"ERROR\";\n    retObj['error'] = {};\n    retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n    retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n    callback(retObj);\n            return\n  } else {\n    var response = hashedParams['response'];\n    var data = [];\n\n    if (response['statusCode'] === 200) {\n\n      var body = hashedParams[\"body\"];\n\n      if(!(body || {}) || !(body.data || {}) ){\n        retObj[\"status\"] = \"ERROR\";\n        retObj[\"error\"] = {};\n        retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n        callback(retObj);\n        return;\n      }\n\n      if(body.data && body.data.length){\n        body.data.forEach(function(project){\n          data.push({\n            id: project.custom_field.gid || project.custom_field.id,\n            name: project.custom_field.name\n          });\n        });\n      }\n\n      retObj[\"status\"] = \"SUCCESS\";\n      retObj[\"data\"] = data;\n\n      callback(retObj);\n      return\n\n\n      // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n\n      var code = \"ERROR_AUTH_REFRESH\";\n      retObj.status = \"ERROR\";\n      retObj.errorCode = code;\n      retObj.error = {\n        code,\n        message: \"error occured due to expiration of token\"\n      };\n      callback(retObj);\n      return\n\n    } else if (hashedParams.response.statusCode === 402){\n\n      retObj[\"status\"] = \"SUCCESS\";\n      retObj[\"data\"] = [];\n      callback(retObj);\n      return;\n\n    } else if (hashedParams.response.statusCode === 403){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Forbidden\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    }  else if (hashedParams.response.statusCode === 404){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Not found\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    } else if (hashedParams.response.statusCode === 429){\n\n      retObj.status = \"ERROR\";\n      retObj.errorCode = \"Rate Limit Enforced\";\n      retObj.error = {\n        message: hashedParams.body.errors[0].message\n      };\n      callback(retObj);\n      return;\n\n    } else {\n      retObj['status'] = \"ERROR\";\n      retObj['error'] = {};\n      retObj['error']['code'] = \"ERROR_UNKNOWN\";\n      callback(retObj);\n      return;\n\n    }\n  }\n\n}",
      "dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n  if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var resource_id = null;\n\n  var triggerParams = hashedParams.params || {};\n\n  if(triggerParams && triggerParams.length){\n    triggerParams.forEach(function(param){\n      if(param.id === \"resource_id\"){\n        resource_id = param.value;\n      }\n    });\n  }\n\n  if(!resource_id){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Project Id is missing from Workflow\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n    method: 'GET',\n\n    baseUrl: \"https://app.asana.com/api/1.0\",\n\n    url: \"/projects/\" + resource_id + \"/custom_field_settings\",\n\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Bearer \" + access_token\n    },\n\n    json: true\n\n  };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
      "entity": "activity",
      "id": "completed-task",
      "important": true,
      "name": "Task Completed",
      "params": [
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n            returns\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(project){\n                    data.push({\n                        id: project.gid || project.id,\n                        name: project.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n      json: true\n      \n    };\n    if (hashedParams.query && hashedParams.query.offset) {\n      options.qs.offset = hashedParams.query.offset\n  \n    }\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 2,
      "responseFields": [
        {
          "description": "Comma separated list if task belongs to multiple projects",
          "id": "projectIds",
          "name": "Task Project Id",
          "type": "String"
        },
        {
          "description": "Comma separated list if task belongs to multiple projects",
          "id": "projectNames",
          "name": "Task Project Name",
          "type": "String"
        },
        {
          "id": "assignee",
          "name": "Task Assignee Name",
          "type": "String"
        },
        {
          "id": "assignee_id",
          "name": "Task Assignee Id",
          "type": "String"
        },
        {
          "id": "completed",
          "name": "Task Completed",
          "type": "String"
        },
        {
          "id": "completed_at",
          "name": "Task Completed At",
          "type": "String"
        },
        {
          "id": "created_at",
          "name": "Task Created At",
          "type": "String"
        },
        {
          "id": "due_on",
          "name": "Task Due On",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Task Id",
          "type": "String"
        },
        {
          "id": "modified_at",
          "name": "Task Modified At",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Task Name",
          "type": "String"
        },
        {
          "id": "notes",
          "name": "Task Notes",
          "type": "String"
        },
        {
          "id": "parent",
          "name": "Task's Parent",
          "type": "String"
        },
        {
          "id": "parent_gid",
          "name": "Task's Parent GID",
          "type": "String"
        },
        {
          "id": "parent_id",
          "name": "Task's Parent Id",
          "type": "String"
        },
        {
          "id": "parent_name",
          "name": "Task's Parent Name",
          "type": "String"
        },
        {
          "id": "tags",
          "name": "Task Tags",
          "type": "String"
        },
        {
          "id": "workspace_id",
          "name": "Task Workspace Id",
          "type": "String"
        },
        {
          "id": "workspace_name",
          "name": "Task Workspace Name",
          "type": "String"
        }
      ],
      "sampleData": {
        "assignee": "Ratan",
        "assignee_id": 840504531510598,
        "assignee_status": "inbox",
        "completed": false,
        "completed_at": null,
        "created_at": "05-Aug-2019 09:15:00",
        "due_at": null,
        "due_on": "19-Aug-2019",
        "gid": "1134219505003204",
        "id": 1134219505003204,
        "modified_at": "05-Aug-2019 09:15:00",
        "name": "3rd subtask",
        "notes": "notes",
        "parent_gid": "1134219505003201",
        "parent_id": 1134219505003201,
        "parent_name": "party-task-1-**",
        "tags": [
          
        ],
        "workspace_id": 840493337087127,
        "workspace_name": "Automate"
      },
      "source": {
        "type": "webhook",
        "webhookDeleteParse": "function webhookDeleteParse(hashedParams, hashedUtils, callback) {\n\n  var retObj = {};\n\n  if( !(hashedParams || {}).response ){\n\n    retObj.status = \"ERROR\";\n    retObj.error = {\n      message: \"response is missing while requesting webhook Delete Request\"\n    };\n    callback(retObj);\n    return;\n\n  }\n\n  if ( ( hashedParams.response.statusCode || {} ) == 200 ) {\n    \n    retObj.status = \"SUCCESS\";\n    callback(retObj);\n    return;\n      \n  } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n  } else {\n\n    retObj.status = \"ERROR\";\n    retObj.error = {\n      message: \"error occured while deleting webhook with status code:\" + hashedParams.response.statusCode\n    };\n    callback(retObj);\n    return;\n  }\n}",
        "webhookDeleteRequest": "function webhookDeleteRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/webhooks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var workflow = hashedParams.workflow;\n\n  var webhookId = null;\n\n \n  if( workflow && workflow.trigger && workflow.trigger.webHook && workflow.trigger.webHook.status == 'registered' && workflow.trigger.webHook.data) {\n\n    webhookId = workflow.trigger.webHook.data.gid;\n\n    if (!webhookId) {\n      webhookId = workflow.trigger.webHook.data.gid;\n    }\n    \n  }\n\n  if ( !webhookId ) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch webhookId from workflow to delete webhook\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n\n    method: 'DELETE',\n\n    baseUrl: baseUrl,\n\n    headers: {\n        Authorization: \"Bearer \" + access_token\n    },\n\n    url: path + \"/\" + webhookId,\n\n    json: true\n      \n  };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
        "webhookObjectParse": "function webhookObjectParse(hashedParams, hashedUtils, callback) {\n\n    var retObj = {};\n    var _ = hashedUtils._;\n\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in webhookObjectRequest.\"\n\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if (!(body.data.completed)) {\n                retObj.status = \"SUCCESS\";\n                retObj.data = [];\n                callback(retObj);\n                return;\n            }\n\n            if (body.data && body.data.modified_at && body.data.completed_at) {\n               \n                let lastModified = hashedUtils.moment(body.data.modified_at).unix()\n                let completedAt = hashedUtils.moment(body.data.completed_at).unix()\n                if (lastModified > completedAt) {\n                  \n                    retObj.status = \"SUCCESS\";\n                    retObj.data = [];\n                    callback(retObj);\n                    return;\n                }\n            }\n\n            var params = {};\n\n            var dates = {\n                \"created_at\": true,\n                \"modified_at\": true,\n                \"due_on\": true,\n                \"completed_at\": true\n            };\n\n            var keys = {\n                \"id\": true,\n                \"name\": true,\n                \"completed\": true,\n                \"parent\": true,\n                \"assignee_status\": true,\n                \"notes\": true,\n                \"gid\" : true\n            };\n\n            _.each(body.data, function (data, key) {\n                if (dates[key]) {\n                    if (data) {\n                        params[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\n                    }\n                } else if(key === \"workspace\"){\n                    if(data){\n                        _.each(data, function(wData, wKey){\n                            if(wKey == \"gid\")\n                                params[\"workspace_id\"] = wData;\n                            else\n                                params[\"workspace_\" + wKey] = wData;\n                        });\n                    }\n                } else if (key === \"tags\") {\n\n                    if (data && data.length) {\n                        var tags = \"\";\n                        data.forEach(function (tag) {\n                            tags += tag.name + \", \"\n                        });\n                        params[key] = tags.slice(0, tags.length - 2);\n                    }\n\n                } else if (key === \"assignee\") {\n\n                    if (data) {\n                        params[key] = data.name;\n                        params[key + \"_id\"] = data.gid || data.id;\n                    }\n\n                } else if (key === \"custom_fields\" && data instanceof Array) {\n\n                    if (data && data.length) {\n\n                        data.forEach(field => {\n\n                        if (field.type === 'enum') {\n                          params[field.gid || field.id] = field.enum_value ? field.enum_value.name : null\n                        } else {\n                          params[field.gid || field.id] = field[field.type + '_value']\n                        }\n\n                        })\n\n                    }\n\n                }else if(key === \"parent\"){\n                    if(data && typeof data === 'object' && data.constructor === Object){\n                        _.each(data, function(wData, wKey){\n                            if(wKey == \"gid\")\n                                params[\"parent_id\" ] = wData;\n                            else\n                                params[\"parent_\" + wKey] = wData;\n                        });\n                    }\n                    params[\"parent\"] = data\n                }else if(key === \"projects\") {\n\n                    if(data instanceof Array && data.length) {\n                        params['projectIds'] = data.map(pro => pro.gid || pro.id).join()\n                        params['projectNames'] = data.map(pro => pro.name).join()\n                    }\n                    \n                } else if(keys[key]){\n                    if(data !== null && data !== undefined){\n                        if(key == 'gid')    \n                            params[\"id\"] = data;\n                        else\n                            params[key] = data;\n                    }\n                }\n            });\n\n            retObj.status = \"SUCCESS\";\n            retObj.data = params;\n\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n                code,\n                message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else if (hashedParams.response.statusCode === 403) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n\n        }\n    }\n    callback(retObj);\n    return\n}",
        "webhookObjectQuery": true,
        "webhookObjectRequest": "function webhookObjectRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/tasks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var task = hashedParams.parsedData;\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + task.resource.gid,\n\n     headers: {\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n\n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: [options]};\n\n  callback(retObj);\n  return\n\n}",
        "webhookRegisterParse": "function webhookRegisterParse(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\n    retObj.status = \"ERROR\";\n    retObj.error = {message: \"response or body to parse is missing while requesting in dynamicValueSourceParse\"};\n    callback(retObj);\n    return;\n  }\n\n  if (( hashedParams.response.statusCode || {} ) == 200 || ( hashedParams.response.statusCode || {} ) == 201) {\n      var parsed = hashedParams.body;\n      retObj.status = \"SUCCESS\";\n      retObj.data = {\n          webHook:{\n            status: 'registered',\n            data: parsed.data\n          }\n        };\n\n      callback(retObj);\n      return;\n\n  } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n  } else if (hashedParams.response.statusCode == 400) {\n\n    var message = hashedParams && hashedParams.body && hashedParams.body.errors.map(err => err.message).join()\n    message = message.includes('Unknown object') ? 'Does the selected project exist?' : message\n    retObj.status = \"ERROR\";\n    retObj.error = { message };\n    retObj.data =  { webHook : {} };\n    retObj.data.webHook.status = 'Failed';\n    retObj.data.webHook.data = { message };\n    callback(retObj);\n    return;\n  } else {\n\n    retObj.status = \"ERROR\";\n    retObj.data=  {};\n    retObj.error = {message: \"error occured with status code:\"+hashedParams.response.statusCode};\n    retObj.data.webHook = {};\n    retObj.data.webHook.status = 'Failed';\n    retObj.data.webHook.data = {message: \"Error while requesting for webhook registration with status code \" + hashedParams.response.statusCode + \" body \" + JSON.stringify(hashedParams.body)};\n    callback(retObj);\n    return\n  }\n}",
        "webhookRegisterRequest": "function webhookRegisterRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/webhooks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var resource_id = null;\n\n  var triggerParams = hashedParams.workflow.trigger.params || {};\n\n  if(triggerParams && triggerParams.length){\n    triggerParams.forEach(function(param){\n      if(param.id === \"resource_id\"){\n        resource_id = param.value;\n      }\n    });\n  }\n\n  if(!resource_id){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Resource Id is missing from Workflow\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n      method: 'POST',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      body: {\n          \"data\": {\n            \"resource\": resource_id,\n            \"target\": process.env['webhookUrl'] + '/webhook/' + hashedParams.workflow._id\n          }\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  \n  callback(retObj);\n  return\n\n}",
        "webhookTriggerParse": "function webhookTriggerParse(hashedParams, hashedUtils, callback){\n \n    var retObj = {};\n\n    var _ = hashedUtils._;\n\n     if(hashedParams.request.headers[\"x-hook-secret\"] && _.isEmpty(hashedParams.request.body)){\n\n        retObj.status = \"SKIP\";\n        retObj.message = \"Handshake\";\n        retObj.response = {};\n        retObj.response.headers = {\n            \"x-hook-secret\": hashedParams.request.headers[\"x-hook-secret\"]\n        };\n\n        callback(retObj);\n        return;\n\n    } else if (hashedParams['body'].events.length) {\n      var events = hashedParams.body.events\n      var deletedTasks = events\n        .filter(event => event.resource.resource_type === 'task' && event.action === 'deleted')\n\n      var changedTasks = events\n        .filter(event => event.resource.resource_type === 'task' && event.action === 'changed')\n        .filter(cEvent => !deletedTasks.find(dEvent => dEvent.resource.gid === cEvent.resource.gid))\n\n      var uniqueTasks = []\n      var uniqueMap = {}\n\n      changedTasks.forEach(task => {\n        if (!uniqueMap[task.resource.gid]) {\n          uniqueTasks.push(task)\n          uniqueMap[task.resource.gid] = true\n        }\n      })\n\n      if (uniqueTasks.length) {\n        retObj.data = {objects: uniqueTasks}\n        retObj.status = 'SUCCESS'\n        callback(retObj)\n      } else {\n        retObj.status = 'SKIP'\n        retObj.message = 'Unwanted Resource'\n        callback(retObj)\n      }\n\n    } else if(hashedParams[\"body\"].events.length === 0) {\n\n        retObj.status = \"SKIP\";\n        retObj.message = \"TEST PING\";\n\n        callback(retObj);\n        return;\n\n    } else {\n        retObj.status = \"ERROR\";\n        retObj.error = {\n            message: \"Error Occured\"\n        }\n        callback(retObj);\n        return\n    }\n\n}"
      },
      "webhookType": "workflow"
    },
    {
      "description": "Triggers when there are changes to Task due date, assignee, name, section etc.",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "message",
      "id": "new-story",
      "important": true,
      "name": "New Activity in Project",
      "params": [
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\n  \n\n    var retObj = {};\n    var responseObjArray = [];\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\n        callback(retObj);\n                return;\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            if(!(body || {}) || !(body.data || {}) ){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\n                callback(retObj);\n                return; \n            }\n\n            if(!(body.data.length)){\n                retObj[\"status\"] = \"ERROR\";\n                retObj[\"error\"] = {};\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\n                callback(retObj);\n                return; \n            }\n\n\n            if(body.data && body.data.length){\n                body.data.forEach(function(project){\n                    data.push({\n                        id: project.gid || project.id,\n                        name: project.name\n                    });\n                });\n            }\n            if (body.next_page && body.next_page.offset) {\n                retObj.meta = {\n                    nextPage: {\n                        offset: body.next_page.offset\n                    }\n                }\n            }\n            retObj[\"status\"] = \"SUCCESS\";\n            retObj[\"data\"] = data;\n\n            callback(retObj);\n            return\n        \n            \n        // add more error code specific code blocks\n    } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n    } else if (hashedParams.response.statusCode === 403){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        }  else if (hashedParams.response.statusCode === 404){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429){\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n            callback(retObj);\n            return;\n\n        }\n    }\n    \n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/projects\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n\n   if(!(fetchedParams[\"access_token\"])){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }//end auth fetch\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n      \n    };\n    if (hashedParams.query && hashedParams.query.offset) {\n      options.qs.offset = hashedParams.query.offset\n  \n    }\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 2,
      "responseFields": [
        {
          "description": "Global unique ID of the activity.",
          "id": "id",
          "name": "Activity Id",
          "type": "String"
        },
        {
          "description": "Human-readable text for the activity.",
          "id": "text",
          "name": "Activity Text",
          "type": "String"
        },
        {
          "description": "The component of the Asana product the user used to trigger the activity.",
          "id": "source",
          "name": "Activity Source",
          "type": "String"
        },
        {
          "description": "The id of the user who created the activity.",
          "id": "created_by_id",
          "name": "Activity Created By Id",
          "type": "String"
        },
        {
          "description": "The name of the user who created the activity.",
          "id": "created_by_name",
          "name": "Activity Created By Name",
          "type": "String"
        },
        {
          "description": "The task related to this activity.",
          "id": "target_id",
          "name": "Task Id",
          "searchAction": "find-task",
          "searchID": "task_id",
          "searchLabel": "Get Task info",
          "type": "String"
        },
        {
          "description": "The time at which this activity was created.",
          "id": "created_at",
          "name": "Activity Created At",
          "type": "String"
        },
        {
          "description": "The type of Activity. Example: System, Comment..",
          "id": "type",
          "name": "Activity Type",
          "type": "String"
        }
      ],
      "sampleData": {
        "created_at": "05-Aug-2019 09:15:00",
        "created_by_id": 840504531510598,
        "created_by_name": "Ratan",
        "gid": "1135026385087801",
        "id": "1135026385087801",
        "resource_subtype": "due_date_changed",
        "resource_type": "story",
        "source": "web",
        "target_id": 1134219505003201,
        "text": "changed the due date to August 20",
        "type": "system"
      },
      "source": {
        "type": "webhook",
        "webhookDeleteParse": "function webhookDeleteParse(hashedParams, hashedUtils, callback) {\n\n  var retObj = {};\n\n  if( !(hashedParams || {}).response ){\n\n    retObj.status = \"ERROR\";\n    retObj.error = {\n      message: \"response is missing while requesting webhook Delete Request\"\n    };\n    callback(retObj);\n    return;\n\n  }\n\n  if ( ( hashedParams.response.statusCode || {} ) == 200 ) {\n    \n    retObj.status = \"SUCCESS\";\n    callback(retObj);\n    return;\n      \n  } else if (hashedParams.response.statusCode == 401) {\n    \n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n            \n  } else {\n\n    retObj.status = \"ERROR\";\n    retObj.error = {\n      message: \"error occured while deleting webhook with status code:\" + hashedParams.response.statusCode\n    };\n    callback(retObj);\n    return;\n  }\n}",
        "webhookDeleteRequest": "function webhookDeleteRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/webhooks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow){\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var workflow = hashedParams.workflow;\n\n  var webhookId = null;\n\n \n  if( workflow && workflow.trigger && workflow.trigger.webHook && workflow.trigger.webHook.status == 'registered' && workflow.trigger.webHook.data) {\n\n    webhookId = workflow.trigger.webHook.data.gid;\n\n    if (!webhookId) {\n      webhookId = workflow.trigger.webHook.data.gid;\n    }\n    \n  }\n\n  if ( !webhookId ) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch webhookId from workflow to delete webhook\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n\n    method: 'DELETE',\n\n    baseUrl: baseUrl,\n\n    headers: {\n        Authorization: \"Bearer \" + access_token\n    },\n\n    url: path + \"/\" + webhookId,\n\n    json: true\n      \n  };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  callback(retObj);\n  return\n\n}",
        "webhookObjectParse": "function webhookObjectParse(hashedParams, hashedUtils, callback) {\n\n    var retObj = {};\n    var _ = hashedUtils._;\n\n    // Input Validation\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in webhookObjectRequest.\"\n\n    } else {\n        var response = hashedParams['response'];\n        var data = [];\n\n        if (response['statusCode'] === 200) {\n\n            var body = hashedParams[\"body\"];\n\n            var params = {};\n\n            var dates = {\n                \"created_at\": true\n            };\n\n            var keys = {\n                text: true,\n                type: true,\n                source: true,\n                id: true,\n                gid: true\n            };\n\n            _.each(body.data, function (data, key) {\n                if (dates[key]) {\n                    if (data) {\n                        params[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\n                    }\n                } else if(key === \"created_by\"){\n                    if(data){\n                        _.each(data, function(wData, wKey){\n                            if(wKey == 'gid')\n                                 params[\"created_by_id\"] = wData; \n                            else            \n                                params[\"created_by_\" + wKey] = wData;\n                        });\n                    }\n                } else if (key === \"target\") {\n\n                    if(data){\n                        _.each(data, function(tData, tKey){\n                            if(tKey === \"id\" || tKey == 'gid'){\n                                if(tData){\n                                    params[\"target_id\"] = tData;\n                                }\n                            }\n                        });\n                       \n                    }\n\n                } else if(keys[key]){\n                    if(data !== null && data !== undefined){\n                        if(key == 'gid')    \n                           params[\"id\"] = data;\n                        else\n                           params[key] = data;\n                    }\n                }\n            });\n\n            retObj.status = \"SUCCESS\";\n            retObj.data = params;\n\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n                code,\n                message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n        } else if (hashedParams.response.statusCode === 403) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Forbidden\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 404) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Not found\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else if (hashedParams.response.statusCode === 429) {\n\n            retObj.status = \"ERROR\";\n            retObj.errorCode = \"Rate Limit Enforced\";\n            retObj.error = {\n                message: hashedParams.body.errors[0].message\n            };\n            callback(retObj);\n            return;\n\n        } else {\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\n\n        }\n    }\n    callback(retObj);\n    return\n}",
        "webhookObjectQuery": true,
        "webhookObjectRequest": "function webhookObjectRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/stories\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var story = hashedParams.parsedData;\n\n  var options = {\n      method: 'GET',\n\n      baseUrl: baseUrl,\n\n      url: path + \"/\" + story.resource.gid,\n\n     headers: {\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      json: true\n\n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: [options]};\n\n  callback(retObj);\n  return\n\n}",
        "webhookRegisterParse": "function webhookRegisterParse(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\n    retObj.status = \"ERROR\";\n    retObj.error = {message: \"response or body to parse is missing while requesting in dynamicValueSourceParse\"};\n    callback(retObj);\n    return;\n  }\n\n  if (( hashedParams.response.statusCode || {} ) == 200 || ( hashedParams.response.statusCode || {} ) == 201) {\n      var parsed = hashedParams.body;\n      retObj.status = \"SUCCESS\";\n      retObj.data = {\n          webHook:{\n            status: 'registered',\n            data: parsed.data\n          }\n        };\n\n      callback(retObj);\n      return;\n\n  } else if (hashedParams.response.statusCode == 401) {\n\n            var code = \"ERROR_AUTH_REFRESH\";\n            retObj.status = \"ERROR\";\n            retObj.errorCode = code;\n            retObj.error = {\n              code,\n              message: \"error occured due to expiration of token\"\n            };\n            callback(retObj);\n            return\n\n  } else if (hashedParams.response.statusCode == 400) {\n\n    var message = hashedParams && hashedParams.body && hashedParams.body.errors.map(err => err.message).join()\n    message = message.includes('Unknown object') ? 'Does the selected project exist?' : message\n    retObj.status = \"ERROR\";\n    retObj.error = { message };\n    retObj.data =  { webHook : {} };\n    retObj.data.webHook.status = 'Failed';\n    retObj.data.webHook.data = { message };\n    callback(retObj);\n\n  } else {\n\n    retObj.status = \"ERROR\";\n    retObj.data=  {};\n    retObj.error = {message: \"error occured with status code:\"+hashedParams.response.statusCode};\n    retObj.data.webHook = {};\n    retObj.data.webHook.status = 'Failed';\n    retObj.data.webHook.data = {message: \"Error while requesting for webhook registration with status code \" + hashedParams.response.statusCode + \" body \" + JSON.stringify(hashedParams.body)};\n    callback(retObj);\n    return\n  }\n}",
        "webhookRegisterRequest": "function webhookRegisterRequest(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n\n  var path = \"/webhooks\";\n\n  var baseUrl = \"https://app.asana.com/api/1.0\";\n\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\n    retObj.status = \"ERROR\";\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\n    callback(retObj);\n    return;\n  }\n\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\n  if(!(fetchedParams[\"access_token\"])) {\n\n    retObj.status = \"ERROR\";\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\n    callback(retObj);\n    return;\n\n  }\n\n  var access_token = fetchedParams[\"access_token\"];\n\n  var resource_id = null;\n\n  var triggerParams = hashedParams.workflow.trigger.params || {};\n\n  if(triggerParams && triggerParams.length){\n    triggerParams.forEach(function(param){\n      if(param.id === \"resource_id\"){\n        resource_id = param.value;\n      }\n    });\n  }\n\n  if(!resource_id){\n    retObj.status = \"ERROR\";\n    retObj.message = \"Resource Id is missing from Workflow\";\n    callback(retObj);\n    return;\n  }\n\n  var options = {\n      method: 'POST',\n\n      baseUrl: baseUrl,\n\n      url: path,\n\n     headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n\n      body: {\n          \"data\": {\n            \"resource\": resource_id,\n            \"target\": process.env['webhookUrl'] + '/webhook/' + hashedParams.workflow._id\n          }\n      },\n\n      json: true\n      \n    };\n\n  retObj.status = \"SUCCESS\";\n  retObj.data = {options: options};\n  \n  callback(retObj);\n  return\n\n}",
        "webhookTriggerParse": "function webhookTriggerParse(hashedParams, hashedUtils, callback){\n\n    var retObj = {};\n\n    var _ = hashedUtils._;\n\n     if(hashedParams.request.headers[\"x-hook-secret\"] && _.isEmpty(hashedParams.request.body)){\n\n        retObj.status = \"SKIP\";\n        retObj.message = \"Handshake\";\n        retObj.response = {};\n        retObj.response.headers = {\n            \"x-hook-secret\": hashedParams.request.headers[\"x-hook-secret\"]\n        };\n\n        callback(retObj);\n        return;\n\n    } else if (hashedParams['body'].events.length) {\n      var events = hashedParams.body.events\n\n      var removedStories = events\n        .filter(event => event.resource.resource_type === 'story' && event.action === 'removed')\n\n      var addedStories = events\n        .filter(event => event.resource.resource_type === 'story' && event.action === 'added')\n        .filter(aEvent => !removedStories.find(rEvent => rEvent.resource.gid === aEvent.resource.gid))\n\n      if (addedStories.length) {\n        retObj.data = {objects: addedStories}\n        retObj.status = 'SUCCESS'\n        callback(retObj)\n      } else {\n        retObj.status = 'SKIP'\n        retObj.message = 'Unwanted Resource'\n        callback(retObj)\n      }\n  \n    } else if(hashedParams[\"body\"].events.length === 0) {\n\n        retObj.status = \"SKIP\";\n        retObj.message = \"TEST PING\";\n\n        callback(retObj);\n        return;\n\n    } else {\n        retObj.status = \"ERROR\";\n        retObj.error = {\n            message: \"Error Occured\"\n        }\n        callback(retObj);\n        return\n    }\n\n}"
      },
      "webhookType": "workflow"
    }
  ],
  "version": "1.0"
}
