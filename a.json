{
  "_id": {
    "$oid": "56e80997f3e0ce2491d661ab"
  },
  "actions": [
    {
      "_id": {
        "$oid": "5dc017573b71fd0c98d969b0"
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n            return\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = {};\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            data[\"task_id\"] = body.data.gid;\r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = {\r\n                parsedValues: data\r\n            };\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 400){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"BAD REQUEST\";\r\n            var message = \"\";\r\n            hashedParams.body.errors.forEach(function(error){\r\n                message += error.message + \", \"\r\n            });\r\n            message = message.slice(0, message.length - 2);\r\n            retObj.error = {\r\n                message: message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/tasks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if(!(hashedParams[\"params\"][\"task_id\"])){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Required Params are missing\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if(!(hashedUtils || {}) || !(hashedUtils._ || {} ) || !(hashedUtils.moment || {}) ){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Please provide utils with underscore and moment\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var newTask = {};\r\n\r\n  var inputParams = hashedParams.params;\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  var moment = hashedUtils.moment;\r\n  let sectionUpdate = false;\r\n  let stepUrl=\"\"\r\n  _.each(inputParams, function(data, key){\r\n\r\n    if(key.includes('custom_field') && data !== null) {\r\n\r\n        newTask.custom_fields = newTask.custom_fields || {}\r\n        newTask.custom_fields[key.replace('custom_field_','')] = data\r\n\r\n    }\r\n    else if(key === \"due_on\"){\r\n        if(data){\r\n            var due_on = hashedUtils.libDate.parseStandardStringToJSDate(data);\r\n            newTask[key] = moment(due_on).format(\"YYYY-MM-DD\");\r\n        }\r\n    }\r\n    else if (key === \"due_at\"){\r\n        if(data){\r\n            var due_at = hashedUtils.libDate.parseStandardStringToJSDateTime(data);\r\n            newTask[key] = due_at.toISOString();\r\n        }\r\n    }\r\n    else if (key === \"assignee\"){\r\n        if(data){\r\n            newTask[key] = {\r\n                gid: data\r\n            }\r\n        }\r\n    } else if(key !== \"resource_id\" && key !== \"task_id\" ){\r\n        if(data !== null){\r\n            newTask[key] = data;\r\n        }\r\n    }\r\n\r\n  });\r\n\r\n  var task_id = hashedParams.params.task_id;\r\n\r\n  var options = {\r\n      method: 'PUT',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + task_id,\r\n\r\n     headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      body: {\r\n          data: newTask\r\n      },\r\n\r\n      json: true\r\n\r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
      "description": "Update a specified Task",
      "dynamicInputFields": true,
      "dynamicInputFieldsDependsOn": [
        "resource_id"
      ],
      "dynamicInputFieldsParse": "function dynamicInputFieldsParse(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n  var responseObjArray = [];\r\n  // Input Validation\r\n  if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n    retObj['status'] = \"ERROR\";\r\n    retObj['error'] = {};\r\n    retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n    retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n    callback(retObj);\r\n        return;\r\n  } else {\r\n    var response = hashedParams['response'];\r\n    var data = [];\r\n\r\n    if (response['statusCode'] === 200) {\r\n\r\n      var body = hashedParams[\"body\"];\r\n\r\n      if(!(body || {}) || !(body.data || {}) ){\r\n        retObj[\"status\"] = \"ERROR\";\r\n        retObj[\"error\"] = {};\r\n        retObj[\"error\"][\"message\"] = \"Missing data from body\";\r\n        callback(retObj);\r\n        return;\r\n      }\r\n\r\n      if (body.data && body.data.length) {\r\n        body.data.forEach(field => {\r\n          if (field.custom_field.type === 'enum') {\r\n            data.push({\r\n              id: 'custom_field_' + (field.custom_field.id || field.custom_field.gid),\r\n              name: field.custom_field.name,\r\n              inputType: \"select\",\r\n              type: \"String\",\r\n              fixedValueSource: field.custom_field.enum_options.map(option => {\r\n                return {\r\n                  id: option.id || option.gid,\r\n                  name: option.name\r\n                }\r\n              })\r\n            })\r\n          } else {\r\n            data.push({\r\n              id: 'custom_field_' + (field.custom_field.id || field.custom_field.gid),\r\n              name: field.custom_field.name,\r\n              inputType: \"input\",\r\n              type: \"String\"\r\n            })\r\n          }\r\n        })\r\n      }\r\n\r\n      retObj[\"status\"] = \"SUCCESS\";\r\n      retObj[\"data\"] = data;\r\n\r\n      callback(retObj);\r\n      return\r\n\r\n\r\n      // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n\r\n      var code = \"ERROR_AUTH_REFRESH\";\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = code;\r\n      retObj.error = {\r\n        code,\r\n        message: \"error occured due to expiration of token\"\r\n      };\r\n      callback(retObj);\r\n      return\r\n\r\n    } else if (hashedParams.response.statusCode === 402){\r\n\r\n      retObj[\"status\"] = \"SUCCESS\";\r\n      retObj[\"data\"] = [];\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Forbidden\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    }  else if (hashedParams.response.statusCode === 404){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Not found\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else if (hashedParams.response.statusCode === 429){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Rate Limit Enforced\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else {\r\n      retObj['status'] = \"ERROR\";\r\n      retObj['error'] = {};\r\n      retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n      callback(retObj);\r\n      return;\r\n\r\n    }\r\n  }\r\n}",
      "dynamicInputFieldsRequest": "function dynamicInputFieldsRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var project_id = null;\r\n\r\n  var triggerParams = hashedParams.params || {};\r\n\r\n  if(triggerParams && triggerParams.length){\r\n    triggerParams.forEach(function(param){\r\n      if(param.id === \"resource_id\"){\r\n        project_id = param.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  if(!project_id){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Project Id is missing from Workflow\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: \"https://app.asana.com/api/1.0\",\r\n\r\n    url: \"/projects/\" + project_id + \"/custom_field_settings\",\r\n\r\n    headers: {\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true\r\n\r\n  };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n}",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "activity",
      "id": "update-task",
      "important": true,
      "name": "Update Task",
      "params": [
        {
          "dependsOn": "resource_id",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n            return\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(task){\r\n                    data.push({\r\n                        id: task.id || task.gid, \r\n                        name: task.name\r\n                    });\r\n                });\r\n            }\r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    }  else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var project_id = hashedParams.params.resource_id;\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + project_id + \"/tasks\",\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "task_id",
          "inputType": "select",
          "name": "Task",
          "required": true,
          "searchAction": "find-task",
          "searchID": "id",
          "type": "String"
        },
        {
          "description": "If you wish to add only a Due date without time",
          "fixedValueSource": [
            
          ],
          "groupName": "Due",
          "groupType": "OR",
          "id": "due_on",
          "inputType": "input",
          "name": "Due Date",
          "required": false,
          "type": "Date"
        },
        {
          "description": "If you wish to set a due date & time",
          "fixedValueSource": [
            
          ],
          "groupName": "Due",
          "groupType": "OR",
          "id": "due_at",
          "inputType": "input",
          "name": "Due Date & Time",
          "required": false,
          "type": "Date"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n            return\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing users from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No users Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(user){\r\n                    data.push({\r\n                        id: user.id || user.gid,\r\n                        name: user.name\r\n                    });\r\n                });\r\n            }\r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    }  else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/users\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "assignee",
          "inputType": "select",
          "name": "Assignee",
          "required": false,
          "searchAction": "find-user",
          "searchID": "id",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(project){\r\n                    data.push({\r\n                        id: project.id || project.gid,\r\n                        name: project.name\r\n                    });\r\n                });\r\n            }\r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    }  else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "name",
          "inputType": "input",
          "name": "Task Name",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "notes",
          "inputType": "input",
          "name": "Notes",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            {
              "id": "false",
              "name": "No"
            },
            {
              "id": "true",
              "name": "Yes"
            }
          ],
          "id": "completed",
          "inputType": "select",
          "name": "Task Completed",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            {
              "id": "false",
              "name": "No"
            },
            {
              "id": "true",
              "name": "Yes"
            }
          ],
          "id": "hearted",
          "inputType": "select",
          "name": "Liked",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            {
              "id": "inbox",
              "name": "Inbox"
            },
            {
              "id": "later",
              "name": "Later"
            },
            {
              "id": "today",
              "name": "Today"
            },
            {
              "id": "upcoming",
              "name": "Upcoming"
            }
          ],
          "id": "assignee_status",
          "inputType": "select",
          "name": "Status",
          "required": false,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "id": "task_id",
          "name": "Task Id",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": "5dc017573b71fd0c98d969b1"
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    \r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n     \r\n        if (response['statusCode'] === 200) {  \r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = {};\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    }  else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 400){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"BAD REQUEST\";\r\n            var message = \"\";\r\n            hashedParams.body.errors.forEach(function(error){\r\n                message += error.message + \",\"\r\n            });\r\n            retObj.error = {\r\n                message: message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/tasks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if (!hashedParams|| !hashedParams.userapp || !hashedParams.appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var inputParams = hashedParams.params;\r\n  if(!inputParams || !inputParams.task_id || !inputParams.projects || !inputParams.section){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Required input fields task Id or section or project are missing\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var task_id = hashedParams.params.task_id;\r\n\r\n  var options = {\r\n      method: 'POST',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + task_id + \"/addProject\",\r\n\r\n     headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      body: {\r\n          data: {\"project\":inputParams.projects,\r\n                 \"section\":inputParams.section\r\n                }\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
      "description": "Move Task to a section",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "collection.activity",
      "id": "move-task",
      "important": true,
      "name": "Move Task to section",
      "params": [
        {
          "dependsOn": "projects",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var response = params['response'];\r\n\r\n        if (response['statusCode'] == 200) {\r\n\r\n            var parsed = response['body']['data'];\r\n            \r\n            var arr = parsed;\r\n            var responseObjArray = [];\r\n            for (var index in arr) {\r\n                responseObjArray.push({\r\n                    id: arr[index]['id'] || arr[index]['gid'],\r\n                    name: arr[index]['name']\r\n                });\r\n            }\r\n            if (response.body.next_page && response.body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: response.body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj['status'] = \"SUCCESS\";\r\n            retObj['data'] = responseObjArray;\r\n\r\n\r\n        } else if (params.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n      }  else {\r\n\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\r\n\r\n        }\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['appinfo'] || !params['userapp']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n\r\n    } else {\r\n\r\n        var appinfo = params['appinfo'];\r\n        var userapp = params['userapp'];\r\n\r\n        // Generate HTTP Request body\r\n\r\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\r\n\r\n        var options = {\r\n            // Variables to be modified\r\n            method: 'GET',\r\n            url: '/projects/' + params.params.projects + '/sections',\r\n\r\n            // Remain same\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\r\n                'User-Agent': 'Automate (http://automate.io/)'\r\n            },\r\n            baseUrl: 'https://app.asana.com/api/1.0/',\r\n            json: true\r\n        };\r\n        if (params.query && params.query.offset) {\r\n            options.qs.offset = params.query.offset\r\n            \r\n        }\r\n\r\n        // Form object to be returned\r\n        retObj['status'] = \"SUCCESS\";\r\n        retObj['data'] = {\r\n            options: options\r\n        };\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "section",
          "inputType": "select",
          "name": "Section / Column",
          "required": true,
          "searchAction": "find-section",
          "searchID": "id",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n   \r\n    var retObj = {};\r\n   \r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if (!(body || {}) || !(body.data || {})) {\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n            if (!(body.data.length)) {\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n\r\n            if (body.data && body.data.length) {\r\n                body.data.forEach(function (project) {\r\n                    data.push({\r\n                        id: project.id || project.gid,\r\n                        name: project.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n\r\n\r\n            // add more error code specific code blocks\r\n        } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n                code,\r\n                message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else if (hashedParams.response.statusCode === 403) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if (!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    url: path,\r\n\r\n    headers: {\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true\r\n\r\n  };\r\n  if (hashedParams.query && hashedParams.query.offset) {\r\n    options.qs.offset = hashedParams.query.offset\r\n\r\n  }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = { options: options };\r\nreturn  callback(retObj);\r\n\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "projects",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "task_id",
          "inputType": "input",
          "name": "Task Id",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        
      ]
    },
    {
      "_id": {
        "$oid": "5dc017573b71fd0c98d969b2"
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    \r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n            return\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var parsed = {};\r\n        var _ = hashedUtils._;\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var user = hashedParams[\"body\"][\"data\"];\r\n\r\n            parsed[\"found\"] = \"Yes\"\r\n\r\n            _.each(user, function(data, key){\r\n\r\n                if(key === \"workspaces\"){\r\n                    if(data && data.length){\r\n                        var workspaces = \"\";\r\n                        data.forEach(function(workspace){\r\n                            workspaces += workspace.name + \", \";\r\n                        });\r\n                        parsed[key] = workspaces.slice(0, workspaces.length - 2);\r\n                    }\r\n                }\r\n                else if(key !== \"photo\"){\r\n                    if(data){\r\n                        if(key == 'gid')\r\n                          parsed['id'] = data\r\n                        else    \r\n                          parsed[key] = data;\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = {\r\n                parsedValues: parsed\r\n            };\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 400){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"BAD REQUEST\";\r\n            var message = \"\";\r\n            hashedParams.body.errors.forEach(function(error){\r\n                message += error.message + \", \"\r\n            });\r\n            message = message.slice(0, (message.length - 2));\r\n            retObj.error = {\r\n                message: message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"SUCCESS\";\r\n            parsed[\"found\"] = \"No\";\r\n            retObj[\"data\"] = {\r\n                parsedValues: parsed\r\n            }\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/users\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if(!(hashedParams[\"params\"] || {})){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Required Params are missing\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if(!hashedParams[\"params\"][\"email\"] && !hashedParams[\"params\"][\"id\"]) {\r\n    retObj.status = \"ERROR\"\r\n    retObj.message = \"Required Input 'Id' or 'Email Address' missing\"\r\n    callback(retObj)\r\n    return\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var email = hashedParams[\"params\"][\"email\"] || hashedParams[\"params\"][\"id\"];\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + email,\r\n\r\n     headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n\r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
      "description": "Search a User by their email address",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "person",
      "id": "find-user",
      "important": true,
      "name": "Find Users",
      "params": [
        {
          "fixedValueSource": [
            
          ],
          "groupName": "User",
          "groupType": "OR_REQUIRED",
          "id": "email",
          "inputType": "input",
          "name": "Email Address",
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "groupName": "User",
          "groupType": "OR_REQUIRED",
          "id": "id",
          "inputType": "input",
          "name": "Id",
          "type": "String"
        }
      ],
      "priority": 4,
      "responseFields": [
        {
          "description": "Yes, if a matching file is found otherwise No",
          "id": "found",
          "name": "Match Found",
          "type": "String"
        },
        {
          "id": "email",
          "name": "User Email",
          "type": "String"
        },
        {
          "id": "id",
          "name": "User Id",
          "type": "String"
        },
        {
          "id": "name",
          "name": "User Name",
          "type": "String"
        },
        {
          "id": "workspaces",
          "name": "User Workspaces",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": "5dc017573b71fd0c98d969b3"
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\r\n\r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var parsed = {};\r\n        var _ = hashedUtils._;\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var data = hashedParams[\"body\"][\"data\"];\r\n\r\n            if(hashedParams[\"step\"][\"value\"] === \"step\") {\r\n                parsed = parseTask(data);\r\n\r\n                retObj[\"status\"] = \"SUCCESS\";\r\n                retObj[\"data\"] = {\r\n                    parsedValues: parsed\r\n                };\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n            var project_id = hashedParams[\"step\"].value;\r\n            var name = hashedParams[\"step\"].name.toLowerCase().trim();\r\n            var found = [];\r\n\r\n            if(data && data.length){\r\n\r\n                data = data.filter(task => task.name.toLowerCase().trim() === name)\r\n                data.forEach(function(task){\r\n\r\n                    if(task.projects && task.projects.length){\r\n\r\n                        task.projects.forEach(function(project){\r\n                            if((project.gid || project.id) == project_id){\r\n                                found.push(task);\r\n                            }\r\n                        });\r\n\r\n                    }\r\n\r\n                });\r\n\r\n                if(found && found.length){\r\n\r\n                    parsed = parseTask(found[0]);\r\n\r\n                    retObj[\"status\"] = \"SUCCESS\";\r\n                    retObj[\"data\"] = {\r\n                        parsedValues: parsed\r\n                    };\r\n\r\n                    callback(retObj);\r\n\r\n                }//end of inner if\r\n\r\n                else {\r\n                    retObj.status = \"SUCCESS\";\r\n                    parsed[\"found\"] = \"No\";\r\n                    retObj[\"data\"] = {\r\n                        parsedValues: parsed\r\n                    }\r\n                    callback(retObj);\r\n                    return\r\n                }\r\n\r\n            } //end out outer if checking data and data.length\r\n            else {\r\n\r\n                retObj.status = \"SUCCESS\";\r\n                parsed[\"found\"] = \"No\";\r\n                retObj[\"data\"] = {\r\n                    parsedValues: parsed\r\n                }\r\n                callback(retObj);\r\n                return\r\n\r\n            }//end of outer else\r\n\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n  } else if (hashedParams.response.statusCode === 400){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"BAD REQUEST\";\r\n            var message = \"\";\r\n            hashedParams.body.errors.forEach(function(error){\r\n                message += error.message + \", \"\r\n            });\r\n            message = message.slice(0, (message.length - 2));\r\n            retObj.error = {\r\n                message: message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            parsed[\"found\"] = \"No\"\r\n\r\n            retObj.status = \"SUCCESS\";\r\n\r\n            retObj[\"data\"] = {\r\n                parsedValues: parsed\r\n            }\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n\r\n    function parseTask(task) {\r\n        var dates = {\r\n            \"created_at\": true,\r\n            \"modified_at\": true,\r\n            \"due_at\": true,\r\n            \"due_on\": true,\r\n            \"completed_at\":true\r\n        };\r\n\r\n        var keys = {\r\n            \"id\": true,\r\n            \"name\": true,\r\n            \"completed\": true,\r\n            \"parent\": true,\r\n            \"assignee_status\": true,\r\n            \"notes\": true,\r\n            \"gid\" : true\r\n        };\r\n\r\n        var parsed = {};\r\n\r\n        parsed[\"found\"] = \"Yes\"\r\n\r\n        _.each(task, function(data, key){\r\n            if(dates[key]){\r\n                if(data){\r\n                    parsed[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\r\n                }\r\n            } else if(key === \"workspace\"){\r\n                if(data){\r\n                    _.each(data, function(wData, wKey){\r\n                        if(wKey === \"gid\" || wKey === \"id\" || wKey === \"name\"){\r\n                            if(wKey == \"gid\")\r\n                                parsed[\"workspace_id\"] = wData;\r\n                            else\r\n                                parsed[\"workspace_\" + wKey] = wData;\r\n                            }\r\n                    });\r\n                }\r\n            } else if(key === \"tags\"){\r\n\r\n                if(data && data.length){\r\n                    var tags = \"\";\r\n                    data.forEach(function(tag) {\r\n                        tags += tag.name + \", \"\r\n                    });\r\n                    parsed[key] = tags.slice(0, tags.length - 2);\r\n                }\r\n\r\n            } else if(key === \"parent\"){\r\n                if(data && typeof data === 'object' && data.constructor === Object){\r\n                    _.each(data, function(wData, wKey){\r\n                        if(wKey == \"gid\")\r\n                            parsed[\"parent_id\"] = wData;\r\n                        else\r\n                            parsed[\"parent_\" + wKey] = wData;\r\n                    });\r\n                }\r\n                parsed[\"parent\"] = data\r\n            } else if(key === \"assignee\"){\r\n\r\n                if(data){\r\n                    parsed[key] = data.name;\r\n                    parsed[key + \"_id\"] = data.gid || data.id;\r\n                }\r\n\r\n            } else if(key === \"custom_fields\" && data instanceof Array){\r\n\r\n                        if(data && data.length){\r\n\r\n                          data.forEach(field => {\r\n\r\n                            if (field.type === 'enum') {\r\n                              parsed[field.gid || field.id] = field.enum_value ? field.enum_value.name : null\r\n                            } else {\r\n                              parsed[field.gid || field.id] = field[field.type + '_value']\r\n                            }\r\n\r\n                          })\r\n\r\n                        }\r\n\r\n            } else if(keys[key]){\r\n                if(data !== null && data !== undefined){\r\n                    if(key == 'gid')\r\n                        parsed['id'] = data\r\n                    else    \r\n                        parsed[key] = data;\r\n                }\r\n            }\r\n        });\r\n\r\n        return parsed;\r\n    }\r\n\r\n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/workspaces\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if(!(hashedParams[\"params\"] && hashedParams[\"params\"][\"workspace_id\"] && hashedParams[\"params\"][\"project_id\"])){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Required Params are missing\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if(!hashedParams[\"params\"][\"name\"] && !hashedParams[\"params\"][\"task_id\"]) {\r\n    retObj.status = \"ERROR\"\r\n    retObj.message = \"Required Input 'Task Name' or 'Task Id' missing\"\r\n    callback(retObj)\r\n    return\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var workspace = hashedParams[\"params\"][\"workspace_id\"];\r\n\r\n  var encodedName = encodeURIComponent(hashedParams[\"params\"][\"name\"]) || null;\r\n\r\n  if (hashedParams[\"params\"][\"name\"]) {\r\n\r\n    var url = path + \"/\" + workspace + `/typeahead?type=task&query=${encodedName}&opt_expand=gid,id,name,created_at,modified_at,due_on,due_at,completed,completed_at,tags,parent,assignee,assignee_status,notes,projects,workspace`;\r\n\r\n    retObj.step = {value: hashedParams[\"params\"][\"project_id\"], name: hashedParams[\"params\"][\"name\"]};\r\n\r\n  } else {\r\n    var task_id = hashedParams[\"params\"][\"task_id\"]\r\n    var url = `/tasks/${task_id}`\r\n     retObj.step = {value: \"step\"};\r\n  }\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url,\r\n\r\n     headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n     },\r\n\r\n      json: true\r\n\r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n\r\n  retObj.data = {options: options};\r\n\r\n  callback(retObj);\r\n  return\r\n\r\n}",
      "description": "Search a Task by its name",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFields": true,
      "dynamicResponseFieldsDependsOn": [
        "workspace_id"
      ],
      "dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(hashedParams, hashedUtils, callback) {\r\n\r\n  var retObj = {};\r\n  var responseObjArray = [];\r\n  // Input Validation\r\n  if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n    retObj['status'] = \"ERROR\";\r\n    retObj['error'] = {};\r\n    retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n    retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n    callback(retObj);\r\n        return;\r\n  } else {\r\n    var response = hashedParams['response'];\r\n    var data = [];\r\n\r\n    if (response['statusCode'] === 200) {\r\n\r\n      var body = hashedParams[\"body\"];\r\n\r\n      if(!(body || {}) || !(body.data || {}) ){\r\n        retObj[\"status\"] = \"ERROR\";\r\n        retObj[\"error\"] = {};\r\n        retObj[\"error\"][\"message\"] = \"Missing data from body\";\r\n        callback(retObj);\r\n        return;\r\n      }\r\n\r\n      if(body.data && body.data.length){\r\n        body.data.forEach(function(field){\r\n          data.push({\r\n            id: field.gid || field.id,\r\n            name: field.name\r\n          });\r\n        });\r\n      }\r\n\r\n      retObj[\"status\"] = \"SUCCESS\";\r\n      retObj[\"data\"] = data;\r\n\r\n      callback(retObj);\r\n      return\r\n\r\n\r\n      // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n\r\n      var code = \"ERROR_AUTH_REFRESH\";\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = code;\r\n      retObj.error = {\r\n        code,\r\n        message: \"error occured due to expiration of token\"\r\n      };\r\n      callback(retObj);\r\n      return\r\n\r\n    } else if (hashedParams.response.statusCode === 402){\r\n\r\n      retObj[\"status\"] = \"SUCCESS\";\r\n      retObj[\"data\"] = [];\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Forbidden\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    }  else if (hashedParams.response.statusCode === 404){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Not found\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else if (hashedParams.response.statusCode === 429){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Rate Limit Enforced\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else {\r\n      retObj['status'] = \"ERROR\";\r\n      retObj['error'] = {};\r\n      retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n      callback(retObj);\r\n      return;\r\n\r\n    }\r\n  }\r\n\r\n}",
      "dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var workspace_id = null;\r\n\r\n  var triggerParams = hashedParams.params || {};\r\n\r\n  if(triggerParams && triggerParams.length){\r\n    triggerParams.forEach(function(param){\r\n      if(param.id === \"workspace_id\"){\r\n        workspace_id = param.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  if(!workspace_id){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Project Id is missing from Workflow\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: \"https://app.asana.com/api/1.0\",\r\n\r\n    url: \"/workspaces/\" + workspace_id + \"/custom_fields\",\r\n\r\n    headers: {\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true\r\n\r\n  };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
      "entity": "activity",
      "id": "find-task",
      "important": true,
      "name": "Find Tasks",
      "params": [
        {
          "dependsOn": "workspace_id",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var response = params['response'];\r\n\r\n        if (response['statusCode'] == 200) {\r\n\r\n            var parsed = response['body']['data'];\r\n            \r\n            var arr = parsed;\r\n            var responseObjArray = [];\r\n            for (var index in arr) {\r\n                responseObjArray.push({\r\n                    id: arr[index]['id'] || arr[index]['gid'],\r\n                    name: arr[index]['name']\r\n                });\r\n            }\r\n            retObj['status'] = \"SUCCESS\";\r\n            retObj['data'] = responseObjArray;\r\n\r\n\r\n        } else if (params.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n      }  else {\r\n\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\r\n\r\n        }\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['appinfo'] || !params['userapp']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var appinfo = params['appinfo'];\r\n        var userapp = params['userapp'];\r\n\r\n        // Generate HTTP Request body\r\n\r\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\r\n\r\n        var options = {\r\n            // Variables to be modified\r\n            method: 'GET',\r\n            url: '/projects',\r\n\r\n            // Remain same\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\r\n                'User-Agent': 'Automate (http://automate.io/)' \r\n            },\r\n            baseUrl: 'https://app.asana.com/api/1.0/workspaces/'+params['params']['workspace_id'],\r\n            json: true,\r\n            qs: {\r\n              'limit': 50\r\n            }\r\n        };\r\n        if (params.query && params.query.offset) {\r\n            options.qs.offset = params.query.offset\r\n        \r\n          }\r\n        // Form object to be returned\r\n        retObj['status'] = \"SUCCESS\";\r\n        retObj['data'] = {\r\n            options: options\r\n        };\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "project_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        },
        {
          "description": "Exact name match",
          "fixedValueSource": [
            
          ],
          "groupName": "Task",
          "groupType": "OR_REQUIRED",
          "id": "name",
          "inputType": "input",
          "name": "Task Name",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing Workspaces from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No Workspaces Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(workspace){\r\n                    data.push({\r\n                        id: workspace.gid || workspace.id,\r\n                        name: workspace.name\r\n                    });\r\n                });\r\n            }\r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    }  else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/workspaces\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "workspace_id",
          "inputType": "select",
          "name": "Workspace",
          "required": true,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "groupName": "Task",
          "groupType": "OR_REQUIRED",
          "id": "task_id",
          "inputType": "input",
          "name": "Task Id",
          "type": "String"
        }
      ],
      "priority": 2,
      "responseFields": [
        {
          "description": "Yes, if a matching file is found otherwise No",
          "id": "found",
          "name": "Match Found",
          "type": "String"
        },
        {
          "id": "assignee",
          "name": "Task Assignee Name",
          "type": "String"
        },
        {
          "id": "assignee_id",
          "name": "Task Assignee Id",
          "type": "String"
        },
        {
          "id": "assignee_status",
          "name": "Status",
          "type": "String"
        },
        {
          "id": "completed",
          "name": "Task Completed",
          "type": "String"
        },
        {
          "id": "completed_at",
          "name": "Task Completed At",
          "type": "String"
        },
        {
          "id": "created_at",
          "name": "Task Created At",
          "type": "String"
        },
        {
          "id": "due_at",
          "name": "Task Due At",
          "type": "String"
        },
        {
          "id": "due_on",
          "name": "Task Due On",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Task Id",
          "type": "String"
        },
        {
          "id": "modified_at",
          "name": "Task Modified At",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Task Name",
          "type": "String"
        },
        {
          "id": "notes",
          "name": "Task Notes",
          "type": "String"
        },
        {
          "id": "parent",
          "name": "Task's Parent",
          "type": "String"
        },
        {
          "id": "parent_gid",
          "name": "Task's Parent GID",
          "type": "String"
        },
        {
          "id": "parent_id",
          "name": "Task's Parent Id",
          "type": "String"
        },
        {
          "id": "parent_name",
          "name": "Task's Parent Name",
          "type": "String"
        },
        {
          "id": "tags",
          "name": "Task Tags",
          "type": "String"
        },
        {
          "id": "workspace_id",
          "name": "Task Workspace Id",
          "type": "String"
        },
        {
          "id": "workspace_name",
          "name": "Task Workspace Name",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": "5dc017573b71fd0c98d969b4"
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n  var responseObjArray = [];\r\n\r\n  // Input Validation\r\n  if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n    retObj['status'] = \"ERROR\";\r\n    retObj['error'] = {};\r\n    retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n    retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n    callback(retObj);\r\n        return;\r\n  } else {\r\n\r\n    var response = hashedParams['response'];\r\n    var parsed = {};\r\n    var _ = hashedUtils._;\r\n\r\n    if (response['statusCode'] === 200) {\r\n\r\n      var data = hashedParams[\"body\"][\"data\"];\r\n      var section_name = hashedParams[\"step\"][\"section_name\"].toLowerCase().trim();\r\n\r\n      if(data && data.length) {\r\n        var parsedSection = data.find(section => section.name.toLowerCase().trim() === section_name || section.name.toLowerCase().trim() === `${section_name}:`)\r\n        \r\n        if (parsedSection) {   \r\n          if(parsedSection.gid){\r\n            parsedSection['id'] = parsedSection.gid\r\n          }\r\n          parsed = parsedSection\r\n          parsed.found = 'Yes'\r\n          parsed.created_at = parsed.created_at ? hashedUtils.libDate.parseJSDateTimeToStandardString(parsed.created_at) : null\r\n          retObj[\"status\"] = \"SUCCESS\";\r\n          retObj[\"data\"] = {\r\n            parsedValues: parsed\r\n          };\r\n\r\n          callback(retObj);\r\n        } else {\r\n          retObj.status = \"SUCCESS\";\r\n          parsed[\"found\"] = \"No\";\r\n          retObj[\"data\"] = {\r\n            parsedValues: parsed\r\n          }\r\n          callback(retObj);\r\n          return\r\n        }\r\n\r\n      } else {\r\n\r\n        retObj.status = \"SUCCESS\";\r\n        parsed[\"found\"] = \"No\";\r\n        retObj[\"data\"] = {\r\n          parsedValues: parsed\r\n        }\r\n        callback(retObj);\r\n        return\r\n\r\n      }\r\n\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n\r\n      var code = \"ERROR_AUTH_REFRESH\";\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = code;\r\n      retObj.error = {\r\n        code,\r\n        message: \"error occured due to expiration of token\"\r\n      };\r\n      callback(retObj);\r\n      return\r\n\r\n    } else if (hashedParams.response.statusCode === 400){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"BAD REQUEST\";\r\n      var message = \"\";\r\n      hashedParams.body.errors.forEach(function(error){\r\n        message += error.message + \", \"\r\n      });\r\n      message = message.slice(0, (message.length - 2));\r\n      retObj.error = {\r\n        message: message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Forbidden\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    }  else if (hashedParams.response.statusCode === 404){\r\n\r\n      parsed[\"found\"] = \"No\"\r\n\r\n      retObj.status = \"SUCCESS\";\r\n\r\n      retObj[\"data\"] = {\r\n        parsedValues: parsed\r\n      }\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else if (hashedParams.response.statusCode === 429){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Rate Limit Enforced\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else {\r\n      retObj['status'] = \"ERROR\";\r\n      retObj['error'] = {};\r\n      retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n      callback(retObj);\r\n      return;\r\n\r\n    }\r\n  }\r\n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {}\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\"\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\"\r\n    callback(retObj)\r\n    return\r\n  }\r\n\r\n  if(!(hashedParams[\"params\"] || {}) || !(hashedParams[\"params\"][\"project_id\"] || {})){\r\n    retObj.status = \"ERROR\"\r\n    retObj.message = \"Required Input Params are missing\"\r\n    callback(retObj)\r\n    return\r\n  }\r\n\r\n  if(!hashedParams[\"params\"][\"section_name\"]) {\r\n    retObj.status = \"ERROR\"\r\n    retObj.message = \"Required Input 'Section / Column Name' missing\"\r\n    callback(retObj)\r\n    return\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo)\r\n\r\n  if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\"\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\"\r\n    callback(retObj)\r\n    return\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"]\r\n  var project = hashedParams[\"params\"][\"project_id\"]\r\n  var section_name = hashedParams[\"params\"][\"section_name\"]\r\n\r\n  var options = {\r\n      method: 'GET',\r\n      baseUrl: 'https://app.asana.com/api/1.0',\r\n      url: `/projects/${project}/sections`,\r\n      qs: {\r\n        'opt_fields': 'gid,id,name,created_at'\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n      json: true\r\n    }\r\n\r\n  retObj.status = \"SUCCESS\"\r\n  retObj.data = { options }\r\n  retObj.step = { section_name }\r\n  callback(retObj)\r\n  return\r\n\r\n}",
      "beta": false,
      "description": "Search a Section / Column by name",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "collection.activity",
      "id": "find-section",
      "important": true,
      "name": "Find Sections / Columns",
      "params": [
        {
          "description": "Exact name match",
          "fixedValueSource": [
            
          ],
          "id": "section_name",
          "inputType": "input",
          "name": "Section / Column Name",
          "required": true,
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(project){\r\n                    data.push({\r\n                        id: project.gid || project.id,\r\n                        name: project.name\r\n                    });\r\n                });\r\n            }\r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    }  else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n      method: 'GET',\r\n      baseUrl: 'https://app.asana.com/api/1.0',\r\n      url: '/projects',\r\n      headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n      json: true\r\n  };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = { options };\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "project_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 4,
      "responseFields": [
        {
          "description": "Yes if a matching Section is found, otherwise No",
          "id": "found",
          "name": "Match Found?",
          "type": "String"
        },
        {
          "id": "created_at",
          "name": "Section Created At",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Section / Column Id",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Section / Column Name",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": "5dc017573b71fd0c98d969b5"
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\r\n\r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var parsed = {};\r\n        var _ = hashedUtils._;\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n                var projects = hashedParams[\"body\"][\"data\"];\r\n                var name = hashedParams.step.name.toLowerCase().trim()\r\n                var foundProject = projects.find(proj => proj.name.toLowerCase().trim() === name)\r\n                if(foundProject){\r\n\r\n                    var dates = {\r\n                        \"created_at\": true,\r\n                        \"modified_at\": true\r\n                    };\r\n\r\n                    var keys = {\r\n                        \"id\": true,\r\n                        \"name\": true,\r\n                        \"archived\": true,\r\n                        \"notes\": true,\r\n                        \"gid\": true\r\n                    };\r\n\r\n                    parsed[\"found\"] = \"Yes\"\r\n\r\n                _.each(foundProject, function(data, key){\r\n\r\n                    if(dates[key]){\r\n                        if(data){\r\n                            parsed[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\r\n                        }\r\n                    } else if(keys[key]){\r\n                        if(data !== null && data !== undefined){\r\n                            if(key == 'gid')\r\n                                parsed['id'] = data\r\n                            else    \r\n                                parsed[key] = data;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                retObj[\"status\"] = \"SUCCESS\";\r\n                retObj[\"data\"] = {\r\n                    parsedValues: parsed\r\n                };\r\n\r\n                callback(retObj);\r\n                return\r\n\r\n            } //end out outer if checking data and data.length\r\n            else {\r\n\r\n                retObj.status = \"SUCCESS\";\r\n                parsed[\"found\"] = \"No\";\r\n                retObj[\"data\"] = {\r\n                    parsedValues: parsed\r\n                }\r\n                callback(retObj);\r\n                return\r\n\r\n            }//end of outer else\r\n\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n  } else if (hashedParams.response.statusCode === 400){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"BAD REQUEST\";\r\n            var message = \"\";\r\n            hashedParams.body.errors.forEach(function(error){\r\n                message += error.message + \", \"\r\n            });\r\n            message = message.slice(0, (message.length - 2));\r\n            retObj.error = {\r\n                message: message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n\r\n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/workspaces\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if(!(hashedParams[\"params\"][\"workspace_id\"]) || !(hashedParams[\"params\"][\"name\"])){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Required Params are missing,check Workspace and Project Name fields\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var workspace = hashedParams[\"params\"][\"workspace_id\"];\r\n\r\n  var encodedName = encodeURIComponent(hashedParams[\"params\"][\"name\"]);\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + workspace + `/typeahead?type=project&query=${encodedName}&opt_expand=gid,id,name,created_at,modified_at,notes`,\r\n\r\n     headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n     },\r\n\r\n      json: true\r\n\r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  retObj.step = {name : hashedParams[\"params\"][\"name\"]}\r\n\r\n  callback(retObj);\r\n  return\r\n\r\n}",
      "description": "Search a Project by its name",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "collection.activity",
      "id": "find-project",
      "important": true,
      "name": "Find Projects",
      "params": [
        {
          "description": "Exact name match",
          "fixedValueSource": [
            
          ],
          "id": "name",
          "inputType": "input",
          "name": "Project Name",
          "required": true,
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n       return\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing Workspaces from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No Workspaces Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(workspace){\r\n                    data.push({\r\n                        id: workspace.gid || workspace.id,\r\n                        name: workspace.name\r\n                    });\r\n                });\r\n            }\r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    }  else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/workspaces\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "workspace_id",
          "inputType": "select",
          "name": "Workspace",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "description": "Yes, if a matching file is found otherwise No",
          "id": "found",
          "name": "Match Found",
          "type": "String"
        },
        {
          "id": "created_at",
          "name": "Project Created At",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Project Id",
          "type": "String"
        },
        {
          "id": "modified_at",
          "name": "Project Modified At",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Project Name",
          "type": "String"
        },
        {
          "id": "notes",
          "name": "Project Notes",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": "5dc017573b71fd0c98d969b6"
      },
      "actionParse": "function actionParse(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    // Input Validation\r\n    if (!params || !params['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var response = params['response'];\r\n\r\n        if (response['statusCode'] == 201) {\r\n\r\n            var id = (response['body'] || {}).data.gid;\r\n            retObj['status'] = \"SUCCESS\";\r\n            retObj['data'] = {\r\n                parsedValues: {\r\n                    id: id\r\n                }\r\n            };\r\n\r\n        } else if (params.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n       } else {\r\n\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\r\n\r\n        }\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n}",
      "actionRequest": "function actionRequest(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else if (!params['params']['workspace']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Required input 'Workspace / Organization' missing.\";\r\n\r\n    } else {\r\n\r\n        var appinfo = params['appinfo'];\r\n        var userapp = params['userapp'];\r\n\r\n        var moment = utils.moment;\r\n        var newTask = {};\r\n        var _ = utils._;\r\n\r\n        if (params['params']['due_at']) {\r\n            params['params']['due_at'] = utils.libDate.parseStandardStringToJSDateTime(params['params']['due_at']);\r\n        }\r\n\r\n        if (params['params'][\"due_on\"]) {\r\n            params['params']['due_on'] = utils.libDate.parseStandardStringToJSDateTime(params['params']['due_on']);\r\n        }\r\n\r\n        _.each(params['params'], function (data, key) {\r\n\r\n            if (key.includes('custom_field') && data !== null) {\r\n\r\n                newTask.custom_fields = newTask.custom_fields || {}\r\n                newTask.custom_fields[key.replace('custom_field_', '')] = data\r\n\r\n            } else if (key === 'projects' && data !== null) {\r\n                newTask.memberships = newTask.memberships || [{}]\r\n                newTask.memberships[0]['project'] = data\r\n\r\n            } else if (key === 'section' && data !== null) {\r\n\r\n                newTask.memberships = newTask.memberships || [{}]\r\n                newTask.memberships[0]['section'] = data\r\n\r\n            } else if ((key === 'followers') && data !== null) {\r\n                let followerArr = data.map(obj => obj.value)\r\n                newTask[key] = followerArr;\r\n            }else if (data !== null) {\r\n\r\n                newTask[key] = data;\r\n            }\r\n\r\n        });\r\n\r\n        var body = {\r\n            data: newTask\r\n        };\r\n\r\n        // Generate HTTP Request body\r\n\r\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\r\n\r\n        var options = {\r\n            // Variables to be modified\r\n            method: 'POST',\r\n            url: '/tasks',\r\n\r\n            // Remain same\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\r\n            },\r\n            baseUrl: 'https://app.asana.com/api/1.0/',\r\n            json: true,\r\n            body: body\r\n        };\r\n\r\n        // Form object to be returned\r\n        retObj['status'] = \"SUCCESS\";\r\n        retObj['data'] = {\r\n            options: options\r\n        };\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n\r\n}",
      "description": "Add a new Task",
      "dynamicInputFields": true,
      "dynamicInputFieldsDependsOn": [
        "projects"
      ],
      "dynamicInputFieldsParse": "function dynamicInputFieldsParse(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n  var responseObjArray = [];\r\n  // Input Validation\r\n  if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n    retObj['status'] = \"ERROR\";\r\n    retObj['error'] = {};\r\n    retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n    retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n    callback(retObj);\r\n        return;\r\n  } else {\r\n    var response = hashedParams['response'];\r\n    var data = [];\r\n\r\n    if (response['statusCode'] === 200) {\r\n\r\n      var body = hashedParams[\"body\"];\r\n\r\n      if(!(body || {}) || !(body.data || {}) ){\r\n        retObj[\"status\"] = \"ERROR\";\r\n        retObj[\"error\"] = {};\r\n        retObj[\"error\"][\"message\"] = \"Missing data from body\";\r\n        callback(retObj);\r\n        return;\r\n      }\r\n\r\n      if (body.data && body.data.length) {\r\n        body.data.forEach(field => {\r\n          if (field.custom_field.type === 'enum') {\r\n            data.push({\r\n              id: 'custom_field_' + (field.custom_field.id || field.custom_field.gid),\r\n              name: field.custom_field.name,\r\n              inputType: \"select\",\r\n              type: \"String\",\r\n              fixedValueSource: field.custom_field.enum_options.map(option => {\r\n                return {\r\n                  id: option.id || option.gid,\r\n                  name: option.name\r\n                }\r\n              })\r\n            })\r\n          } else {\r\n            data.push({\r\n              id: 'custom_field_' + (field.custom_field.id || field.custom_field.gid),\r\n              name: field.custom_field.name,\r\n              inputType: \"input\",\r\n              type: \"String\"\r\n            })\r\n          }\r\n        })\r\n      }\r\n\r\n      retObj[\"status\"] = \"SUCCESS\";\r\n      retObj[\"data\"] = data;\r\n\r\n      callback(retObj);\r\n      return\r\n\r\n\r\n      // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n\r\n      var code = \"ERROR_AUTH_REFRESH\";\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = code;\r\n      retObj.error = {\r\n        code,\r\n        message: \"error occured due to expiration of token\"\r\n      };\r\n      callback(retObj);\r\n      return\r\n\r\n    } else if (hashedParams.response.statusCode === 402){\r\n\r\n      retObj[\"status\"] = \"SUCCESS\";\r\n      retObj[\"data\"] = [];\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Forbidden\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    }  else if (hashedParams.response.statusCode === 404){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Not found\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else if (hashedParams.response.statusCode === 429){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Rate Limit Enforced\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else {\r\n      retObj['status'] = \"ERROR\";\r\n      retObj['error'] = {};\r\n      retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n      callback(retObj);\r\n      return;\r\n\r\n    }\r\n  }\r\n}",
      "dynamicInputFieldsRequest": "function dynamicInputFieldsRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var project_id = null;\r\n\r\n  var triggerParams = hashedParams.params || {};\r\n\r\n  if(triggerParams && triggerParams.length){\r\n    triggerParams.forEach(function(param){\r\n      if(param.id === \"projects\"){\r\n        project_id = param.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  if(!project_id){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Project Id is missing from Workflow\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: \"https://app.asana.com/api/1.0\",\r\n\r\n    url: \"/projects/\" + project_id + \"/custom_field_settings\",\r\n\r\n    headers: {\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true\r\n\r\n  };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n}",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "activity",
      "id": "add-task",
      "important": true,
      "name": "Add a Task",
      "params": [
        {
          "defaultValue": "",
          "fixedValueSource": [
            
          ],
          "id": "name",
          "inputType": "input",
          "name": "Name",
          "required": false,
          "type": "String"
        },
        {
          "defaultValue": "",
          "fixedValueSource": [
            
          ],
          "id": "notes",
          "inputType": "input",
          "name": "Notes",
          "required": false,
          "type": "String"
        },
        {
          "defaultValue": "upcoming",
          "fixedValueSource": [
            {
              "id": "inbox",
              "name": "Inbox"
            },
            {
              "id": "later",
              "name": "Later"
            },
            {
              "id": "today",
              "name": "Today"
            },
            {
              "id": "upcoming",
              "name": "Upcoming"
            }
          ],
          "id": "assignee_status",
          "inputType": "select",
          "name": "Status",
          "required": false,
          "type": "String"
        },
        {
          "dependsOn": "projects",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var response = params['response'];\r\n\r\n        if (response['statusCode'] == 200) {\r\n\r\n            var parsed = response['body']['data'];\r\n            \r\n            var arr = parsed;\r\n            var responseObjArray = [];\r\n            for (var index in arr) {\r\n                responseObjArray.push({\r\n                    id: arr[index]['id'] || arr[index]['gid'],\r\n                    name: arr[index]['name']\r\n                });\r\n            }\r\n            retObj['status'] = \"SUCCESS\";\r\n            retObj['data'] = responseObjArray;\r\n\r\n\r\n        } else if (params.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n      }  else {\r\n\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\r\n\r\n        }\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['appinfo'] || !params['userapp']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n\r\n    } else {\r\n\r\n        var appinfo = params['appinfo'];\r\n        var userapp = params['userapp'];\r\n\r\n        // Generate HTTP Request body\r\n\r\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\r\n\r\n        var options = {\r\n            // Variables to be modified\r\n            method: 'GET',\r\n            url: '/projects/' + params.params.projects + '/sections',\r\n\r\n            // Remain same\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\r\n                'User-Agent': 'Automate (http://automate.io/)'\r\n            },\r\n            baseUrl: 'https://app.asana.com/api/1.0/',\r\n            json: true,\r\n            qs: {\r\n              'limit': 50\r\n            }\r\n        };\r\n        if (params.query && params.query.offset) {\r\n            options.qs.offset = params.query.offset\r\n        \r\n          }\r\n        // Form object to be returned\r\n        retObj['status'] = \"SUCCESS\";\r\n        retObj['data'] = {\r\n            options: options\r\n        };\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "section",
          "inputType": "select",
          "name": "Section / Column",
          "required": false,
          "searchAction": "find-section",
          "searchID": "id",
          "type": "String"
        },
        {
          "dependsOn": "workspace",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var response = params['response'];\r\n\r\n        if (response['statusCode'] == 200) {\r\n\r\n            var parsed = response['body']['data'];\r\n            \r\n            var arr = parsed;\r\n            var responseObjArray = [];\r\n            for (var index in arr) {\r\n                responseObjArray.push({\r\n                    id: arr[index]['id'] || arr[index]['gid'],\r\n                    name: arr[index]['name']\r\n                });\r\n            }\r\n            retObj['status'] = \"SUCCESS\";\r\n            retObj['data'] = responseObjArray;\r\n\r\n\r\n        } else if (params.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n      }  else {\r\n\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\r\n\r\n        }\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['appinfo'] || !params['userapp']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var appinfo = params['appinfo'];\r\n        var userapp = params['userapp'];\r\n\r\n        // Generate HTTP Request body\r\n\r\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\r\n\r\n        var options = {\r\n            // Variables to be modified\r\n            method: 'GET',\r\n            url: '/projects',\r\n\r\n            // Remain same\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\r\n                'User-Agent': 'Automate (http://automate.io/)' \r\n            },\r\n            baseUrl: 'https://app.asana.com/api/1.0/workspaces/'+params['params']['workspace'],\r\n            json: true,\r\n            qs: {\r\n              'limit': 50\r\n            }\r\n        };\r\n        if (params.query && params.query.offset) {\r\n            options.qs.offset = params.query.offset\r\n        \r\n          }\r\n        // Form object to be returned\r\n        retObj['status'] = \"SUCCESS\";\r\n        retObj['data'] = {\r\n            options: options\r\n        };\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "projects",
          "inputType": "select",
          "name": "Project",
          "required": false,
          "searchAction": "find-project",
          "searchID": "id",
          "type": "String"
        },
        {
          "description": " If you wish to add only a Due date without time",
          "fixedValueSource": [
            
          ],
          "groupName": "Due",
          "groupType": "OR",
          "id": "due_on",
          "inputType": "input",
          "name": "Due Date",
          "required": false,
          "type": "Date"
        },
        {
          "description": "If you wish to set a due date & time",
          "fixedValueSource": [
            
          ],
          "groupName": "Due",
          "groupType": "OR",
          "id": "due_at",
          "inputType": "input",
          "name": "Due Date & Time",
          "required": false,
          "type": "Date"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing Workspaces from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No Workspaces Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(workspace){\r\n                    data.push({\r\n                        id: workspace.id || workspace.gid,\r\n                        name: workspace.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    }  else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/workspaces\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if (!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    url: path,\r\n\r\n    headers: {\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true,\r\n    qs: {\r\n      'limit': 50\r\n    }\r\n\r\n  };\r\n  if (hashedParams.query && hashedParams.query.offset) {\r\n    options.qs.offset = hashedParams.query.offset\r\n\r\n  }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = { options: options };\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "workspace",
          "inputType": "select",
          "name": "Workspace / Organization ",
          "required": true,
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var response = params['response'];\r\n\r\n        if (response['statusCode'] == 200) {\r\n\r\n            var parsed = response['body']['data'];\r\n\r\n            var arr = parsed;\r\n            var responseObjArray = [];\r\n            for (var index in arr) {\r\n                responseObjArray.push({\r\n                    id: arr[index]['id'] || arr[index]['gid'],\r\n                    name: arr[index]['name']\r\n                });\r\n            }\r\n            if (response.body.next_page && response.body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: response.body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            retObj['status'] = \"SUCCESS\";\r\n            retObj['data'] = responseObjArray;\r\n\r\n\r\n        } else if (params.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n                code,\r\n                message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else {\r\n\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\r\n\r\n        }\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n    var retObj = {};\r\n  \r\n    var path = \"/tags\";\r\n  \r\n    var baseUrl = \"https://app.asana.com/api/1.0\";\r\n  \r\n    var _ = hashedUtils._;\r\n  \r\n    if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n      retObj.status = \"ERROR\";\r\n      retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n      callback(retObj);\r\n      return;\r\n    }\r\n  \r\n    var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  \r\n     if(!(fetchedParams[\"access_token\"])){\r\n  \r\n      retObj.status = \"ERROR\";\r\n      retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n      callback(retObj);\r\n      return;\r\n  \r\n    }//end auth fetch\r\n  \r\n    var access_token = fetchedParams[\"access_token\"];\r\n  \r\n    var options = {\r\n        method: 'GET',\r\n  \r\n        baseUrl: baseUrl,\r\n  \r\n        url: path,\r\n  \r\n       headers: {\r\n          \"Accept\": \"application/json\",\r\n          \"Authorization\": \"Bearer \" + access_token\r\n        },\r\n  \r\n        json: true\r\n        \r\n      };\r\n      if (hashedParams.query && hashedParams.query.offset) {\r\n        options.qs.offset = hashedParams.query.offset\r\n        \r\n    }\r\n    retObj.status = \"SUCCESS\";\r\n    retObj.data = {options: options};\r\n    callback(retObj);\r\n    return\r\n  \r\n  }",
          "fixedValueSource": [
            
          ],
          "id": "tags",
          "inputType": "select",
          "name": "Tags",
          "required": false,
          "searchAction": "find-user",
          "searchID": "id",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\r\nconsole.log(\"--------Assignee Parse---------\")\r\nconsole.log(params['response'])\r\n    var retObj = {};\r\n\r\n    if (!params || !params['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var response = params['response'];\r\n\r\n        if (response['statusCode'] == 200) {\r\n\r\n            var parsed = response['body']['data'];\r\n\r\n            var arr = parsed;\r\n            var responseObjArray = [];\r\n            for (var index in arr) {\r\n                responseObjArray.push({\r\n                    id: arr[index]['id'] || arr[index]['gid'],\r\n                    name: arr[index]['name']\r\n                });\r\n            }\r\n            if (response.body.next_page && response.body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: response.body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            retObj['status'] = \"SUCCESS\";\r\n            retObj['data'] = responseObjArray;\r\n\r\n\r\n        } else if (params.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n                code,\r\n                message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else {\r\n\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\r\n\r\n        }\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['appinfo'] || !params['userapp']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var appinfo = params['appinfo'];\r\n        var userapp = params['userapp'];\r\n\r\n        // Generate HTTP Request body\r\n\r\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\r\n\r\n        var options = {\r\n            // Variables to be modified\r\n            method: 'GET',\r\n            url: '/users',\r\n\r\n            // Remain same\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\r\n                'User-Agent': 'Automate (http://automate.io/)' \r\n            },\r\n            baseUrl: 'https://app.asana.com/api/1.0/',\r\n            json: true\r\n        };\r\n        if (params.query && params.query.offset) {\r\n            options.qs.offset = params.query.offset\r\n            \r\n        }\r\n        // Form object to be returned\r\n        retObj['status'] = \"SUCCESS\";\r\n        retObj['data'] = {\r\n            options: options\r\n        };\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "assignee",
          "inputType": "select",
          "name": "Assignee",
          "required": false,
          "searchAction": "find-user",
          "searchID": "id",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\r\nconsole.log(\"--------Assignee Parse---------\")\r\nconsole.log(params['response'])\r\n    var retObj = {};\r\n\r\n    if (!params || !params['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var response = params['response'];\r\n\r\n        if (response['statusCode'] == 200) {\r\n\r\n            var parsed = response['body']['data'];\r\n\r\n            var arr = parsed;\r\n            var responseObjArray = [];\r\n            for (var index in arr) {\r\n                responseObjArray.push({\r\n                    id: arr[index]['id'] || arr[index]['gid'],\r\n                    name: arr[index]['name']\r\n                });\r\n            }\r\n            if (response.body.next_page && response.body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: response.body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            retObj['status'] = \"SUCCESS\";\r\n            retObj['data'] = responseObjArray;\r\n\r\n\r\n        } else if (params.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n                code,\r\n                message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else {\r\n\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\r\n\r\n        }\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['appinfo'] || !params['userapp']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var appinfo = params['appinfo'];\r\n        var userapp = params['userapp'];\r\n\r\n        // Generate HTTP Request body\r\n\r\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\r\n\r\n        var options = {\r\n            // Variables to be modified\r\n            method: 'GET',\r\n            url: '/users',\r\n\r\n            // Remain same\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\r\n                'User-Agent': 'Automate (http://automate.io/)' \r\n            },\r\n            baseUrl: 'https://app.asana.com/api/1.0/',\r\n            json: true\r\n        };\r\n        if (params.query && params.query.offset) {\r\n            options.qs.offset = params.query.offset\r\n            \r\n        }\r\n        // Form object to be returned\r\n        retObj['status'] = \"SUCCESS\";\r\n        retObj['data'] = {\r\n            options: options\r\n        };\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "followers",
          "inputType": "multiselect",
          "name": "Followers",
          "required": false,
          "searchAction": "find-user",
          "searchID": "id",
          "type": "String"
        },
        {
          "fixedValueSource": [
            {
              "id": "false",
              "name": "No"
            },
            {
              "id": "true",
              "name": "Yes"
            }
          ],
          "id": "hearted",
          "inputType": "select",
          "name": "Liked",
          "required": false,
          "type": "String"
        }
      ],
      "priority": 1,
      "responseFields": [
        {
          "description": "Id of the newly added Task",
          "id": "id",
          "name": "Task Id",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": "5dc017573b71fd0c98d969b7"
      },
      "actionParse": "function actionParse(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    // Input Validation\r\n    if (!params || !params['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var response = params['response'];\r\n\r\n        if (response['statusCode'] == 201) {\r\n\r\n            var id = (response['body'].data || {}).gid;\r\n            retObj['status'] = \"SUCCESS\";\r\n            retObj['data'] = {\r\n                parsedValues: {\r\n                    id: id\r\n                }\r\n            };\r\n\r\n        } else if (params.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n        } else {\r\n\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\r\n\r\n        }\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n}",
      "actionRequest": "function actionRequest(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        if(!params['params'][\"text\"] || !params['params'][\"task-id\"]){\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n            retObj['error']['message'] = \"Error: Required parameters are missing.Check Text and Task ID fields\";\r\n            callback(retObj);\r\n            return;\r\n        }\r\n        var appinfo = params['appinfo'];\r\n        var userapp = params['userapp'];\r\n        //\r\n        var text = {\r\n            text: params['params']['text']\r\n        };\r\n        var body = { \r\n            data : text\r\n        };\r\n\r\n        // Generate HTTP Request body\r\n\r\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\r\n\r\n        var options = {\r\n            // Variables to be modified\r\n            method: 'POST',\r\n            url: '/tasks/'+ params['params']['task-id']+ '/stories',\r\n\r\n            // Remain same\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\r\n            },\r\n            baseUrl: 'https://app.asana.com/api/1.0',\r\n            json: true,\r\n            body: body\r\n        };\r\n        //\r\n        // Form object to be returned\r\n        retObj['status'] = \"SUCCESS\";\r\n        retObj['data'] = {\r\n            options: options\r\n        };\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n\r\n}",
      "description": "Add a New Comment to a Task",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "message",
      "id": "add-story",
      "important": true,
      "name": "Add a Comment",
      "params": [
        {
          "defaultValue": "",
          "fixedValueSource": [
            
          ],
          "id": "text",
          "inputType": "input",
          "name": "Text",
          "required": true,
          "type": "String"
        },
        {
          "dependsOn": "projects",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    console.log(hashedParams['response'])\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if (!(body || {}) || !(body.data || {})) {\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n            if (!(body.data.length)) {\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n\r\n            if (body.data && body.data.length) {\r\n                body.data.forEach(function (task) {\r\n                    data.push({\r\n                        id: task.id || task.gid,\r\n                        name: task.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n\r\n\r\n            // add more error code specific code blocks\r\n        } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n                code,\r\n                message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else if (hashedParams.response.statusCode === 403) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if (!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var project_id = hashedParams.params.projects;\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    url: path + \"/\" + project_id + \"/tasks\",\r\n\r\n    headers: {\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true,\r\n    qs: {\r\n      'limit': 50\r\n    }\r\n\r\n  };\r\n  if (hashedParams.query && hashedParams.query.offset) {\r\n    options.qs.offset = hashedParams.query.offset\r\n\r\n  }\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = { options: options };\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "task-id",
          "inputType": "select",
          "name": "Task",
          "required": true,
          "searchAction": "find-task",
          "searchID": "id",
          "type": "String"
        },
        {
          "dependsOn": "workspace",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var response = params['response'];\r\n\r\n        if (response['statusCode'] == 200) {\r\n\r\n            var parsed = response['body']['data'];\r\n            \r\n            var arr = parsed;\r\n            var responseObjArray = [];\r\n            for (var index in arr) {\r\n                responseObjArray.push({\r\n                    id: arr[index]['id'] || arr[index]['gid'],\r\n                    name: arr[index]['name']\r\n                });\r\n            }\r\n            retObj['status'] = \"SUCCESS\";\r\n            retObj['data'] = responseObjArray;\r\n\r\n\r\n        } else if (params.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n      }  else {\r\n\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\r\n\r\n        }\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['appinfo'] || !params['userapp']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var appinfo = params['appinfo'];\r\n        var userapp = params['userapp'];\r\n\r\n        // Generate HTTP Request body\r\n\r\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\r\n\r\n        var options = {\r\n            // Variables to be modified\r\n            method: 'GET',\r\n            url: '/projects',\r\n\r\n            // Remain same\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\r\n                'User-Agent': 'Automate (http://automate.io/)' \r\n            },\r\n            baseUrl: 'https://app.asana.com/api/1.0/workspaces/'+params['params']['workspace'],\r\n            json: true,\r\n            qs: {\r\n              'limit': 50\r\n            }\r\n        };\r\n        if (params.query && params.query.offset) {\r\n            options.qs.offset = params.query.offset\r\n        \r\n          }\r\n        // Form object to be returned\r\n        retObj['status'] = \"SUCCESS\";\r\n        retObj['data'] = {\r\n            options: options\r\n        };\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "projects",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "searchAction": "find-project",
          "searchID": "id",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing Workspaces from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No Workspaces Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(workspace){\r\n                    data.push({\r\n                        id: workspace.id || workspace.gid,\r\n                        name: workspace.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    }  else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/workspaces\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if (!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    url: path,\r\n\r\n    headers: {\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true,\r\n    qs: {\r\n      'limit': 50\r\n    }\r\n\r\n  };\r\n  if (hashedParams.query && hashedParams.query.offset) {\r\n    options.qs.offset = hashedParams.query.offset\r\n\r\n  }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = { options: options };\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "workspace",
          "inputType": "select",
          "name": "Workspace / Organization ",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 2,
      "responseFields": [
        {
          "description": "Id of the newly added Story",
          "id": "id",
          "name": "Story Id",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": "5dc017573b71fd0c98d969b8"
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    \r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n     \r\n        if (response['statusCode'] === 200) {  \r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = {};\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    }  else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 400){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"BAD REQUEST\";\r\n            var message = \"\";\r\n            hashedParams.body.errors.forEach(function(error){\r\n                message += error.message + \",\"\r\n            });\r\n            retObj.error = {\r\n                message: message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/tasks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if (!hashedParams|| !hashedParams.userapp || !hashedParams.appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var inputParams = hashedParams.params;\r\n  if(!inputParams || !inputParams.task_id || !inputParams.tag){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Required input fields task Id or tag are missing\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var task_id = hashedParams.params.task_id;\r\n  let tag = hashedParams.params.tag;\r\n\r\n  var options = {\r\n      method: 'POST',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + task_id + \"/addTag\",\r\n\r\n     headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      body: {\r\n          data: {tag}\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
      "description": "Add Tag to a Task",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "collection.activity",
      "id": "add-tag",
      "important": true,
      "name": "Add Tag to a Task",
      "params": [
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var response = params['response'];\r\n\r\n        if (response['statusCode'] == 200) {\r\n\r\n            var parsed = response['body']['data'];\r\n\r\n            var arr = parsed;\r\n            var responseObjArray = [];\r\n            for (var index in arr) {\r\n                responseObjArray.push({\r\n                    id: arr[index]['id'] || arr[index]['gid'],\r\n                    name: arr[index]['name']\r\n                });\r\n            }\r\n            if (response.body.next_page && response.body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: response.body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            retObj['status'] = \"SUCCESS\";\r\n            retObj['data'] = responseObjArray;\r\n\r\n\r\n        } else if (params.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n                code,\r\n                message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else {\r\n\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\r\n\r\n        }\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n    var retObj = {};\r\n  \r\n    var path = \"/tags\";\r\n  \r\n    var baseUrl = \"https://app.asana.com/api/1.0\";\r\n  \r\n    var _ = hashedUtils._;\r\n  \r\n    if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n      retObj.status = \"ERROR\";\r\n      retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n      callback(retObj);\r\n      return;\r\n    }\r\n  \r\n    var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  \r\n     if(!(fetchedParams[\"access_token\"])){\r\n  \r\n      retObj.status = \"ERROR\";\r\n      retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n      callback(retObj);\r\n      return;\r\n  \r\n    }//end auth fetch\r\n  \r\n    var access_token = fetchedParams[\"access_token\"];\r\n  \r\n    var options = {\r\n        method: 'GET',\r\n  \r\n        baseUrl: baseUrl,\r\n  \r\n        url: path,\r\n  \r\n       headers: {\r\n          \"Accept\": \"application/json\",\r\n          \"Authorization\": \"Bearer \" + access_token\r\n        },\r\n  \r\n        json: true\r\n        \r\n      };\r\n      if (hashedParams.query && hashedParams.query.offset) {\r\n        options.qs.offset = hashedParams.query.offset\r\n        \r\n    }\r\n    retObj.status = \"SUCCESS\";\r\n    retObj.data = {options: options};\r\n    callback(retObj);\r\n    return\r\n  \r\n  }",
          "fixedValueSource": [
            
          ],
          "id": "tag",
          "inputType": "select",
          "name": "Tag",
          "required": true,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "task_id",
          "inputType": "input",
          "name": "Task Id",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        
      ]
    },
    {
      "_id": {
        "$oid": "5dc017573b71fd0c98d969b9"
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    \r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = {};\r\n\r\n        if (response['statusCode'] === 201) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n            data[\"subtask_id\"] = body.data.gid;\r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = {\r\n                parsedValues: data\r\n            };\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    }  else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 400){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"BAD REQUEST\";\r\n            var message = \"\";\r\n            hashedParams.body.errors.forEach(function(error){\r\n                message += error.message + \",\"\r\n            });\r\n            retObj.error = {\r\n                message: message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/tasks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if(!(hashedParams[\"params\"][\"task_id\"])){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Required Params are missing\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if(!(hashedUtils || {}) || !(hashedUtils._ || {} ) || !(hashedUtils.moment || {}) ){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Please provide utils with underscore and moment\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var newSubtask = {};\r\n\r\n  var inputParams = hashedParams.params;\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  var moment = hashedUtils.moment;\r\n\r\n  _.each(inputParams, function(data, key){\r\n\r\n    if(key === \"due_on\"){\r\n        // if(data){\r\n        //     var due_on = hashedUtils.libDate.parseStandardStringToJSDate(data);\r\n        //     newSubtask[key] = moment(due_on).format(\"YYYY-MM-DD\");\r\n        // }\r\n    } \r\n    else if (key === \"due_at\"){\r\n        if(data){\r\n            var due_at = hashedUtils.libDate.parseStandardStringToJSDateTime(data);\r\n            newSubtask[key] = due_at\r\n        }\r\n    }\r\n    else if (key === \"assignee\"){\r\n        if(data){\r\n            newSubtask[key] = {\r\n                gid: data\r\n            }\r\n        }\r\n    }\r\n    else if (key === \"followers\"){\r\n        if(data && data.length){\r\n            var followers = [];\r\n            data.forEach(function(user){\r\n                if(user.value) {\r\n                    followers.push({\r\n                        gid: user.value\r\n                    });\r\n                }\r\n            });\r\n            newSubtask[key] = followers;\r\n        }\r\n    }\r\n    else if(key !== \"resource_id\" && key !== \"task_id\" ){\r\n        if(data !== null){\r\n            newSubtask[key] = data;\r\n        }\r\n    }\r\n\r\n  });\r\n\r\n\r\n  var task_id = hashedParams.params.task_id;\r\n\r\n  var options = {\r\n      method: 'POST',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + task_id + \"/subtasks\",\r\n\r\n     headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      body: {\r\n          data: newSubtask\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
      "description": "Add a new Subtask on a Task",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "activity",
      "id": "add-subtask",
      "important": true,
      "name": "Add a Subtask",
      "params": [
        {
          "dependsOn": "resource_id",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n   \r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if (!(body || {}) || !(body.data || {})) {\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n            if (!(body.data.length)) {\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n\r\n            if (body.data && body.data.length) {\r\n                body.data.forEach(function (task) {\r\n                    data.push({\r\n                        id: task.id || task.gid,\r\n                        name: task.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n\r\n\r\n            // add more error code specific code blocks\r\n        } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n                code,\r\n                message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else if (hashedParams.response.statusCode === 403) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if (!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var project_id = hashedParams.params.resource_id;\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    url: path + \"/\" + project_id + \"/tasks\",\r\n\r\n    headers: {\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true,\r\n    qs: {\r\n      'limit': 50\r\n    }\r\n\r\n  };\r\n  if (hashedParams.query && hashedParams.query.offset) {\r\n    options.qs.offset = hashedParams.query.offset\r\n\r\n  }\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = { options: options };\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "task_id",
          "inputType": "select",
          "name": "Parent Task",
          "required": true,
          "searchAction": "find-task",
          "searchID": "id",
          "type": "String"
        },
        {
          "description": "Due date and time",
          "fixedValueSource": [
            
          ],
          "id": "due_at",
          "inputType": "input",
          "name": "Due At",
          "required": false,
          "type": "Date"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n   \r\n    var retObj = {};\r\n   \r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if (!(body || {}) || !(body.data || {})) {\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n            if (!(body.data.length)) {\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n\r\n            if (body.data && body.data.length) {\r\n                body.data.forEach(function (project) {\r\n                    data.push({\r\n                        id: project.id || project.gid,\r\n                        name: project.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n\r\n\r\n            // add more error code specific code blocks\r\n        } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n                code,\r\n                message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else if (hashedParams.response.statusCode === 403) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if (!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    url: path,\r\n\r\n    headers: {\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true\r\n\r\n  };\r\n  if (hashedParams.query && hashedParams.query.offset) {\r\n    options.qs.offset = hashedParams.query.offset\r\n\r\n  }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = { options: options };\r\nreturn  callback(retObj);\r\n\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "searchAction": "find-project",
          "searchID": "id",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing users from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No users Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(user){\r\n                    data.push({\r\n                        id: user.id || user.gid,\r\n                        name: user.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    }  else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/users\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n    if (hashedParams.query && hashedParams.query.offset) {\r\n      options.qs.offset = hashedParams.query.offset\r\n      \r\n  }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "assignee",
          "inputType": "select",
          "name": "Assignee",
          "required": false,
          "searchAction": "find-user",
          "searchID": "id",
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing users from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No users Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(user){\r\n                    data.push({\r\n                        id: user.id || user.gid,\r\n                        name: user.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    }  else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/users\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n    if (hashedParams.query && hashedParams.query.offset) {\r\n      options.qs.offset = hashedParams.query.offset\r\n      \r\n  }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "followers",
          "inputType": "multiselect",
          "name": "Followers",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "name",
          "inputType": "input",
          "name": "Sub Task Name",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "notes",
          "inputType": "input",
          "name": "Notes",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            {
              "id": "false",
              "name": "No"
            },
            {
              "id": "true",
              "name": "Yes"
            }
          ],
          "id": "hearted",
          "inputType": "select",
          "name": "Liked",
          "required": false,
          "type": "String"
        },
        {
          "fixedValueSource": [
            {
              "id": "inbox",
              "name": "Inbox"
            },
            {
              "id": "later",
              "name": "Later"
            },
            {
              "id": "today",
              "name": "Today"
            },
            {
              "id": "upcoming",
              "name": "Upcoming"
            }
          ],
          "id": "assignee_status",
          "inputType": "select",
          "name": "Status",
          "required": false,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "id": "subtask_id",
          "name": "Subtask Id",
          "type": "String"
        }
      ]
    },
    {
      "_id": {
        "$oid": "5dc017573b71fd0c98d969ba"
      },
      "actionParse": "function actionParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    \r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = {};\r\n\r\n        if (response['statusCode'] === 201) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n          \r\n            data[\"project_id\"] = body.data.gid;\r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = {\r\n                parsedValues: data\r\n            };\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 400){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"BAD REQUEST\";\r\n            var message = \"\";\r\n            hashedParams.body.errors.forEach(function(error){\r\n                message += error.message + \", \"\r\n            });\r\n            message = message.slice(0, (message.length - 2));\r\n            retObj.error = {\r\n                message: message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
      "actionRequest": "function actionRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if(!(hashedParams[\"params\"]) || !(hashedParams[\"params\"][\"workspace\"]) || !(hashedParams[\"params\"][\"name\"])){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Required Params are missing.Check Project Name,Workspace Fields\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if(!(hashedUtils || {}) || !(hashedUtils._ || {} )){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Please provide utils with underscore.\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n  var inputParams = hashedParams.params;\r\n  var newProject = {};\r\n \r\n  _.each(inputParams, function(data, key){\r\n      if(data){\r\n          newProject[key] = data;\r\n      }\r\n  });\r\n\r\n  var options = {\r\n      method: 'POST',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      body: {\r\n          data: newProject\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n\r\n}",
      "description": "Add a new Project in a Workspace",
      "dynamicInputFieldsDependsOn": [
        
      ],
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "collection.activity",
      "id": "add-project",
      "important": true,
      "name": "Add a Project",
      "params": [
        {
          "dependsOn": "workspace",
          "description": "If the workspace for your project is an organization, you must also supply a team to share the project with.",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing teams from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No teams Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(team){\r\n                    data.push({\r\n                        id: team.id || team.gid,\r\n                        name: team.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    }  else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 400){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"BAD REQUEST\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/organizations\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if (!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var organization_id = hashedParams.params.workspace;\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    url: path + \"/\" + organization_id + \"/teams\",\r\n\r\n    headers: {\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true\r\n\r\n  };\r\n  if (hashedParams.query && hashedParams.query.offset) {\r\n    options.qs.offset = hashedParams.query.offset\r\n\r\n  }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = { options: options };\r\n  callback(retObj);\r\n  return\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "team",
          "inputType": "select",
          "name": "Team",
          "required": false,
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing Workspaces from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No Workspaces Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(workspace){\r\n                    data.push({\r\n                        id: workspace.id || workspace.gid,\r\n                        name: workspace.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    }  else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/workspaces\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if (!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    url: path,\r\n\r\n    headers: {\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true,\r\n    qs: {\r\n      'limit': 50\r\n    }\r\n\r\n  };\r\n  if (hashedParams.query && hashedParams.query.offset) {\r\n    options.qs.offset = hashedParams.query.offset\r\n\r\n  }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = { options: options };\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "workspace",
          "inputType": "select",
          "name": "Workspace",
          "required": true,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "name",
          "inputType": "input",
          "name": "Name",
          "required": true,
          "type": "String"
        },
        {
          "fixedValueSource": [
            
          ],
          "id": "notes",
          "inputType": "input",
          "name": "Notes",
          "required": false,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "id": "project_id",
          "name": "Project Id",
          "type": "String"
        }
      ]
    }
  ],
  "app_url": "https://asana.com/",
  "appId": "asana",
  "auth": {
    "authCallBack": "function authCallBack(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n  var params = [];\r\n  if (!((hashedParams || {})).queryObj) {\r\n    retObj.status = 'ERROR';\r\n    retObj.error = { message: 'There was an error while connecting to Asana. Please try reconnecting the app to fix this issue. If the issue persists, you can reach out to Asana support' };\r\n    callback(retObj);\r\n    return;\r\n  }\r\n  var queryObj = hashedParams.queryObj;\r\n  if (!(hashedUtils || {}).oauth2) {\r\n    retObj.status = 'ERROR';\r\n    retObj.error = {\r\n      message: 'There was an error while connecting with Asana. Please get in touch with us and we\\'ll help you set it up.'\r\n    };\r\n    callback(retObj);\r\n    return;\r\n  }\r\n  //var oauth2 = hashedUtils.oauth2;\r\n  var appInfo = hashedParams.appInfo;\r\n  var oauth2 = hashedUtils.oauth2({\r\n    clientID: appInfo.auth.authParams.clientID,\r\n    clientSecret: appInfo.auth.authParams.clientSecret,\r\n    grant_type: \"authorization_code\",\r\n    site: appInfo.auth.authParams.site,\r\n    tokenPath: appInfo.auth.authParams.tokenPath,\r\n    authorizationPath: appInfo.auth.authParams.authorizationPath\r\n  });\r\n\r\n  if (!hashedParams.queryObj.code) {\r\n    retObj.status = 'ERROR';\r\n    retObj.error = { message: 'There was an error while connecting to Asana. Please try reconnecting the app to fix this issue. If the issue persists, you can reach out to Asana support' };\r\n    callback(retObj);\r\n    return;\r\n  }\r\n  var code = queryObj.code;\r\n  oauth2.authCode.getToken({\r\n    code: code,\r\n    redirect_uri: appInfo.auth.authParams.redirect_uri\r\n  }, saveToken);\r\n\r\n  function saveToken(ERROR, result) {\r\n    if (ERROR) {\r\n      retObj.status = 'ERROR';\r\n      retObj.error = { message: 'Access Token ERROR' + ERROR };\r\n      callback(retObj);\r\n      return;\r\n    } else {\r\n\r\n      if (result && result['access_token'] && result['refresh_token']) {\r\n        params.push({ 'id': 'access_token', value: result['access_token'] });\r\n        params.push({ 'id': 'refresh_token', value: result['refresh_token'] });\r\n        retObj.status = 'SUCCESS';\r\n        retObj.data = { oauth2Info: result, params: params };\r\n        callback(retObj);\r\n        return;\r\n      } else {\r\n        retObj.status = 'ERROR';\r\n        retObj.error = { message: 'Cannot retrieve all the required tokens ' };\r\n        callback(retObj);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
    "authParams": {
      "authorizationPath": "/-/oauth_authorize",
      "clientID": "100980070868503",
      "clientSecret": "996cdf2c7c0651a912ad5ba971d4f42f",
      "redirect_uri": "https://api.automate.io/auth/asana/callback",
      "site": "https://app.asana.com",
      "tokenPath": "/-/oauth_token"
    },
    "authRefreshParse": "function authRefreshParse(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"response or body to parse is missing while requesting in dynamicValueSourceParse\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n  if ((hashedParams.response.statusCode || {}) == 200) {\r\n    hashedParams.body= JSON.parse(hashedParams.body);\r\n    if(!hashedParams.body || !hashedParams.body.access_token){\r\n      retObj.status = \"ERROR\";\r\n      retObj.message = \"Failed to refresh the access_token\";\r\n      callback(retObj);\r\n      return;\r\n    }else{\r\n      retObj.status = \"SUCCESS\";\r\n      retObj.access_token = hashedParams.body.access_token;\r\n      retObj.message = \"successfully refreshed access_token\";\r\n      callback(retObj);\r\n      return;\r\n    }\r\n  } else {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"error while refreshing the token\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n}",
    "authRefreshRequest": "function authRefreshRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo){\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {message :\"Userapp or appinfo is missing while requesting in dynamicValueSourceRequest\"};\r\n    callback(retObj);\r\n    return;\r\n  }\r\n  if(!(hashedUtils || {})._){\r\n    retObj.status = \"ERROR\";\r\n    retObj.error ={message:  \"hashedUtils doesnot contain underscore module\"};\r\n    callback(retObj);\r\n    return;\r\n  }\r\n  var _ = hashedUtils._;\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if((!fetchedParams || {}).access_token){\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {message: \"cannot fetch access_token from fetchAuthParams\"};\r\n    callback(retObj);\r\n    return;\r\n  }\r\n  if(!((((hashedParams || {}).appinfo || {}).auth || {}).authParams || {}).clientID){\r\n    retObj.status = \"ERROR\";\r\n    retObj.error ={message:  \"appInfo is missing clientId\"};\r\n    callback(retObj);\r\n    return;\r\n  }\r\n  if(!((((hashedParams || {}).appinfo || {}).auth || {}).authParams || {}).clientSecret){\r\n    retObj.status = \"ERROR\";\r\n    retObj.error ={message: \"appInfo is missing clientId\"};\r\n    callback(retObj);\r\n    return;\r\n  }\r\n  var refresh_token = _.findWhere(hashedParams.userapp.params, {id: 'refresh_token'});\r\n  if(!refresh_token || !refresh_token.value){\r\n    retObj.status = \"ERROR\";\r\n    retObj.error ={message: \"refresh token is missing in userApp\"};\r\n    callback(retObj);\r\n    return;\r\n  }\r\n  var options = {\r\n    url: 'https://app.asana.com/-/oauth_token',\r\n    method: 'POST',\r\n    headers: [\r\n      {\r\n        name: 'content-type',\r\n        value: 'application/x-www-form-urlencoded'\r\n      }\r\n    ],\r\n    form: {\r\n      client_id: hashedParams.appinfo.auth.authParams['clientID'],\r\n      client_secret: hashedParams.appinfo.auth.authParams['clientSecret'],\r\n      refresh_token: refresh_token.value,\r\n      grant_type: 'refresh_token',\r\n      redirect_uri: hashedParams.appinfo.auth.authParams.redirect_uri\r\n    }\r\n  };\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n}",
    "authStrategy": "function authStrategy(hashedParams, hashedUtils, callback) {\r\n  var appInfo = hashedParams.appInfo;\r\n  var oauth2 = hashedUtils.oauth2({\r\n    clientID: appInfo.auth.authParams.clientID,\r\n    clientSecret: appInfo.auth.authParams.clientSecret,\r\n    grant_type: \"authorization_code\",\r\n    site: appInfo.auth.authParams.site,\r\n    tokenPath: appInfo.auth.authParams.tokenPath,\r\n    authorizationPath: appInfo.auth.authParams.authorizationPath\r\n  });\r\n\r\n  var retObj = {};\r\n  if(!(hashedUtils || {}).oauth2){\r\n    retObj.status = 'ERROR';\r\n    retObj.error = {message: 'doesNot have simple-oauth2 object while requesting in authCallback function'};\r\n    callback(retObj);\r\n    return;\r\n  }\r\n  //var oauth2 = hashedUtils.oauth2;\r\n  var authorization_uri = oauth2.authCode.authorizeURL({\r\n    redirect_uri: appInfo.auth.authParams.redirect_uri,\r\n    'response_type': 'code'\r\n  });\r\n  retObj.status = 'SUCCESS';\r\n  retObj.data = {authorization_uri: authorization_uri};\r\n  callback(retObj);\r\n  return\r\n}\r\n",
    "response": [
      {
        "id": "access_token"
      },
      {
        "id": "refresh_token"
      }
    ],
    "type": "OAuth2"
  },
  "category": "project-management",
  "description": "Asana is a project management application for teams of all sizes, available on web and mobile",
  "draft": false,
  "logo": "assets/images/logos/asana.png",
  "maintainance": {
    "status": false
  },
  "name": "Asana",
  "priority": 2,
  "searchKeywords": "Asana, management",
  "triggers": [
    {
      "beta": true,
      "description": "Triggers when Task due date is updated",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "activity",
      "id": "change-duedate",
      "important": true,
      "name": "Task Due Date Changed",
      "params": [
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n   \r\n    var retObj = {};\r\n   \r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if (!(body || {}) || !(body.data || {})) {\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n            if (!(body.data.length)) {\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n\r\n            if (body.data && body.data.length) {\r\n                body.data.forEach(function (project) {\r\n                    data.push({\r\n                        id: project.id || project.gid,\r\n                        name: project.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n\r\n\r\n            // add more error code specific code blocks\r\n        } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n                code,\r\n                message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else if (hashedParams.response.statusCode === 403) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if (!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    url: path,\r\n\r\n    headers: {\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true\r\n\r\n  };\r\n  if (hashedParams.query && hashedParams.query.offset) {\r\n    options.qs.offset = hashedParams.query.offset\r\n\r\n  }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = { options: options };\r\nreturn  callback(retObj);\r\n\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "description": "Global unique ID of the activity.",
          "id": "id",
          "name": "Activity Id",
          "type": "String"
        },
        {
          "description": "Human-readable text for the activity.",
          "id": "text",
          "name": "Activity Text",
          "type": "String"
        },
        {
          "description": "The component of the Asana product the user used to trigger the activity.",
          "id": "source",
          "name": "Activity Source",
          "type": "String"
        },
        {
          "description": "The id of the user who created the activity.",
          "id": "created_by_id",
          "name": "Activity Created By Id",
          "type": "String"
        },
        {
          "description": "The name of the user who created the activity.",
          "id": "created_by_name",
          "name": "Activity Created By Name",
          "type": "String"
        },
        {
          "description": "The task related to this activity.",
          "id": "target_id",
          "name": "Task Id",
          "searchAction": "find-task",
          "searchID": "task_id",
          "searchLabel": "Get Task info",
          "type": "String"
        },
        {
          "description": "The time at which this activity was created.",
          "id": "created_at",
          "name": "Activity Created At",
          "type": "String"
        },
        {
          "description": "The type of Activity. Example: System, Comment..",
          "id": "type",
          "name": "Activity Type",
          "type": "String"
        },
        {
          "id": "resource_subtype",
          "name": "Resource Subtype",
          "type": "String"
        },
        {
          "id": "resource_type",
          "name": "Resource Type",
          "type": "String"
        }
      ],
      "sampleData": {
        "created_at": "05-Aug-2019 09:15:00",
        "created_by_id": 840504531510598,
        "created_by_name": "Ratan",
        "gid": "1135026385087801",
        "id": "1135026385087801",
        "resource_subtype": "due_date_changed",
        "resource_type": "story",
        "source": "web",
        "target_id": 1134219505003201,
        "text": "changed the due date to August 20",
        "type": "system"
      },
      "source": {
        "type": "webhook",
        "webhookDeleteParse": "function webhookDeleteParse(hashedParams, hashedUtils, callback) {\r\n\r\n  var retObj = {};\r\n\r\n  if( !(hashedParams || {}).response ){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {\r\n      message: \"response is missing while requesting webhook Delete Request\"\r\n    };\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  if ( ( hashedParams.response.statusCode || {} ) == 200 ) {\r\n    \r\n    retObj.status = \"SUCCESS\";\r\n    callback(retObj);\r\n    return;\r\n      \r\n  } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {\r\n      message: \"error occured while deleting webhook with status code:\" + hashedParams.response.statusCode\r\n    };\r\n    callback(retObj);\r\n    return;\r\n  }\r\n}",
        "webhookDeleteRequest": "function webhookDeleteRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/webhooks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var workflow = hashedParams.workflow;\r\n\r\n  var webhookId = null;\r\n\r\n \r\n  if( workflow && workflow.trigger && workflow.trigger.webHook && workflow.trigger.webHook.status == 'registered' && workflow.trigger.webHook.data) {\r\n\r\n    webhookId = workflow.trigger.webHook.data.gid || workflow.trigger.webHook.data.id;\r\n    \r\n  }\r\n\r\n  if ( !webhookId ) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch webhookId from workflow to delete webhook\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n\r\n    method: 'DELETE',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    headers: {\r\n        Authorization: \"Bearer \" + access_token\r\n    },\r\n\r\n    url: path + \"/\" + webhookId,\r\n\r\n    json: true\r\n      \r\n  };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookObjectParse": "function webhookObjectParse(hashedParams, hashedUtils, callback) {\r\n\r\n    var retObj = {};\r\n    var _ = hashedUtils._;\r\n\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in webhookObjectRequest.\"\r\n\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n            if (body.data && body.data.resource_subtype !== 'due_date_changed') {\r\n                retObj.status = \"SUCCESS\";\r\n                retObj.data = [];\r\n\r\n                callback(retObj);\r\n                return;\r\n            }\r\n            var params = {};\r\n\r\n            var dates = {\r\n                \"created_at\": true\r\n            };\r\n\r\n            var keys = {\r\n                text: true,\r\n                type: true,\r\n                source: true,\r\n                id: true,\r\n                gid: true,\r\n                resource_subtype: true,\r\n                resource_type: true\r\n            };\r\n\r\n            _.each(body.data, function (data, key) {\r\n                if (dates[key]) {\r\n                    if (data) {\r\n                        params[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\r\n                    }\r\n                } else if (key === \"created_by\") {\r\n                    if (data) {\r\n                        _.each(data, function (wData, wKey) {\r\n                            params[\"created_by_\" + wKey] = wData;\r\n                        });\r\n                    }\r\n                } else if (key === \"target\") {\r\n\r\n                    if (data) {\r\n                        _.each(data, function (tData, tKey) {\r\n                            if (tKey === \"gid\") {\r\n                                if (tData) {\r\n                                    params[\"target_\" + 'id'] = tData;\r\n                                }\r\n                            }\r\n                        });\r\n                       \r\n                    }\r\n\r\n                } else if (keys[key]) {\r\n                    if (data !== null && data !== undefined) {\r\n                        params[key] = data;\r\n                    }\r\n                }\r\n            });\r\n\r\n            retObj.status = \"SUCCESS\";\r\n            retObj.data = params;\r\n\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n                code,\r\n                message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else if (hashedParams.response.statusCode === 403) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n\r\n        }\r\n    }\r\n    callback(retObj);\r\n    return\r\n}",
        "webhookObjectQuery": true,
        "webhookObjectRequest": "function webhookObjectRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/stories\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var story = hashedParams.parsedData;\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + story.resource.gid,\r\n\r\n     headers: {\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n\r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: [options]};\r\n\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookRegisterParse": "function webhookRegisterParse(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {message: \"response or body to parse is missing while requesting in dynamicValueSourceParse\"};\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if (( hashedParams.response.statusCode || {} ) == 200 || ( hashedParams.response.statusCode || {} ) == 201) {\r\n      var parsed = hashedParams.body;\r\n      retObj.status = \"SUCCESS\";\r\n      retObj.data = {\r\n          webHook:{\r\n            status: 'registered',\r\n            data: parsed.data\r\n          }\r\n        };\r\n\r\n      callback(retObj);\r\n      return;\r\n\r\n  } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n  } else if (hashedParams.response.statusCode == 400) {\r\n\r\n    var message = hashedParams && hashedParams.body && hashedParams.body.errors.map(err => err.message).join()\r\n    message = message.includes('Unknown object') ? 'Does the selected project exist?' : message\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = { message };\r\n    retObj.data =  { webHook : {} };\r\n    retObj.data.webHook.status = 'Failed';\r\n    retObj.data.webHook.data = { message };\r\n    callback(retObj);\r\n\r\n  } else {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.data=  {};\r\n    retObj.error = {message: \"error occured with status code:\"+hashedParams.response.statusCode};\r\n    retObj.data.webHook = {};\r\n    retObj.data.webHook.status = 'Failed';\r\n    retObj.data.webHook.data = {message: \"Error while requesting for webhook registration with status code \" + hashedParams.response.statusCode + \" body \" + JSON.stringify(hashedParams.body)};\r\n    callback(retObj);\r\n    return\r\n  }\r\n}",
        "webhookRegisterRequest": "function webhookRegisterRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/webhooks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var resource_id = null;\r\n\r\n  var triggerParams = hashedParams.workflow.trigger.params || {};\r\n\r\n  if(triggerParams && triggerParams.length){\r\n    triggerParams.forEach(function(param){\r\n      if(param.id === \"resource_id\"){\r\n        resource_id = param.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  if(!resource_id){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Resource Id is missing from Workflow\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n      method: 'POST',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      body: {\r\n          \"data\": {\r\n            \"resource\": resource_id,\r\n            \"target\": process.env['webhookUrl'] + '/webhook/' + hashedParams.workflow._id\r\n          }\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  \r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookTriggerParse": "function webhookTriggerParse(hashedParams, hashedUtils, callback){\r\n\r\n    var retObj = {};\r\n\r\n    var _ = hashedUtils._;\r\n\r\n     if(hashedParams.request.headers[\"x-hook-secret\"] && _.isEmpty(hashedParams.request.body)){\r\n\r\n        retObj.status = \"SKIP\";\r\n        retObj.message = \"Handshake\";\r\n        retObj.response = {};\r\n        retObj.response.headers = {\r\n            \"x-hook-secret\": hashedParams.request.headers[\"x-hook-secret\"]\r\n        };\r\n\r\n        callback(retObj);\r\n        return;\r\n\r\n    } else if (hashedParams['body'].events.length) {\r\n      var events = hashedParams.body.events\r\n\r\n      var removedStories = events\r\n        .filter(event => (event.resource || {}).resource_type === 'story' && event.action === 'removed')\r\n      var addedStories = events\r\n        .filter(event => (event.resource || {}).resource_type === 'story' && event.action === 'added')\r\n        .filter(aEvent => !removedStories.find(rEvent => rEvent.resource === aEvent.resource))\r\n\r\n      if (addedStories.length) {\r\n        retObj.data = {objects: addedStories}\r\n        retObj.status = 'SUCCESS'\r\n        callback(retObj)\r\n      } else {\r\n        retObj.status = 'SKIP'\r\n        retObj.message = 'Unwanted Resource'\r\n        callback(retObj)\r\n      }\r\n  \r\n    } else if(hashedParams[\"body\"].events.length === 0) {\r\n\r\n        retObj.status = \"SKIP\";\r\n        retObj.message = \"TEST PING\";\r\n\r\n        callback(retObj);\r\n        return;\r\n\r\n    } else {\r\n        retObj.status = \"ERROR\";\r\n        retObj.error = {\r\n            message: \"Error Occured\"\r\n        }\r\n        callback(retObj);\r\n        return\r\n    }\r\n\r\n}"
      },
      "webhookType": "workflow"
    },
    {
      "beta": true,
      "description": "Triggers when the task is moved to a different section",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "activity",
      "id": "change-section",
      "important": true,
      "name": "Task moved to section",
      "params": [
        {
          "dependsOn": "projects",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n\r\n        var response = params['response'];\r\n\r\n        if (response['statusCode'] == 200) {\r\n\r\n            var parsed = response['body']['data'];\r\n            \r\n            var arr = parsed;\r\n            var responseObjArray = [];\r\n            for (var index in arr) {\r\n                responseObjArray.push({\r\n                    id: arr[index]['id'] || arr[index]['gid'],\r\n                    name: arr[index]['name']\r\n                });\r\n            }\r\n            if (response.body.next_page && response.body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: response.body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj['status'] = \"SUCCESS\";\r\n            retObj['data'] = responseObjArray;\r\n\r\n\r\n        } else if (params.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n      }  else {\r\n\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            retObj['error']['message'] = \"Error with status code \" + response['statusCode'].toString();\r\n\r\n        }\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n\r\n    if (!params || !params['appinfo'] || !params['userapp']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\r\n\r\n    } else {\r\n\r\n        var appinfo = params['appinfo'];\r\n        var userapp = params['userapp'];\r\n\r\n        // Generate HTTP Request body\r\n\r\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\r\n\r\n        var options = {\r\n            // Variables to be modified\r\n            method: 'GET',\r\n            url: '/projects/' + params.params.projects + '/sections',\r\n\r\n            // Remain same\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization' : 'Bearer ' + fetchedParams['access_token'],\r\n                'User-Agent': 'Automate (http://automate.io/)'\r\n            },\r\n            baseUrl: 'https://app.asana.com/api/1.0/',\r\n            json: true\r\n        };\r\n        if (params.query && params.query.offset) {\r\n            options.qs.offset = params.query.offset\r\n            \r\n        }\r\n\r\n        // Form object to be returned\r\n        retObj['status'] = \"SUCCESS\";\r\n        retObj['data'] = {\r\n            options: options\r\n        };\r\n    }\r\n\r\n    callback(retObj);\r\n    return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "section",
          "inputType": "select",
          "name": "Section / Column",
          "required": false,
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n   \r\n    var retObj = {};\r\n   \r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if (!(body || {}) || !(body.data || {})) {\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n            if (!(body.data.length)) {\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n\r\n            if (body.data && body.data.length) {\r\n                body.data.forEach(function (project) {\r\n                    data.push({\r\n                        id: project.id || project.gid,\r\n                        name: project.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n\r\n\r\n            // add more error code specific code blocks\r\n        } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n                code,\r\n                message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else if (hashedParams.response.statusCode === 403) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n\r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if (!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    url: path,\r\n\r\n    headers: {\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true\r\n\r\n  };\r\n  if (hashedParams.query && hashedParams.query.offset) {\r\n    options.qs.offset = hashedParams.query.offset\r\n\r\n  }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = { options: options };\r\nreturn  callback(retObj);\r\n\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "projects",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "description": "Global unique ID of the activity.",
          "id": "id",
          "name": "Activity Id",
          "type": "String"
        },
        {
          "description": "Human-readable text for the activity.",
          "id": "text",
          "name": "Activity Text",
          "type": "String"
        },
        {
          "description": "The component of the Asana product the user used to trigger the activity.",
          "id": "source",
          "name": "Activity Source",
          "type": "String"
        },
        {
          "description": "The id of the user who created the activity.",
          "id": "created_by_id",
          "name": "Activity Created By Id",
          "type": "String"
        },
        {
          "description": "The name of the user who created the activity.",
          "id": "created_by_name",
          "name": "Activity Created By Name",
          "type": "String"
        },
        {
          "description": "The task related to this activity.",
          "id": "target_id",
          "name": "Task Id",
          "searchAction": "find-task",
          "searchID": "task_id",
          "searchLabel": "Get Task info",
          "type": "String"
        },
        {
          "description": "The time at which this activity was created.",
          "id": "created_at",
          "name": "Activity Created At",
          "type": "String"
        },
        {
          "description": "The type of Activity. Example: System, Comment..",
          "id": "type",
          "name": "Activity Type",
          "type": "String"
        },
        {
          "id": "resource_subtype",
          "name": "Resource Subtype",
          "type": "String"
        },
        {
          "id": "resource_type",
          "name": "Resource Type",
          "type": "String"
        }
      ],
      "sampleData": {
        "created_at": "05-Aug-2019 09:15:00",
        "created_by_id": 840504531510598,
        "created_by_name": "Ratan",
        "gid": "1135026385087801",
        "id": "1135026385087801",
        "resource_subtype": "due_date_changed",
        "resource_type": "story",
        "source": "web",
        "target_id": 1134219505003201,
        "text": "changed the due date to August 20",
        "type": "system"
      },
      "source": {
        "type": "webhook",
        "webhookDeleteParse": "function webhookDeleteParse(hashedParams, hashedUtils, callback) {\r\n\r\n  var retObj = {};\r\n\r\n  if( !(hashedParams || {}).response ){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {\r\n      message: \"response is missing while requesting webhook Delete Request\"\r\n    };\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  if ( ( hashedParams.response.statusCode || {} ) == 200 ) {\r\n    \r\n    retObj.status = \"SUCCESS\";\r\n    callback(retObj);\r\n    return;\r\n      \r\n  } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {\r\n      message: \"error occured while deleting webhook with status code:\" + hashedParams.response.statusCode\r\n    };\r\n    callback(retObj);\r\n    return;\r\n  }\r\n}",
        "webhookDeleteRequest": "function webhookDeleteRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/webhooks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var workflow = hashedParams.workflow;\r\n\r\n  var webhookId = null;\r\n  if( workflow && workflow.trigger && workflow.trigger.webHook && workflow.trigger.webHook.status == 'registered' && workflow.trigger.webHook.data) {\r\n\r\n    webhookId = workflow.trigger.webHook.data.gid || workflow.trigger.webHook.data.id;\r\n    \r\n  }\r\n\r\n  if (!webhookId) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch webhookId from workflow to delete webhook\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n\r\n    method: 'DELETE',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    headers: {\r\n        Authorization: \"Bearer \" + access_token\r\n    },\r\n\r\n    url: path + \"/\" + webhookId,\r\n\r\n    json: true\r\n      \r\n  };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookObjectParse": "function webhookObjectParse(hashedParams, hashedUtils, callback) {\r\n\r\n    var retObj = {};\r\n    var _ = hashedUtils._;\r\n\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in webhookObjectRequest.\"\r\n\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n            if (hashedParams.step.request === 'storyRequest') {\r\n                var body = hashedParams[\"body\"];\r\n                if (body.data && body.data.resource_subtype !== 'section_changed') {\r\n                    retObj.status = \"SUCCESS\";\r\n                    retObj.data = [];\r\n\r\n                    callback(retObj);\r\n                    return;\r\n                }\r\n\r\n                var params = {};\r\n\r\n                var dates = {\r\n                    \"created_at\": true\r\n                };\r\n\r\n                var keys = {\r\n                    text: true,\r\n                    type: true,\r\n                    source: true,\r\n                    id: true,\r\n                    gid: true,\r\n                    resource_subtype: true,\r\n                    resource_type: true\r\n                };\r\n\r\n                _.each(body.data, function (data, key) {\r\n                    if (dates[key]) {\r\n                        if (data) {\r\n                            params[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\r\n                        }\r\n                    } else if (key === \"created_by\") {\r\n                        if (data) {\r\n                            _.each(data, function (wData, wKey) {\r\n                                params[\"created_by_\" + wKey] = wData;\r\n                            });\r\n                        }\r\n                    } else if (key === \"target\") {\r\n\r\n                        if (data) {\r\n                            _.each(data, function (tData, tKey) {\r\n                                if (tKey === \"gid\") {\r\n                                    if (tData) {\r\n                                        params[\"target_\" + 'id'] = tData;\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                        }\r\n\r\n                    } else if (keys[key]) {\r\n                        if (data !== null && data !== undefined) {\r\n                            params[key] = data;\r\n                        }\r\n                    }\r\n                });\r\n                if (hashedParams.step.sectionId) {\r\n                    retObj.step = {\r\n                        \"responseData\": params,\r\n                        \"request\": \"taskDetails\",\r\n                        \"taskId\": params.target_id\r\n                    }\r\n                }\r\n\r\n                retObj.status = \"SUCCESS\";\r\n                retObj.data = params;\r\n\r\n                callback(retObj);\r\n                return;\r\n            } else {\r\n                var body = hashedParams[\"body\"];\r\n\r\n                retObj.status = \"SUCCESS\";\r\n                retObj.data = [];\r\n                if (body.data && body.data.memberships) {\r\n                    let section = body.data.memberships.find((obj) => {\r\n                        if (obj.section && (obj.section.id || obj.section.gid) == hashedParams.step.sectionId) {\r\n                            return obj;\r\n                        }\r\n                    })\r\n                    if (section) {\r\n                        retObj.data = hashedParams.step.responseData\r\n                    }\r\n\r\n\r\n\r\n                }\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n\r\n        } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n                code,\r\n                message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else if (hashedParams.response.statusCode === 403) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n\r\n        }\r\n    }\r\n    callback(retObj);\r\n    return\r\n}",
        "webhookObjectQuery": true,
        "webhookObjectRequest": "function webhookObjectRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/stories\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if (!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var story = hashedParams.parsedData;\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    url: path + \"/\" + story.resource.gid,\r\n\r\n    headers: {\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true\r\n\r\n  };\r\n\r\n  var triggerParams = hashedParams.workflow.trigger.params || {};\r\n  // console.log(triggerParams,\"params\")\r\n  let sectionId = (triggerParams.find(el=> el.id && el.id === \"section\") || {}).value \r\n  if (hashedParams.step && hashedParams.step.request === 'taskDetails') {\r\n    options.url = `/tasks/${hashedParams.step.taskId}`;\r\n    retObj.step = {\r\n      'request': \"taskDetails\",\r\n      \"sectionId\": sectionId,\r\n      \"responseData\": hashedParams.step.responseData\r\n    }\r\n  } else {\r\n    retObj.step = {\r\n      'request': \"storyRequest\",\r\n      \"sectionId\": sectionId\r\n    }\r\n  }\r\n\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = { options: [options] };\r\n\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookRegisterParse": "function webhookRegisterParse(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {message: \"response or body to parse is missing while requesting in dynamicValueSourceParse\"};\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if (( hashedParams.response.statusCode || {} ) == 200 || ( hashedParams.response.statusCode || {} ) == 201) {\r\n      var parsed = hashedParams.body;\r\n      retObj.status = \"SUCCESS\";\r\n      retObj.data = {\r\n          webHook:{\r\n            status: 'registered',\r\n            data: parsed.data\r\n          }\r\n        };\r\n\r\n      callback(retObj);\r\n      return;\r\n\r\n  } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n  } else if (hashedParams.response.statusCode == 400) {\r\n\r\n    var message = hashedParams && hashedParams.body && hashedParams.body.errors.map(err => err.message).join()\r\n    message = message.includes('Unknown object') ? 'Does the selected project exist?' : message\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = { message };\r\n    retObj.data =  { webHook : {} };\r\n    retObj.data.webHook.status = 'Failed';\r\n    retObj.data.webHook.data = { message };\r\n    callback(retObj);\r\n\r\n  } else {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.data=  {};\r\n    retObj.error = {message: \"error occured with status code:\"+hashedParams.response.statusCode};\r\n    retObj.data.webHook = {};\r\n    retObj.data.webHook.status = 'Failed';\r\n    retObj.data.webHook.data = {message: \"Error while requesting for webhook registration with status code \" + hashedParams.response.statusCode + \" body \" + JSON.stringify(hashedParams.body)};\r\n    callback(retObj);\r\n    return\r\n  }\r\n}",
        "webhookRegisterRequest": "function webhookRegisterRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/webhooks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var resource_id = null;\r\n\r\n  let triggerParams = hashedParams.workflow.trigger.params || {};\r\n  if(triggerParams && triggerParams.length){\r\n    triggerParams.forEach(function(param){\r\n      if(param.id === \"projects\"){\r\n        resource_id = param.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  if(!resource_id){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Resource Id is missing from Workflow\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n      method: 'POST',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      body: {\r\n          \"data\": {\r\n            \"resource\": resource_id,\r\n            \"target\": process.env['webhookUrl'] + '/webhook/' + hashedParams.workflow._id\r\n          }\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  \r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookTriggerParse": "function webhookTriggerParse(hashedParams, hashedUtils, callback){\r\n\r\n    var retObj = {};\r\n\r\n    var _ = hashedUtils._;\r\n\r\n     if(hashedParams.request.headers[\"x-hook-secret\"] && _.isEmpty(hashedParams.request.body)){\r\n\r\n        retObj.status = \"SKIP\";\r\n        retObj.message = \"Handshake\";\r\n        retObj.response = {};\r\n        retObj.response.headers = {\r\n            \"x-hook-secret\": hashedParams.request.headers[\"x-hook-secret\"]\r\n        };\r\n\r\n        callback(retObj);\r\n        return;\r\n\r\n    } else if (hashedParams['body'].events.length) {\r\n      var events = hashedParams.body.events\r\n\r\n      var removedStories = events\r\n        .filter(event => (event.resource || {}).resource_type === 'story' && event.action === 'removed')\r\n\r\n      var addedStories = events\r\n        .filter(event => (event.resource || {}).resource_type === 'story' && event.action === 'added')\r\n        .filter(aEvent => !removedStories.find(rEvent => rEvent.resource === aEvent.resource))\r\n\r\n      // if(triggerParams.section){\r\n      //   addedStories.forEach(obj => {\r\n      //     obj[\"sectionId\"] = sectionId\r\n      //   });\r\n      // }\r\n\r\n      if (addedStories.length) {\r\n        retObj.data = {objects: addedStories}\r\n        retObj.status = 'SUCCESS'\r\n        callback(retObj)\r\n      } else {\r\n        retObj.status = 'SKIP'\r\n        retObj.message = 'Unwanted Resource'\r\n        callback(retObj)\r\n      }\r\n  \r\n    } else if(hashedParams[\"body\"].events.length === 0) {\r\n\r\n        retObj.status = \"SKIP\";\r\n        retObj.message = \"TEST PING\";\r\n\r\n        callback(retObj);\r\n        return;\r\n\r\n    } else {\r\n        retObj.status = \"ERROR\";\r\n        retObj.error = {\r\n            message: \"Error Occured\"\r\n        }\r\n        callback(retObj);\r\n        return\r\n    }\r\n\r\n}"
      },
      "webhookType": "workflow"
    },
    {
      "description": "Triggers when a new Project is added to workspace",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "collection.activity",
      "id": "new-project",
      "name": "New Project",
      "params": [
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n            return\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing Workspaces from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No Workspaces Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(workspace){\r\n                    data.push({\r\n                        id: workspace.gid || workspace.id,\r\n                        name: workspace.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/workspaces\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true,\r\n      qs:{\r\n        'limit':50\r\n      }\r\n      \r\n    };\r\n    if (hashedParams.query && hashedParams.query.offset) {\r\n      options.qs.offset = hashedParams.query.offset\r\n  \r\n    }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return  \r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "workspace_id",
          "inputType": "select",
          "name": "Workspace",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "id": "created_at",
          "name": "Project Created At",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Project Id",
          "type": "String"
        },
        {
          "id": "modified_at",
          "name": "Project Modified At",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Project Name",
          "type": "String"
        },
        {
          "id": "notes",
          "name": "Project Notes",
          "type": "String"
        }
      ],
      "sampleData": {
        "created_at": "05-Aug-2019 09:15:00",
        "id": "930510267487562",
        "modified_at": "05-Aug-2019 09:15:00",
        "name": "testing",
        "notes": ""
      },
      "source": {
        "initialPollParse": "function intialPollParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in intialPollParse.\"\r\n        callback(retObj);\r\n            return\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing tasks from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            var uniqueId = 0;\r\n\r\n            if(body.data && body.data.length){\r\n                uniqueId = body.data[body.data.length - 1].id || body.data[body.data.length - 1].gid;\r\n            }\r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = {};\r\n            retObj[\"data\"][\"pollData\"] = {\r\n                status: \"SUCCESS\",\r\n                data: {\r\n                    uniqueId: uniqueId\r\n                }\r\n            };\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
        "initialPollRequest": "function intialPollRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/workspaces\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var workspace_id = _.findWhere(hashedParams.workflow.trigger.params, {\r\n      id: \"workspace_id\"\r\n  });\r\n\r\n  workspace_id = workspace_id.value;\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + workspace_id + \"/projects\",\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "objectParse": "function objectParse(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n    if (!params || !params.response || !params.body) {\r\n        return callback({\r\n            error: {\r\n                code: 'ERROR_MISSING_PARAM',\r\n                message: 'response or body to parse is missing'\r\n            },\r\n            status: 'ERROR'\r\n        })\r\n    }\r\n    if (params.response.statusCode === 200) {\r\n        \r\n        var parsed = {};\r\n        var _ = utils._;\r\n\r\n        var body = JSON.parse(params.body);\r\n\r\n            var dates = {\r\n                \"created_at\": true,\r\n                \"modified_at\": true\r\n            };\r\n\r\n            var keys = {\r\n                \"id\": true,\r\n                \"name\": true,\r\n                \"archived\": true,\r\n                \"notes\": true,\r\n                \"gid\": true\r\n            };\r\n\r\n            _.each(body.data, function(data, key){\r\n\r\n                if(dates[key]){\r\n                    if(data){\r\n                        parsed[key] = utils.libDate.parseJSDateTimeToStandardString(new Date(data));\r\n                    }\r\n                } else if(keys[key]){\r\n                    if(data !== null && data !== undefined){\r\n                        if(key == 'gid')\r\n                            parsed['id'] = data\r\n                        else    \r\n                            parsed[key] = data;\r\n                    }\r\n                }\r\n            });\r\n\r\n            retObj.status = \"SUCCESS\";\r\n            retObj.data = {\r\n                newObject: {\r\n                    response: {\r\n                        params: parsed\r\n                    }\r\n                },\r\n                hash: {\r\n                    id: body.data.gid || body.data.id\r\n                }\r\n            }\r\n\r\n            callback(retObj);\r\n            return;\r\n\r\n    } else {\r\n        let code\r\n        if (params.response.statusCode === 401) {\r\n            code = 'ERROR_AUTH_REFRESH'\r\n        } else if (params.response.statusCode === 400) {\r\n            code = 'ERROR_MISSING_PARAM'\r\n        } else if (params.response.statusCode === 403 || params.response.statusCode === 429) {\r\n            code = 'ERROR_RATE_LIMIT'\r\n        } else {\r\n            code = 'ERROR_UNKNOWN'\r\n        }\r\n        return callback({\r\n            error: {\r\n                code,\r\n                message: body.error || params.response.statusCode\r\n            },\r\n            errorCode: code,\r\n            status: 'ERROR'\r\n        })\r\n    }\r\n}",
        "objectQuery": true,
        "objectRequest": "function objectRequest(params, utils, callback) {\r\n\r\n    if (!params || !params.userapp || !params.appinfo) {\r\n        return callback({\r\n            error: {\r\n                code: 'ERROR_MISSING_PARAM',\r\n                message: 'Userapp or appinfo is missing'\r\n            },\r\n            status: 'ERROR'\r\n        })\r\n    }\r\n    if (!params.parsedData || !params.parsedData.data) {\r\n        return callback({\r\n            error: {\r\n                code: 'ERROR_MISSING_PARAM',\r\n                message: 'pass parsed Data from pollParse'\r\n            },\r\n            status: 'ERROR'\r\n        })\r\n    }\r\n    const authParams = params.userapp.fetchAuthParams(params.appinfo)\r\n    if (!authParams || !authParams.access_token) {\r\n        return callback({\r\n            error: {\r\n                code: 'ERROR_MISSING_PARAM',\r\n                message: 'cannot fetch access_token from fetchAuthParams'\r\n            },\r\n            status: 'ERROR'\r\n        })\r\n    }\r\n    const url = 'https://app.asana.com/api/1.0/projects'\r\n    const parsedData = params.parsedData.data.objects || []\r\n    const options = parsedData\r\n        .filter(p => p && p.gid)\r\n        .map(p => ({\r\n            headers: {\r\n                Authorization: `Bearer ${authParams.access_token}`\r\n            },\r\n            method: 'GET',\r\n            url: `${url}/${p.gid}`\r\n        }))\r\n\r\n    return callback({\r\n        params: JSON.stringify(params),\r\n        status: 'SUCCESS',\r\n        message: 'Built options for request',\r\n        data: { options }\r\n    })\r\n}",
        "pollParse": "function intialPollParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in intialPollParse.\"\r\n        callback(retObj);\r\n            return\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing tasks from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            var uniqueId = hashedParams.workflow.trigger.pollData.data.uniqueId;\r\n\r\n            if(body.data && body.data.length && (body.data[body.data.length - 1].gid || body.data[body.data.length - 1].id) > uniqueId){\r\n                \r\n                var projects = body.data;\r\n\r\n                var newData = projects.filter(project => {\r\n                    return (project.gid) > uniqueId\r\n                });\r\n\r\n                retObj[\"status\"] = \"SUCCESS\";\r\n                retObj[\"data\"] = {};\r\n                retObj[\"data\"][\"pollData\"] = {\r\n                    status: \"SUCCESS\",\r\n                    data: {\r\n                        uniqueId: body.data[body.data.length - 1].id || body.data[body.data.length - 1].gid\r\n                    }\r\n                };\r\n\r\n                retObj[\"data\"][\"objects\"] = newData;\r\n\r\n            } else {\r\n\r\n                retObj['status'] = \"SUCCESS\";\r\n                retObj['data'] = {};\r\n                retObj['data']['objects'] = [];\r\n                retObj['data']['pollData']  = (hashedParams.workflow.trigger || {}).pollData;\r\n\r\n            }\r\n\r\n            \r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
        "pollRequest": "function pollRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/workspaces\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var workspace_id = _.findWhere(hashedParams.workflow.trigger.params, {\r\n      id: \"workspace_id\"\r\n  });\r\n\r\n  workspace_id = workspace_id.value;\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + workspace_id + \"/projects\",\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "type": "poll"
      },
      "webhookType": "workflow"
    },
    {
      "description": "Triggers when a new comment is added to a task",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "message",
      "id": "new-comment",
      "important": true,
      "name": "New Comment On Task",
      "params": [
        {
          "dependsOn": "resource_id",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n            return\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(task){\r\n                    data.push({\r\n                        id:  task.gid || task.id,\r\n                        name: task.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var project_id = hashedParams.params.resource_id;\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + project_id + \"/tasks\",\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true,\r\n      qs:{\r\n        'limit':50\r\n      }\r\n      \r\n    };\r\n    if (hashedParams.query && hashedParams.query.offset) {\r\n      options.qs.offset = hashedParams.query.offset\r\n  \r\n    }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "task_id",
          "inputType": "select",
          "name": "Task",
          "required": false,
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n            return\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(project){\r\n                    data.push({\r\n                        id: project.gid || project.id,\r\n                        name: project.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n    if (hashedParams.query && hashedParams.query.offset) {\r\n      options.qs.offset = hashedParams.query.offset\r\n  \r\n    }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 2,
      "responseFields": [
        {
          "id": "created_at",
          "name": "Comment Created At",
          "type": "String"
        },
        {
          "id": "created_by_id",
          "name": "Comment Created By Id",
          "type": "String"
        },
        {
          "id": "created_by_name",
          "name": "Comment Created By Name",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Comment Id",
          "type": "String"
        },
        {
          "id": "source",
          "name": "Comment Source",
          "type": "String"
        },
        {
          "id": "target_id",
          "name": "Task Id",
          "searchAction": "find-task",
          "searchID": "task_id",
          "searchLabel": "Get Task info",
          "type": "String"
        },
        {
          "id": "text",
          "name": "Comment Text",
          "type": "String"
        },
        {
          "id": "type",
          "name": "Comment Type",
          "type": "String"
        }
      ],
      "sampleData": {
        "created_at": "05-Aug-2019 09:15:00",
        "created_by_id": 840504531510598,
        "created_by_name": "Ratan",
        "gid": "1135026385087801",
        "id": "1135026385087801",
        "resource_subtype": "due_date_changed",
        "resource_type": "story",
        "source": "web",
        "target_id": 1134219505003201,
        "text": "changed the due date to August 20",
        "type": "system"
      },
      "source": {
        "type": "webhook",
        "webhookDeleteParse": "function webhookDeleteParse(hashedParams, hashedUtils, callback) {\r\n\r\n  var retObj = {};\r\n\r\n  if( !(hashedParams || {}).response ){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {\r\n      message: \"response is missing while requesting webhook Delete Request\"\r\n    };\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  if ( ( hashedParams.response.statusCode || {} ) == 200 ) {\r\n    \r\n    retObj.status = \"SUCCESS\";\r\n    callback(retObj);\r\n    return;\r\n      \r\n  } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {\r\n      message: \"error occured while deleting webhook with status code:\" + hashedParams.response.statusCode\r\n    };\r\n    callback(retObj);\r\n    return;\r\n  }\r\n}",
        "webhookDeleteRequest": "function webhookDeleteRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/webhooks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var workflow = hashedParams.workflow;\r\n\r\n  var webhookId = null;\r\n\r\n \r\n  if( workflow && workflow.trigger && workflow.trigger.webHook && workflow.trigger.webHook.status == 'registered' && workflow.trigger.webHook.data) {\r\n\r\n    webhookId = workflow.trigger.webHook.data.gid;\r\n\r\n    if (!webhookId) {\r\n      webhookId = workflow.trigger.webHook.data.gid;\r\n    }\r\n    \r\n  }\r\n\r\n  if ( !webhookId ) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch webhookId from workflow to delete webhook\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n\r\n    method: 'DELETE',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    headers: {\r\n        Authorization: \"Bearer \" + access_token\r\n    },\r\n\r\n    url: path + \"/\" + webhookId,\r\n\r\n    json: true\r\n      \r\n  };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookObjectParse": "function webhookObjectParse(hashedParams, hashedUtils, callback) {\r\n\r\n    var retObj = {};\r\n    var _ = hashedUtils._;\r\n\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in webhookObjectRequest.\"\r\n\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(body.data.type !== \"comment\"){\r\n                retObj.status = \"SUCCESS\";\r\n                retObj.data = [];\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n            var params = {};\r\n\r\n            var dates = {\r\n                \"created_at\": true\r\n            };\r\n\r\n            var keys = {\r\n                text: true,\r\n                type: true,\r\n                source: true,\r\n                id: true,\r\n                gid : true\r\n            };\r\n\r\n            _.each(body.data, function(data, key){\r\n                if(dates[key]){\r\n                    if(data){\r\n                        params[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\r\n                    }\r\n                } else if(key === \"created_by\"){\r\n                    if(data){\r\n                        _.each(data, function(wData, wKey){\r\n                            if(wKey == 'gid')\r\n                                params[\"created_by_id\"] = wData;\r\n                            else\r\n                                params[\"created_by_\" + wKey] = wData;\r\n                        });\r\n                    }\r\n                } else if(key === \"target\"){\r\n\r\n                    if(data){\r\n                        _.each(data, function(tData, tKey){\r\n                            if(tKey === \"id\" || tKey === \"gid\"){\r\n                                if(tData){\r\n                                    params[\"target_id\"] = tData;\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                } else if(keys[key]){\r\n                    if(data !== null && data !== undefined){\r\n                        if(key == 'gid')    \r\n                            params[\"id\"] = data;\r\n                        else\r\n                            params[key] = data;\r\n                    }\r\n                }\r\n            });\r\n\r\n            retObj.status = \"SUCCESS\";\r\n            retObj.data = params;\r\n\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n\r\n        }\r\n    }\r\n    callback(retObj);\r\n    return\r\n}",
        "webhookObjectQuery": true,
        "webhookObjectRequest": "function webhookObjectRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n  \r\n  var path = \"/stories\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var story = hashedParams.parsedData.data.response;\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + story.resource.gid,\r\n\r\n     headers: {\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: [options]};\r\n\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookRegisterParse": "function webhookRegisterParse(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {message: \"response or body to parse is missing while requesting in dynamicValueSourceParse\"};\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if (( hashedParams.response.statusCode || {} ) == 200 || ( hashedParams.response.statusCode || {} ) == 201) {\r\n      var parsed = hashedParams.body;\r\n      retObj.status = \"SUCCESS\";\r\n      retObj.data = {\r\n          webHook:{\r\n            status: 'registered',\r\n            data: parsed.data\r\n          }\r\n        };\r\n\r\n      callback(retObj);\r\n      return;\r\n\r\n  } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n } else if (hashedParams.response.statusCode == 400) {\r\n\r\n   var message = hashedParams && hashedParams.body && hashedParams.body.errors.map(err => err.message).join()\r\n   message = message.includes('Unknown object') ? 'Does the selected project exist?' : message\r\n   retObj.status = \"ERROR\";\r\n   retObj.error = { message };\r\n   retObj.data =  { webHook : {} };\r\n   retObj.data.webHook.status = 'Failed';\r\n   retObj.data.webHook.data = { message };\r\n   callback(retObj);\r\n\r\n } else {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.data=  {};\r\n    retObj.error = {message: \"error occured with status code:\"+hashedParams.response.statusCode};\r\n    retObj.data.webHook = {};\r\n    retObj.data.webHook.status = 'Failed';\r\n    retObj.data.webHook.data = {message: \"Error while requesting for webhook registration with status code \" + hashedParams.response.statusCode + \" body \" + JSON.stringify(hashedParams.body)};\r\n    callback(retObj);\r\n    return\r\n  }\r\n}",
        "webhookRegisterRequest": "function webhookRegisterRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/webhooks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var resource_id = null;\r\n\r\n  var triggerParams = hashedParams.workflow.trigger.params || {};\r\n\r\n  if(triggerParams && triggerParams.length){\r\n    triggerParams.forEach(function(param){\r\n      if(param.id === \"resource_id\"){\r\n        resource_id = param.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  if(!resource_id){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Resource Id is missing from Workflow\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n      method: 'POST',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      body: {\r\n          \"data\": {\r\n            \"resource\": resource_id,\r\n            \"target\": process.env['webhookUrl'] + '/webhook/' + hashedParams.workflow._id\r\n          }\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  \r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookTriggerParse": "function webhookTriggerParse(hashedParams, hashedUtils, callback){\r\n    \r\n    var retObj = {};\r\n\r\n    var _ = hashedUtils._;\r\n\r\n     if(hashedParams.request.headers[\"x-hook-secret\"] && _.isEmpty(hashedParams.request.body)){\r\n\r\n        retObj.status = \"SKIP\";\r\n        retObj.message = \"Handshake\";\r\n        retObj.response = {};\r\n        retObj.response.headers = {\r\n            \"x-hook-secret\": hashedParams.request.headers[\"x-hook-secret\"]\r\n        };\r\n\r\n        callback(retObj);\r\n        return;\r\n\r\n    } else if(hashedParams[\"body\"].events.length) {\r\n\r\n        var story = null;\r\n\r\n        var task_id = _.findWhere(hashedParams.workflow.trigger.params, {\r\n            id: \"task_id\"\r\n        });\r\n\r\n        task_id = task_id ? task_id.value : null;\r\n\r\n        hashedParams.body.events.forEach(function(event){\r\n            if(event.resource.resource_type === \"story\" && event.action === \"added\" && task_id){\r\n                if(event.parent.gid == task_id) {\r\n                    story = event;\r\n                }\r\n                \r\n            } else if (event.resource.resource_type === \"story\" && event.action === \"added\") {\r\n                story = event;\r\n            }\r\n        });\r\n\r\n        if(story){\r\n\r\n            retObj.data = {response: story};\r\n            retObj.status = \"SUCCESS\";\r\n            callback(retObj);\r\n            return\r\n            \r\n        } else{\r\n\r\n            retObj.status = \"SKIP\";\r\n            retObj.message = \"Unwanted Resource\"; \r\n            callback(retObj);\r\n            return;\r\n        }        \r\n        \r\n    } else if(hashedParams[\"body\"].events.length === 0) {\r\n\r\n        retObj.status = \"SKIP\";\r\n        retObj.message = \"TEST PING\";\r\n\r\n        callback(retObj);\r\n        return;\r\n\r\n    } else {\r\n        retObj.status = \"ERROR\";\r\n        retObj.error = {\r\n            message: \"Error Occured\"\r\n        }\r\n        callback(retObj);\r\n        return\r\n    }\r\n\r\n}"
      },
      "webhookType": "workflow"
    },
    {
      "description": "Triggers when a new subtask is added to a task",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "activity",
      "id": "new-subtask",
      "important": true,
      "name": "New Subtask",
      "params": [
        {
          "dependsOn": "resource_id",
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n                return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(task){\r\n                    data.push({\r\n                        id: task.gid || task.id,\r\n                        name: task.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var project_id = hashedParams.params.resource_id;\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + project_id + \"/tasks\",\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true,\r\n      qs:{\r\n          'limit':50\r\n      }\r\n      \r\n    };\r\n    if (hashedParams.query && hashedParams.query.offset) {\r\n      options.qs.offset = hashedParams.query.offset\r\n  \r\n    }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "task_id",
          "inputType": "select",
          "name": "Task",
          "required": false,
          "type": "String"
        },
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(project){\r\n                    data.push({\r\n                        id: project.gid || project.id,\r\n                        name: project.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n    if (hashedParams.query && hashedParams.query.offset) {\r\n      options.qs.offset = hashedParams.query.offset\r\n  \r\n    }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "description": "Due Date and Time",
          "id": "due_at",
          "name": "Subtask Due At",
          "type": "String"
        },
        {
          "description": "Due Date",
          "id": "due_on",
          "name": "Subtask Due On",
          "type": "String"
        },
        {
          "id": "assignee",
          "name": "Subtask Assignee Name",
          "type": "String"
        },
        {
          "id": "assignee_id",
          "name": "Subtask Assignee Id",
          "type": "String"
        },
        {
          "id": "assignee_status",
          "name": "Subtask Assignee Status",
          "type": "String"
        },
        {
          "id": "completed",
          "name": "Subtask Completed",
          "type": "String"
        },
        {
          "id": "completed_at",
          "name": "Subtask Completed At",
          "type": "String"
        },
        {
          "id": "created_at",
          "name": "Subtask Created At",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Subtask Id",
          "type": "String"
        },
        {
          "id": "modified_at",
          "name": "Subtask Modified At",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Subtask Name",
          "type": "String"
        },
        {
          "id": "notes",
          "name": "Subtask Notes",
          "type": "String"
        },
        {
          "id": "parent_id",
          "name": "Task Id",
          "type": "String"
        },
        {
          "id": "parent_name",
          "name": "Task Name",
          "type": "String"
        },
        {
          "id": "tags",
          "name": "Subtask Tags",
          "type": "String"
        },
        {
          "id": "workspace_id",
          "name": "Subtask Workspace Id",
          "type": "String"
        },
        {
          "id": "workspace_name",
          "name": "Subtask Workspace Name",
          "type": "String"
        }
      ],
      "sampleData": {
        "assignee": "Ratan",
        "assignee_id": 840504531510598,
        "assignee_status": "inbox",
        "completed": false,
        "completed_at": null,
        "created_at": "05-Aug-2019 09:15:00",
        "due_at": null,
        "due_on": "19-Aug-2019",
        "gid": "1134219505003204",
        "id": 1134219505003204,
        "modified_at": "05-Aug-2019 09:15:00",
        "name": "3rd subtask",
        "notes": "notes",
        "parent_gid": "1134219505003201",
        "parent_id": 1134219505003201,
        "parent_name": "party-task-1-**",
        "tags": "",
        "workspace_id": 840493337087127,
        "workspace_name": "Automate"
      },
      "source": {
        "type": "webhook",
        "webhookDeleteParse": "function webhookDeleteParse(hashedParams, hashedUtils, callback) {\r\n\r\n  var retObj = {};\r\n\r\n  if( !(hashedParams || {}).response ){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {\r\n      message: \"response is missing while requesting webhook Delete Request\"\r\n    };\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  if ( ( hashedParams.response.statusCode || {} ) == 200 ) {\r\n    \r\n    retObj.status = \"SUCCESS\";\r\n    callback(retObj);\r\n    return;\r\n      \r\n  } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {\r\n      message: \"error occured while deleting webhook with status code:\" + hashedParams.response.statusCode\r\n    };\r\n    callback(retObj);\r\n    return;\r\n  }\r\n}",
        "webhookDeleteRequest": "function webhookDeleteRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/webhooks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var workflow = hashedParams.workflow;\r\n\r\n  var webhookId = null;\r\n\r\n \r\n  if( workflow && workflow.trigger && workflow.trigger.webHook && workflow.trigger.webHook.status == 'registered' && workflow.trigger.webHook.data) {\r\n\r\n    webhookId = workflow.trigger.webHook.data.gid;\r\n\r\n    if (!webhookId) {\r\n      webhookId = workflow.trigger.webHook.data.gid;\r\n    }\r\n    \r\n  }\r\n\r\n  if ( !webhookId ) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch webhookId from workflow to delete webhook\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n\r\n    method: 'DELETE',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    headers: {\r\n        Authorization: \"Bearer \" + access_token\r\n    },\r\n\r\n    url: path + \"/\" + webhookId,\r\n\r\n    json: true\r\n      \r\n  };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookObjectParse": "function webhookObjectParse(hashedParams, hashedUtils, callback) {\r\n\r\n    var retObj = {};\r\n    var _ = hashedUtils._;\r\n\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in webhookObjectRequest.\"\r\n\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if (body.data && (body.data.parent === null || Object.keys(body.data.parent).length === 0)) {\r\n                retObj.status = \"SUCCESS\";\r\n                retObj.data = [];\r\n\r\n              return callback(retObj);\r\n            }\r\n           \r\n            if ( body.data.parent.gid !== hashedParams.step.parent.gid) {\r\n               \r\n                retObj.status = \"SUCCESS\";\r\n                retObj.data = [];\r\n\r\n               return callback(retObj);   \r\n            }\r\n\r\n            var params = {};\r\n\r\n            var dates = {\r\n                \"created_at\": true,\r\n                \"modified_at\": true,\r\n                \"due_on\": true,\r\n                \"due_at\": true,\r\n                \"completed_at\": true\r\n            };\r\n\r\n            var keys = {\r\n                \"id\": true,\r\n                \"name\": true,\r\n                \"completed\": true,\r\n                \"assignee_status\": true,\r\n                \"notes\": true,\r\n                \"gid\" : true\r\n            };\r\n\r\n            _.each(body.data, function (data, key) {\r\n                if (dates[key]) {\r\n                    if (data) {\r\n                        params[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\r\n                    }\r\n                } else if(key === \"workspace\"){\r\n                    if(data){\r\n                        _.each(data, function(wData, wKey){\r\n                            if(wKey == \"gid\")\r\n                                params[\"workspace_id\"] = wData;\r\n                            else\r\n                                params[\"workspace_\" + wKey] = wData;\r\n                        });\r\n                    }\r\n                } else if (key === \"tags\") {\r\n\r\n                    if (data && data.length) {\r\n                        var tags = \"\";\r\n                        data.forEach(function (tag) {\r\n                            tags += tag.name + \", \"\r\n                        });\r\n                        params[key] = tags.slice(0, tags.length - 2);\r\n                    }\r\n\r\n                } else if(key === \"parent\"){\r\n                    if(data){\r\n                        _.each(data, function(wData, wKey){\r\n                            if(wKey == \"gid\")\r\n                            params[\"parent_id\"] = wData;\r\n                        else\r\n                            params[\"parent_\" + wKey] = wData;\r\n                        });\r\n                    }\r\n                } else if (key === \"assignee\") {\r\n\r\n                            if(data){\r\n                                params[key] = data.name;\r\n                                params[key + \"_id\"] = data.gid || data.id;\r\n                            }\r\n\r\n                } else if(keys[key]){\r\n                    if(data !== null && data !== undefined){\r\n                        if(key == 'gid')    \r\n                            params[\"id\"] = data;\r\n                        else\r\n                            params[key] = data;\r\n                    }\r\n                }\r\n            });\r\n\r\n            retObj.status = \"SUCCESS\";\r\n            retObj.data = params;\r\n\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n                code,\r\n                message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else if (hashedParams.response.statusCode === 403) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n\r\n        }\r\n    }\r\n    callback(retObj);\r\n    return\r\n}",
        "webhookObjectQuery": true,
        "webhookObjectRequest": "function webhookObjectRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/tasks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var task = hashedParams.parsedData.data.response;\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + task.resource.gid,\r\n\r\n     headers: {\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n    retObj.step = { 'parent':task.parent }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: [options]};\r\n\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookRegisterParse": "function webhookRegisterParse(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {message: \"response or body to parse is missing while requesting in dynamicValueSourceParse\"};\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if (( hashedParams.response.statusCode || {} ) == 200 || ( hashedParams.response.statusCode || {} ) == 201) {\r\n      var parsed = hashedParams.body;\r\n      retObj.status = \"SUCCESS\";\r\n      retObj.data = {\r\n          webHook:{\r\n            status: 'registered',\r\n            data: parsed.data\r\n          }\r\n        };\r\n\r\n      callback(retObj);\r\n      return;\r\n\r\n  } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n  } else if (hashedParams.response.statusCode == 400) {\r\n\r\n    var message = hashedParams && hashedParams.body && hashedParams.body.errors.map(err => err.message).join()\r\n    message = message.includes('Unknown object') ? 'Do the selected project and task exist?' : message\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = { message };\r\n    retObj.data =  { webHook : {} };\r\n    retObj.data.webHook.status = 'Failed';\r\n    retObj.data.webHook.data = { message };\r\n    callback(retObj);\r\n\r\n  } else {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.data=  {};\r\n    retObj.error = {message: \"error occured with status code:\"+hashedParams.response.statusCode};\r\n    retObj.data.webHook = {};\r\n    retObj.data.webHook.status = 'Failed';\r\n    retObj.data.webHook.data = {message: \"Error while requesting for webhook registration with status code \" + hashedParams.response.statusCode + \" body \" + JSON.stringify(hashedParams.body)};\r\n    callback(retObj);\r\n    return\r\n  }\r\n}",
        "webhookRegisterRequest": "function webhookRegisterRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/webhooks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if (!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var resource_id = null;\r\n\r\n  var triggerParams = hashedParams.workflow.trigger.params || {};\r\n\r\n  if (triggerParams && triggerParams.length) {\r\n    var resource = hashedUtils._.findWhere(hashedParams.workflow.trigger.params, {\r\n      id: \"task_id\"\r\n    });\r\n    if (resource) {\r\n      resource_id = resource.value;\r\n    }\r\n\r\n    if (!resource_id) {\r\n      var resource = hashedUtils._.findWhere(triggerParams, {\r\n        id: \"resource_id\"\r\n      });\r\n      if (resource) {\r\n        resource_id = resource.value;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  if (!resource_id) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Resource Id is missing from Workflow\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n    method: 'POST',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    url: path,\r\n\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    body: {\r\n      \"data\": {\r\n        \"resource\": resource_id,\r\n        \"target\": process.env['webhookUrl'] + '/webhook/' + hashedParams.workflow._id\r\n      }\r\n    },\r\n\r\n    json: true\r\n\r\n  };\r\n  console.log(options.body.data)\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = { options: options };\r\n\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookTriggerParse": "function webhookTriggerParse(hashedParams, hashedUtils, callback){\r\n  \r\n    var retObj = {};\r\n\r\n    var _ = hashedUtils._;\r\n\r\n     if(hashedParams.request.headers[\"x-hook-secret\"] && _.isEmpty(hashedParams.request.body)){\r\n\r\n        retObj.status = \"SKIP\";\r\n        retObj.message = \"Handshake\";\r\n        retObj.response = {};\r\n        retObj.response.headers = {\r\n            \"x-hook-secret\": hashedParams.request.headers[\"x-hook-secret\"]\r\n        };\r\n\r\n        callback(retObj);\r\n        return;\r\n\r\n    } else if(hashedParams[\"body\"].events.length) {\r\n\r\n        var resource_id = _.findWhere(hashedParams.workflow.trigger.params, {\r\n            id: \"task_id\"\r\n        });\r\n\r\n        resource_id = (resource_id || {}).value;\r\n\r\n        var task = null;\r\n\r\n        hashedParams.body.events.forEach(function(event){\r\n            if(event.resource.resource_type === \"task\" && event.action === \"added\" && (!resource_id || (event.parent.gid == resource_id))){\r\n                task = event;\r\n            }\r\n        });\r\n\r\n        if(task){\r\n\r\n            retObj.data = {response: task};\r\n            retObj.status = \"SUCCESS\";\r\n            callback(retObj);\r\n            return\r\n            \r\n        } else{\r\n\r\n            retObj.status = \"SKIP\";\r\n            retObj.message = \"Unwanted Resource\"; \r\n            callback(retObj);\r\n            return;\r\n        }        \r\n        \r\n    } else if(hashedParams[\"body\"].events.length === 0) {\r\n\r\n        retObj.status = \"SKIP\";\r\n        retObj.message = \"TEST PING\";\r\n\r\n        callback(retObj);\r\n        return;\r\n\r\n    } else {\r\n        retObj.status = \"ERROR\";\r\n        retObj.error = {\r\n            message: \"Error Occured\"\r\n        }\r\n        callback(retObj);\r\n        return\r\n    }\r\n\r\n}"
      },
      "webhookType": "workflow"
    },
    {
      "description": "Triggers when a new task is added to project",
      "dynamicResponseFields": true,
      "dynamicResponseFieldsDependsOn": [
        "resource_id"
      ],
      "dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(hashedParams, hashedUtils, callback) {\r\n\r\n  var retObj = {};\r\n  var responseObjArray = [];\r\n  // Input Validation\r\n  if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n    retObj['status'] = \"ERROR\";\r\n    retObj['error'] = {};\r\n    retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n    retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n    callback(retObj);\r\n                return;\r\n  } else {\r\n    var response = hashedParams['response'];\r\n    var data = [];\r\n\r\n    if (response['statusCode'] === 200) {\r\n\r\n      var body = hashedParams[\"body\"];\r\n\r\n      if(!(body || {}) || !(body.data || {}) ){\r\n        retObj[\"status\"] = \"ERROR\";\r\n        retObj[\"error\"] = {};\r\n        retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n        callback(retObj);\r\n        return;\r\n      }\r\n\r\n      if(body.data && body.data.length){\r\n        body.data.forEach(function(project){\r\n          data.push({\r\n            id: project.custom_field.gid | project.custom_field.id,\r\n            name: project.custom_field.name\r\n          });\r\n        });\r\n      }\r\n\r\n      retObj[\"status\"] = \"SUCCESS\";\r\n      retObj[\"data\"] = data;\r\n\r\n      callback(retObj);\r\n      return\r\n\r\n\r\n      // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n\r\n      var code = \"ERROR_AUTH_REFRESH\";\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = code;\r\n      retObj.error = {\r\n        code,\r\n        message: \"error occured due to expiration of token\"\r\n      };\r\n      callback(retObj);\r\n      return\r\n\r\n    } else if (hashedParams.response.statusCode === 402){\r\n\r\n      retObj[\"status\"] = \"SUCCESS\";\r\n      retObj[\"data\"] = [];\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Forbidden\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    }  else if (hashedParams.response.statusCode === 404){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Not found\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else if (hashedParams.response.statusCode === 429){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Rate Limit Enforced\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else {\r\n      retObj['status'] = \"ERROR\";\r\n      retObj['error'] = {};\r\n      retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n      callback(retObj);\r\n      return;\r\n\r\n    }\r\n  }\r\n\r\n}",
      "dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var resource_id = null;\r\n\r\n  var triggerParams = hashedParams.params || {};\r\n\r\n  if(triggerParams && triggerParams.length){\r\n    triggerParams.forEach(function(param){\r\n      if(param.id === \"resource_id\"){\r\n        resource_id = param.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  if(!resource_id){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Project Id is missing from Workflow\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: \"https://app.asana.com/api/1.0\",\r\n\r\n    url: \"/projects/\" + resource_id + \"/custom_field_settings\",\r\n\r\n    headers: {\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true\r\n\r\n  };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
      "entity": "activity",
      "id": "new-task",
      "important": true,
      "name": "New Task",
      "params": [
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n                return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(project){\r\n                    data.push({\r\n                        id: project.gid || project.id,\r\n                        name: project.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n    if (hashedParams.query && hashedParams.query.offset) {\r\n      options.qs.offset = hashedParams.query.offset\r\n  \r\n    }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 1,
      "responseFields": [
        {
          "description": "Comma separated list if task belongs to multiple projects",
          "id": "projectIds",
          "name": "Task Project Id",
          "type": "String"
        },
        {
          "description": "Comma separated list if task belongs to multiple projects",
          "id": "projectNames",
          "name": "Task Project Name",
          "type": "String"
        },
        {
          "description": "Due Date and Time",
          "id": "due_at",
          "name": "Task Due At",
          "type": "String"
        },
        {
          "description": "Due Date",
          "id": "due_on",
          "name": "Task Due On",
          "type": "String"
        },
        {
          "id": "assignee",
          "name": "Task Assignee Name",
          "type": "String"
        },
        {
          "id": "assignee_id",
          "name": "Task Assignee Id",
          "type": "String"
        },
        {
          "id": "assignee_status",
          "name": "Task Assignee Status",
          "type": "String"
        },
        {
          "id": "completed",
          "name": "Task Completed",
          "type": "String"
        },
        {
          "id": "completed_at",
          "name": "Task Completed At",
          "type": "String"
        },
        {
          "id": "created_at",
          "name": "Task Created At",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Task Id",
          "type": "String"
        },
        {
          "id": "modified_at",
          "name": "Task Modified At",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Task Name",
          "type": "String"
        },
        {
          "id": "notes",
          "name": "Task Notes",
          "type": "String"
        },
        {
          "id": "tags",
          "name": "Task Tags",
          "type": "String"
        },
        {
          "id": "workspace_id",
          "name": "Task Workspace Id",
          "type": "String"
        },
        {
          "id": "workspace_name",
          "name": "Task Workspace Name",
          "type": "String"
        }
      ],
      "sampleData": {
        "assignee": "Ratan",
        "assignee_id": 840504531510598,
        "assignee_status": "inbox",
        "completed": false,
        "completed_at": null,
        "created_at": "05-Aug-2019 09:15:00",
        "due_at": null,
        "due_on": "19-Aug-2019",
        "gid": "1134219505003204",
        "id": 1134219505003204,
        "modified_at": "05-Aug-2019 09:15:00",
        "name": "3rd subtask",
        "notes": "notes",
        "tags": "",
        "workspace_id": 840493337087127,
        "workspace_name": "Automate"
      },
      "source": {
        "type": "webhook",
        "webhookDeleteParse": "function webhookDeleteParse(hashedParams, hashedUtils, callback) {\r\n\r\n  var retObj = {};\r\n\r\n  if( !(hashedParams || {}).response ){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {\r\n      message: \"response is missing while requesting webhook Delete Request\"\r\n    };\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  if ( ( hashedParams.response.statusCode || {} ) == 200 ) {\r\n    \r\n    retObj.status = \"SUCCESS\";\r\n    callback(retObj);\r\n    return;\r\n      \r\n  } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {\r\n      message: \"error occured while deleting webhook with status code:\" + hashedParams.response.statusCode\r\n    };\r\n    callback(retObj);\r\n    return;\r\n  }\r\n}",
        "webhookDeleteRequest": "function webhookDeleteRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/webhooks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var workflow = hashedParams.workflow;\r\n\r\n  var webhookId = null;\r\n\r\n \r\n  if( workflow && workflow.trigger && workflow.trigger.webHook && workflow.trigger.webHook.status == 'registered' && workflow.trigger.webHook.data) {\r\n\r\n    webhookId = workflow.trigger.webHook.data.gid;\r\n\r\n    if (!webhookId) {\r\n      webhookId = workflow.trigger.webHook.data.gid;\r\n    }\r\n    \r\n  }\r\n\r\n  if ( !webhookId ) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch webhookId from workflow to delete webhook\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n\r\n    method: 'DELETE',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    headers: {\r\n        Authorization: \"Bearer \" + access_token\r\n    },\r\n\r\n    url: path + \"/\" + webhookId,\r\n\r\n    json: true\r\n      \r\n  };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookObjectParse": "function webhookObjectParse(hashedParams, hashedUtils, callback) {\r\n\r\n    var retObj = {};\r\n    var _ = hashedUtils._;\r\n\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in webhookObjectRequest.\"\r\n\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            var params = {};\r\n\r\n            var dates = {\r\n                \"created_at\": true,\r\n                \"modified_at\": true,\r\n                \"due_at\": true,\r\n                \"due_on\": true,\r\n                \"completed_at\":true\r\n            };\r\n\r\n            var keys = {\r\n                \"id\": true,\r\n                \"name\": true,\r\n                \"completed\": true,\r\n                \"parent\": true,\r\n                \"assignee_status\": true,\r\n                \"notes\": true,\r\n                \"gid\": true\r\n            };\r\n\r\n            _.each(body.data, function(data, key){\r\n                if(dates[key]){\r\n                    if(data){\r\n                        params[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\r\n                    }\r\n                } else if(key === \"workspace\"){\r\n                    if(data){\r\n                        _.each(data, function(wData, wKey){\r\n                            if(wKey == \"gid\")\r\n                                params[\"workspace_id\"] = wData;\r\n                            else\r\n                                params[\"workspace_\" + wKey] = wData;\r\n                        });\r\n                    }\r\n                } else if(key === \"tags\"){\r\n\r\n                    if(data && data.length){\r\n                        var tags = \"\";\r\n                        data.forEach(function(tag) {\r\n                            tags += tag.name + \", \"\r\n                        });\r\n                        params[key] = tags.slice(0, tags.length - 2);\r\n                    }\r\n\r\n                }else if(key === \"parent\"){\r\n                    if(data && typeof data === 'object' && data.constructor === Object){\r\n                        _.each(data, function(wData, wKey){\r\n                             if(wKey == \"gid\")\r\n                                 params[\"parent_id\"] = wData;\r\n                             else\r\n                                 params[\"parent_\" + wKey] = wData;\r\n                        });\r\n                    }\r\n                    params[\"parent\"] = data\r\n                } else if(key === \"assignee\"){\r\n\r\n                            if(data){\r\n                                params[key] = data.name,\r\n                                params[key + \"_id\"] = data.gid || data.id;\r\n                            }\r\n\r\n                } else if(key === \"custom_fields\" && data instanceof Array){\r\n\r\n                    if(data && data.length){\r\n\r\n                      data.forEach(field => {\r\n\r\n                        if (field.type === 'enum') {\r\n                          params[field.gid || field.id] = field.enum_value ? field.enum_value.name : null\r\n                        } else {\r\n                          params[field.gid || field.id] = field[field.type + '_value']\r\n                        }\r\n\r\n                      })\r\n\r\n                    }\r\n\r\n                } else if(key === \"projects\") {\r\n\r\n                    if(data instanceof Array && data.length) {\r\n                        params['projectIds'] = data.map(pro => pro.gid || pro.id).join()\r\n                        params['projectNames'] = data.map(pro => pro.name).join()\r\n                    }\r\n\r\n                } else if(keys[key]){\r\n                    if(data !== null && data !== undefined){\r\n                        if(key == 'gid')\r\n                             params['id'] = data\r\n                        else    \r\n                             params[key] = data;\r\n                    }\r\n                }\r\n            });\r\n\r\n            retObj.status = \"SUCCESS\";\r\n            retObj.data = params;\r\n\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n\r\n        }\r\n    }\r\n    callback(retObj);\r\n    return\r\n}",
        "webhookObjectQuery": true,
        "webhookObjectRequest": "function webhookObjectRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/tasks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var task = hashedParams.parsedData.data.response;\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + task.resource.gid,\r\n\r\n     headers: {\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: [options]};\r\n\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookRegisterParse": "function webhookRegisterParse(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {message: \"response or body to parse is missing while requesting in dynamicValueSourceParse\"};\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if (( hashedParams.response.statusCode || {} ) == 200 || ( hashedParams.response.statusCode || {} ) == 201) {\r\n      var parsed = hashedParams.body;\r\n      retObj.status = \"SUCCESS\";\r\n      retObj.data = {\r\n          webHook:{\r\n            status: 'registered',\r\n            data: parsed.data\r\n          }\r\n        };\r\n\r\n      callback(retObj);\r\n      return;\r\n\r\n  } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n  } else if (hashedParams.response.statusCode == 400) {\r\n\r\n    var message = hashedParams && hashedParams.body && hashedParams.body.errors.map(err => err.message).join()\r\n    message = message.includes('Unknown object') ? 'Does the selected project exist?' : message\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = { message };\r\n    retObj.data =  { webHook : {} };\r\n    retObj.data.webHook.status = 'Failed';\r\n    retObj.data.webHook.data = { message };\r\n    callback(retObj);\r\n\r\n  } else {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.data=  {};\r\n    retObj.error = {message: \"error occured with status code:\"+hashedParams.response.statusCode};\r\n    retObj.data.webHook = {};\r\n    retObj.data.webHook.status = 'Failed';\r\n    retObj.data.webHook.data = {message: \"Error while requesting for webhook registration with status code \" + hashedParams.response.statusCode + \" body \" + JSON.stringify(hashedParams.body)};\r\n    callback(retObj);\r\n    return\r\n  }\r\n}",
        "webhookRegisterRequest": "function webhookRegisterRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/webhooks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var resource_id = null;\r\n\r\n  var triggerParams = hashedParams.workflow.trigger.params || {};\r\n\r\n  if(triggerParams && triggerParams.length){\r\n    triggerParams.forEach(function(param){\r\n      if(param.id === \"resource_id\"){\r\n        resource_id = param.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  if(!resource_id){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Resource Id is missing from Workflow\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n      method: 'POST',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      body: {\r\n          \"data\": {\r\n            \"resource\": resource_id,\r\n            \"target\": process.env['webhookUrl'] + '/webhook/' + hashedParams.workflow._id\r\n          }\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  \r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookTriggerParse": "function webhookTriggerParse(hashedParams, hashedUtils, callback){\r\n    \r\n    var retObj = {};\r\n\r\n    var _ = hashedUtils._;\r\n\r\n     if(hashedParams.request.headers[\"x-hook-secret\"] && _.isEmpty(hashedParams.request.body)){\r\n\r\n        retObj.status = \"SKIP\";\r\n        retObj.message = \"Handshake\";\r\n        retObj.response = {};\r\n        retObj.response.headers = {\r\n            \"x-hook-secret\": hashedParams.request.headers[\"x-hook-secret\"]\r\n        };\r\n\r\n        callback(retObj);\r\n        return;\r\n\r\n    } else if(hashedParams[\"body\"].events.length) {\r\n\r\n        var resource_id = _.findWhere(hashedParams.workflow.trigger.params, {\r\n            id: \"resource_id\"\r\n        });\r\n\r\n        resource_id = resource_id.value;\r\n\r\n        var task = null;\r\n\r\n        hashedParams.body.events.forEach(function(event){\r\n            if(event.resource.resource_type === \"task\" && event.action === \"added\" && event.parent.gid == resource_id){\r\n                task = event;\r\n            }\r\n        });\r\n\r\n        if(task){\r\n\r\n            retObj.data = {response: task};\r\n            retObj.status = \"SUCCESS\";\r\n            callback(retObj);\r\n            return\r\n            \r\n        } else{\r\n\r\n            retObj.status = \"SKIP\";\r\n            retObj.message = \"Unwanted Resource\"; \r\n            callback(retObj);\r\n            return;\r\n        }\r\n        \r\n        \r\n    } else if(hashedParams[\"body\"].events.length === 0) {\r\n\r\n        retObj.status = \"SKIP\";\r\n        retObj.message = \"TEST PING\";\r\n\r\n        callback(retObj);\r\n        return;\r\n\r\n    } else {\r\n        retObj.status = \"ERROR\";\r\n        retObj.error = {\r\n            message: \"Error Occured\"\r\n        }\r\n        callback(retObj);\r\n        return\r\n    }\r\n\r\n}"
      },
      "webhookType": "workflow"
    },
    {
      "description": "Triggers when a specified tag is added to a task",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "activity",
      "id": "new-tag",
      "name": "Tag added to Task",
      "params": [
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n                return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing tags from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No tags Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(tag){\r\n                    data.push({\r\n                        id: tag.gid || tag.id,\r\n                        name: tag.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/tags\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n    if (hashedParams.query && hashedParams.query.offset) {\r\n      options.qs.offset = hashedParams.query.offset\r\n  \r\n    }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "tag_id",
          "inputType": "select",
          "name": "Tag",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 3,
      "responseFields": [
        {
          "id": "assignee",
          "name": "Task Assignee",
          "type": "String"
        },
        {
          "id": "assignee_status",
          "name": "Task Assignee Status",
          "type": "String"
        },
        {
          "id": "completed",
          "name": "Task Completed",
          "type": "String"
        },
        {
          "id": "completed_at",
          "name": "Task Completed At",
          "type": "String"
        },
        {
          "id": "created_at",
          "name": "Task Created At",
          "type": "String"
        },
        {
          "id": "due_on",
          "name": "Task Due On",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Task Id",
          "type": "String"
        },
        {
          "id": "modified_at",
          "name": "Task Modified At",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Task Name",
          "type": "String"
        },
        {
          "id": "notes",
          "name": "Task Notes",
          "type": "String"
        },
        {
          "id": "parent",
          "name": "Task's Parent",
          "type": "String"
        },
        {
          "id": "parent_gid",
          "name": "Task's Parent GID",
          "type": "String"
        },
        {
          "id": "parent_id",
          "name": "Task's Parent Id",
          "type": "String"
        },
        {
          "id": "parent_name",
          "name": "Task's Parent Name",
          "type": "String"
        },
        {
          "id": "tags",
          "name": "Task Tags",
          "type": "String"
        },
        {
          "id": "workspace_id",
          "name": "Task Workspace Id",
          "type": "String"
        },
        {
          "id": "workspace_name",
          "name": "Task Workspace Name",
          "type": "String"
        }
      ],
      "sampleData": {
        "assignee": "Ratan",
        "assignee_id": 840504531510598,
        "assignee_status": "inbox",
        "completed": false,
        "completed_at": null,
        "created_at": "05-Aug-2019 09:15:00",
        "due_at": null,
        "due_on": "19-Aug-2019",
        "gid": "1134219505003204",
        "id": 1134219505003204,
        "modified_at": "05-Aug-2019 09:15:00",
        "name": "3rd subtask",
        "notes": "notes",
        "parent_gid": "1134219505003201",
        "parent_id": 1134219505003201,
        "parent_name": "party-task-1-**",
        "tags": "tag1",
        "workspace_id": 840493337087127,
        "workspace_name": "Automate"
      },
      "source": {
        "initialPollParse": "function intialPollParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in intialPollParse.\"\r\n        callback(retObj);\r\n        return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing tasks from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            var polledIds = [];\r\n\r\n            if(body.data && body.data.length){\r\n                for(var i = 0 ; i < body.data.length ; i++) {\r\n                    if (i === 3) {\r\n                        break;\r\n                    }\r\n                    polledIds.push(body.data[i].id || body.data[i].gid)\r\n                }\r\n            }\r\n            else {\r\n                retObj['status'] = 'ERROR';\r\n                retObj['error'] = {\r\n                    message: 'No tasks found for the provided tag, please tag a few tasks to generate the poll data'\r\n                }\r\n                return callback(retObj)\r\n            }\r\n\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = {};\r\n            retObj[\"data\"][\"pollData\"] = {\r\n                status: \"SUCCESS\",\r\n                data: {\r\n                    polledIds\r\n                }\r\n            };\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
        "initialPollRequest": "function intialPollRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/tags\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var tag_id = _.findWhere(hashedParams.workflow.trigger.params, {\r\n      id: \"tag_id\"\r\n  });\r\n\r\n  tag_id = tag_id.value;\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + tag_id + \"/tasks\",\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "objectParse": "function objectParse(params, utils, callback) {\r\n\r\n    var retObj = {};\r\n    if (!params || !params.response || !params.body) {\r\n        return callback({\r\n            error: {\r\n                code: 'ERROR_MISSING_PARAM',\r\n                message: 'response or body to parse is missing'\r\n            },\r\n            status: 'ERROR'\r\n        })\r\n    }\r\n    if (params.response.statusCode === 200) {\r\n        \r\n        var parsed = {};\r\n        var _ = utils._;\r\n\r\n        var body = JSON.parse(params.body);\r\n\r\n            var dates = {\r\n                \"created_at\": true,\r\n                \"modified_at\": true,\r\n                \"due_on\": true,\r\n                \"completed_at\":true\r\n            };\r\n            console.log(\"in object parse\")\r\n            var keys = {\r\n                \"id\": true,\r\n                \"name\": true,\r\n                \"completed\": true,\r\n                \"parent\": true,\r\n                \"assignee_status\": true,\r\n                \"notes\": true,\r\n                \"gid\": true\r\n            };\r\n\r\n            _.each(body.data, function(data, key){\r\n\r\n                if(dates[key]){\r\n                    if(data){\r\n                        parsed[key] = utils.libDate.parseJSDateTimeToStandardString(new Date(data));\r\n                    }\r\n                } else if(key === \"workspace\"){\r\n                    if(data){\r\n                        _.each(data, function(wData, wKey){\r\n                            if(wKey == \"gid\")\r\n                                parsed[\"workspace_id\"] = wData;\r\n                            else\r\n                                parsed[\"workspace_\" + wKey] = wData;\r\n                        });\r\n                    }\r\n                } else if(key === \"tags\"){\r\n\r\n                    if(data && data.length){\r\n                        var tags = \"\";\r\n                        data.forEach(function(tag) {\r\n                            tags += tag.name + \", \"\r\n                        });\r\n                        parsed[key] = tags.slice(0, tags.length - 2);\r\n                    }\r\n\r\n                } else if(key === \"parent\"){\r\n                    if(data && typeof data === 'object' && data.constructor === Object){\r\n                        _.each(data, function(wData, wKey){\r\n                            if(wKey == \"gid\")\r\n                                 parsed[\"parent_id\"] = wData;\r\n                            else\r\n                                 parsed[\"parent_\" + wKey] = wData;\r\n                        });\r\n                    }\r\n                    parsed[\"parent\"] = data\r\n                } else if (key === 'assignee') {\r\n                    if (data && data.name) {\r\n                        parsed[key] = data.name\r\n                    }\r\n                } else if(keys[key]){\r\n                    if(data !== null && data !== undefined){\r\n                        if(key == 'gid')\r\n                             parsed['id'] = data\r\n                         else    \r\n                            parsed[key] = data;\r\n                    }\r\n                }\r\n            });\r\n\r\n            retObj.status = \"SUCCESS\";\r\n            retObj.data = {\r\n                newObject: {\r\n                    response: {\r\n                        params: parsed\r\n                    }\r\n                },\r\n                hash: {\r\n                    id: body.data.id || body.data.id\r\n                }\r\n            }\r\n\r\n            callback(retObj);\r\n            return;\r\n\r\n    } else {\r\n        let code\r\n        if (params.response.statusCode === 401) {\r\n            code = 'ERROR_AUTH_REFRESH'\r\n        } else if (params.response.statusCode === 400) {\r\n            code = 'ERROR_MISSING_PARAM'\r\n        } else if (params.response.statusCode === 403 || params.response.statusCode === 429) {\r\n            code = 'ERROR_RATE_LIMIT'\r\n        } else {\r\n            code = 'ERROR_UNKNOWN'\r\n        }\r\n        return callback({\r\n            error: {\r\n                code,\r\n                message: body.error || params.response.statusCode\r\n            },\r\n            errorCode: code,\r\n            status: 'ERROR'\r\n        })\r\n    }\r\n}",
        "objectQuery": true,
        "objectRequest": "function objectRequest(params, utils, callback) {\r\n\r\n    if (!params || !params.userapp || !params.appinfo) {\r\n        return callback({\r\n            error: {\r\n                code: 'ERROR_MISSING_PARAM',\r\n                message: 'Userapp or appinfo is missing'\r\n            },\r\n            status: 'ERROR'\r\n        })\r\n    }\r\n    if (!params.parsedData || !params.parsedData.data) {\r\n        return callback({\r\n            error: {\r\n                code: 'ERROR_MISSING_PARAM',\r\n                message: 'pass parsed Data from pollParse'\r\n            },\r\n            status: 'ERROR'\r\n        })\r\n    }\r\n    const authParams = params.userapp.fetchAuthParams(params.appinfo)\r\n    if (!authParams || !authParams.access_token) {\r\n        return callback({\r\n            error: {\r\n                code: 'ERROR_MISSING_PARAM',\r\n                message: 'cannot fetch access_token from fetchAuthParams'\r\n            },\r\n            status: 'ERROR'\r\n        })\r\n    }\r\n    const url = 'https://app.asana.com/api/1.0/tasks'\r\n    const parsedData = params.parsedData.data.objects || []\r\n    const options = parsedData\r\n        .filter(p => p && p.gid)\r\n        .map(p => ({\r\n            headers: {\r\n                Authorization: `Bearer ${authParams.access_token}`\r\n            },\r\n            method: 'GET',\r\n            url: `${url}/${p.gid}`\r\n        }))\r\n\r\n    return callback({\r\n        params: JSON.stringify(params),\r\n        status: 'SUCCESS',\r\n        message: 'Built options for request',\r\n        data: { options }\r\n    })\r\n}",
        "pollParse": "function intialPollParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in intialPollParse.\"\r\n        callback(retObj);\r\n                return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n        var _ = hashedUtils._;\r\n        var newPolledIds = [];\r\n        var newObjects = []\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing tasks from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            //check for any data at all\r\n            if (!body.data.length) {\r\n\r\n                retObj['status'] = \"SUCCESS\";\r\n                retObj['data'] = {};\r\n                retObj['data']['objects'] = [];\r\n                retObj['data']['pollData']  = (hashedParams.workflow.trigger || {}).pollData;\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n\r\n            //backward compatibility check\r\n            var pollCount = hashedParams.workflow.trigger.pollData.data.count\r\n            //if needs to be made backward compatible\r\n            if (pollCount || pollCount === 0) {\r\n\r\n                for (let i = 0 ; i < body.data.length ; i++) {\r\n                    if (i === 3) \r\n                        break;\r\n                    newPolledIds.push(body.data[i].id || body.data[i].gid)\r\n                }\r\n\r\n                if (body.data.length > pollCount) {\r\n\r\n                    var newData = body.data.slice(pollCount, body.data.length);\r\n\r\n                    retObj[\"status\"] = \"SUCCESS\";\r\n                    retObj[\"data\"] = {};\r\n                    retObj[\"data\"][\"pollData\"] = {\r\n                        status: \"SUCCESS\",\r\n                        data: {\r\n                            polledIds: newPolledIds\r\n                        }\r\n                    };\r\n    \r\n                    retObj[\"data\"][\"objects\"] = newData;\r\n    \r\n\r\n                } else {\r\n                    retObj['status'] = \"SUCCESS\";\r\n                    retObj['data'] = {};\r\n                    retObj['data']['objects'] = [];\r\n                    retObj['data']['pollData']  = {\r\n                        status: \"SUCCESS\",\r\n                        data: {\r\n                            polledIds: newPolledIds\r\n                        },\r\n                        forceSave: true\r\n                    }\r\n                }\r\n                callback(retObj);\r\n                return;\r\n            }//end for backward compatibility\r\n\r\n\r\n\r\n            var polledIds = hashedParams.workflow.trigger.pollData.data.polledIds;\r\n            var index = null;\r\n\r\n            //finding if one of our saved ids is present in data\r\n            if (polledIds[0]) {\r\n                index = _.findWhere(body.data, {gid: polledIds[0]});\r\n            }\r\n            if (!index && polledIds[1]) {\r\n                index = _.findWhere(body.data, {gid: polledIds[1]});\r\n            }\r\n            if (!index && polledIds[2]) {\r\n                index = _.findWhere(body.data, {gid: polledIds[2]});\r\n            }\r\n            if (!index) {\r\n                index = null\r\n            }\r\n\r\n            //if saved id is present then slicing data before the id\r\n            if (index) {\r\n\r\n                index = _.findLastIndex(body.data, {gid: index.gid})\r\n\r\n                var newTasks = body.data.slice(0, index);\r\n\r\n                if (newTasks && newTasks.length) {\r\n                    newTasks.forEach(function(task){\r\n                        newObjects.push(task)\r\n                    });\r\n                }\r\n\r\n                if (newObjects.length) {\r\n                    for (var i = 0 ; i < body.data.length ; i++) {\r\n                        if (i === 3) \r\n                            break;\r\n                        newPolledIds.push(body.data[i].gid)\r\n                    }\r\n                }\r\n\r\n            }//end for if we find the id\r\n            else {\r\n                //if all three saved ids are missing from data, then generate three new ids\r\n                for (var i = 0 ; i < body.data.length ; i++) {\r\n                    if (i === 3) \r\n                        break;\r\n                    newPolledIds.push(body.data[i].gid)\r\n                }\r\n\r\n                retObj['status'] = \"SUCCESS\";\r\n                retObj['data'] = {};\r\n                retObj['data']['objects'] = [];\r\n                retObj['data']['pollData']  = {\r\n                    status: \"SUCCESS\",\r\n                    data: {\r\n                        polledIds: newPolledIds\r\n                    },\r\n                    forceSave: true\r\n                }\r\n                callback(retObj)\r\n                return\r\n\r\n            }//else we generate three new ids and force save them as new poll data \r\n\r\n            //if newObjects array has some new data then we return success\r\n            if(newObjects.length){\r\n            \r\n                retObj[\"status\"] = \"SUCCESS\";\r\n                retObj[\"data\"] = {};\r\n                retObj[\"data\"][\"pollData\"] = {\r\n                    status: \"SUCCESS\",\r\n                    data: {\r\n                        polledIds: newPolledIds\r\n                    }\r\n                };\r\n\r\n                retObj[\"data\"][\"objects\"] = newObjects;\r\n\r\n            } else {\r\n\r\n                retObj['status'] = \"SUCCESS\";\r\n                retObj['data'] = {};\r\n                retObj['data']['objects'] = [];\r\n                retObj['data']['pollData']  = (hashedParams.workflow.trigger || {}).pollData;\r\n\r\n            }//else saving the old poll data\r\n\r\n            \r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
        "pollRequest": "function pollRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/tags\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  var _ = hashedUtils._;\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var tag_id = _.findWhere(hashedParams.workflow.trigger.params, {\r\n      id: \"tag_id\"\r\n  });\r\n\r\n  tag_id = tag_id.value;\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + tag_id + \"/tasks\",\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "type": "poll"
      },
      "webhookType": "workflow"
    },
    {
      "description": "Triggers when a task is completed in a project",
      "dynamicResponseFields": true,
      "dynamicResponseFieldsDependsOn": [
        "resource_id"
      ],
      "dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(hashedParams, hashedUtils, callback) {\r\n\r\n  var retObj = {};\r\n  var responseObjArray = [];\r\n  // Input Validation\r\n  if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n    retObj['status'] = \"ERROR\";\r\n    retObj['error'] = {};\r\n    retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n    retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n    callback(retObj);\r\n            return\r\n  } else {\r\n    var response = hashedParams['response'];\r\n    var data = [];\r\n\r\n    if (response['statusCode'] === 200) {\r\n\r\n      var body = hashedParams[\"body\"];\r\n\r\n      if(!(body || {}) || !(body.data || {}) ){\r\n        retObj[\"status\"] = \"ERROR\";\r\n        retObj[\"error\"] = {};\r\n        retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n        callback(retObj);\r\n        return;\r\n      }\r\n\r\n      if(body.data && body.data.length){\r\n        body.data.forEach(function(project){\r\n          data.push({\r\n            id: project.custom_field.gid || project.custom_field.id,\r\n            name: project.custom_field.name\r\n          });\r\n        });\r\n      }\r\n\r\n      retObj[\"status\"] = \"SUCCESS\";\r\n      retObj[\"data\"] = data;\r\n\r\n      callback(retObj);\r\n      return\r\n\r\n\r\n      // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n\r\n      var code = \"ERROR_AUTH_REFRESH\";\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = code;\r\n      retObj.error = {\r\n        code,\r\n        message: \"error occured due to expiration of token\"\r\n      };\r\n      callback(retObj);\r\n      return\r\n\r\n    } else if (hashedParams.response.statusCode === 402){\r\n\r\n      retObj[\"status\"] = \"SUCCESS\";\r\n      retObj[\"data\"] = [];\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Forbidden\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    }  else if (hashedParams.response.statusCode === 404){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Not found\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else if (hashedParams.response.statusCode === 429){\r\n\r\n      retObj.status = \"ERROR\";\r\n      retObj.errorCode = \"Rate Limit Enforced\";\r\n      retObj.error = {\r\n        message: hashedParams.body.errors[0].message\r\n      };\r\n      callback(retObj);\r\n      return;\r\n\r\n    } else {\r\n      retObj['status'] = \"ERROR\";\r\n      retObj['error'] = {};\r\n      retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n      callback(retObj);\r\n      return;\r\n\r\n    }\r\n  }\r\n\r\n}",
      "dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n  if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var resource_id = null;\r\n\r\n  var triggerParams = hashedParams.params || {};\r\n\r\n  if(triggerParams && triggerParams.length){\r\n    triggerParams.forEach(function(param){\r\n      if(param.id === \"resource_id\"){\r\n        resource_id = param.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  if(!resource_id){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Project Id is missing from Workflow\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n    method: 'GET',\r\n\r\n    baseUrl: \"https://app.asana.com/api/1.0\",\r\n\r\n    url: \"/projects/\" + resource_id + \"/custom_field_settings\",\r\n\r\n    headers: {\r\n      \"Accept\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + access_token\r\n    },\r\n\r\n    json: true\r\n\r\n  };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
      "entity": "activity",
      "id": "completed-task",
      "important": true,
      "name": "Task Completed",
      "params": [
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n            returns\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(project){\r\n                    data.push({\r\n                        id: project.gid || project.id,\r\n                        name: project.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n      json: true\r\n      \r\n    };\r\n    if (hashedParams.query && hashedParams.query.offset) {\r\n      options.qs.offset = hashedParams.query.offset\r\n  \r\n    }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 2,
      "responseFields": [
        {
          "description": "Comma separated list if task belongs to multiple projects",
          "id": "projectIds",
          "name": "Task Project Id",
          "type": "String"
        },
        {
          "description": "Comma separated list if task belongs to multiple projects",
          "id": "projectNames",
          "name": "Task Project Name",
          "type": "String"
        },
        {
          "id": "assignee",
          "name": "Task Assignee Name",
          "type": "String"
        },
        {
          "id": "assignee_id",
          "name": "Task Assignee Id",
          "type": "String"
        },
        {
          "id": "completed",
          "name": "Task Completed",
          "type": "String"
        },
        {
          "id": "completed_at",
          "name": "Task Completed At",
          "type": "String"
        },
        {
          "id": "created_at",
          "name": "Task Created At",
          "type": "String"
        },
        {
          "id": "due_on",
          "name": "Task Due On",
          "type": "String"
        },
        {
          "id": "id",
          "name": "Task Id",
          "type": "String"
        },
        {
          "id": "modified_at",
          "name": "Task Modified At",
          "type": "String"
        },
        {
          "id": "name",
          "name": "Task Name",
          "type": "String"
        },
        {
          "id": "notes",
          "name": "Task Notes",
          "type": "String"
        },
        {
          "id": "parent",
          "name": "Task's Parent",
          "type": "String"
        },
        {
          "id": "parent_gid",
          "name": "Task's Parent GID",
          "type": "String"
        },
        {
          "id": "parent_id",
          "name": "Task's Parent Id",
          "type": "String"
        },
        {
          "id": "parent_name",
          "name": "Task's Parent Name",
          "type": "String"
        },
        {
          "id": "tags",
          "name": "Task Tags",
          "type": "String"
        },
        {
          "id": "workspace_id",
          "name": "Task Workspace Id",
          "type": "String"
        },
        {
          "id": "workspace_name",
          "name": "Task Workspace Name",
          "type": "String"
        }
      ],
      "sampleData": {
        "assignee": "Ratan",
        "assignee_id": 840504531510598,
        "assignee_status": "inbox",
        "completed": false,
        "completed_at": null,
        "created_at": "05-Aug-2019 09:15:00",
        "due_at": null,
        "due_on": "19-Aug-2019",
        "gid": "1134219505003204",
        "id": 1134219505003204,
        "modified_at": "05-Aug-2019 09:15:00",
        "name": "3rd subtask",
        "notes": "notes",
        "parent_gid": "1134219505003201",
        "parent_id": 1134219505003201,
        "parent_name": "party-task-1-**",
        "tags": [
          
        ],
        "workspace_id": 840493337087127,
        "workspace_name": "Automate"
      },
      "source": {
        "type": "webhook",
        "webhookDeleteParse": "function webhookDeleteParse(hashedParams, hashedUtils, callback) {\r\n\r\n  var retObj = {};\r\n\r\n  if( !(hashedParams || {}).response ){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {\r\n      message: \"response is missing while requesting webhook Delete Request\"\r\n    };\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  if ( ( hashedParams.response.statusCode || {} ) == 200 ) {\r\n    \r\n    retObj.status = \"SUCCESS\";\r\n    callback(retObj);\r\n    return;\r\n      \r\n  } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n  } else {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {\r\n      message: \"error occured while deleting webhook with status code:\" + hashedParams.response.statusCode\r\n    };\r\n    callback(retObj);\r\n    return;\r\n  }\r\n}",
        "webhookDeleteRequest": "function webhookDeleteRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/webhooks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var workflow = hashedParams.workflow;\r\n\r\n  var webhookId = null;\r\n\r\n \r\n  if( workflow && workflow.trigger && workflow.trigger.webHook && workflow.trigger.webHook.status == 'registered' && workflow.trigger.webHook.data) {\r\n\r\n    webhookId = workflow.trigger.webHook.data.gid;\r\n\r\n    if (!webhookId) {\r\n      webhookId = workflow.trigger.webHook.data.gid;\r\n    }\r\n    \r\n  }\r\n\r\n  if ( !webhookId ) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch webhookId from workflow to delete webhook\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n\r\n    method: 'DELETE',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    headers: {\r\n        Authorization: \"Bearer \" + access_token\r\n    },\r\n\r\n    url: path + \"/\" + webhookId,\r\n\r\n    json: true\r\n      \r\n  };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookObjectParse": "function webhookObjectParse(hashedParams, hashedUtils, callback) {\r\n\r\n    var retObj = {};\r\n    var _ = hashedUtils._;\r\n\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in webhookObjectRequest.\"\r\n\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if (!(body.data.completed)) {\r\n                retObj.status = \"SUCCESS\";\r\n                retObj.data = [];\r\n                callback(retObj);\r\n                return;\r\n            }\r\n\r\n            if (body.data && body.data.modified_at && body.data.completed_at) {\r\n               \r\n                let lastModified = hashedUtils.moment(body.data.modified_at).unix()\r\n                let completedAt = hashedUtils.moment(body.data.completed_at).unix()\r\n                if (lastModified > completedAt) {\r\n                  \r\n                    retObj.status = \"SUCCESS\";\r\n                    retObj.data = [];\r\n                    callback(retObj);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            var params = {};\r\n\r\n            var dates = {\r\n                \"created_at\": true,\r\n                \"modified_at\": true,\r\n                \"due_on\": true,\r\n                \"completed_at\": true\r\n            };\r\n\r\n            var keys = {\r\n                \"id\": true,\r\n                \"name\": true,\r\n                \"completed\": true,\r\n                \"parent\": true,\r\n                \"assignee_status\": true,\r\n                \"notes\": true,\r\n                \"gid\" : true\r\n            };\r\n\r\n            _.each(body.data, function (data, key) {\r\n                if (dates[key]) {\r\n                    if (data) {\r\n                        params[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\r\n                    }\r\n                } else if(key === \"workspace\"){\r\n                    if(data){\r\n                        _.each(data, function(wData, wKey){\r\n                            if(wKey == \"gid\")\r\n                                params[\"workspace_id\"] = wData;\r\n                            else\r\n                                params[\"workspace_\" + wKey] = wData;\r\n                        });\r\n                    }\r\n                } else if (key === \"tags\") {\r\n\r\n                    if (data && data.length) {\r\n                        var tags = \"\";\r\n                        data.forEach(function (tag) {\r\n                            tags += tag.name + \", \"\r\n                        });\r\n                        params[key] = tags.slice(0, tags.length - 2);\r\n                    }\r\n\r\n                } else if (key === \"assignee\") {\r\n\r\n                    if (data) {\r\n                        params[key] = data.name;\r\n                        params[key + \"_id\"] = data.gid || data.id;\r\n                    }\r\n\r\n                } else if (key === \"custom_fields\" && data instanceof Array) {\r\n\r\n                    if (data && data.length) {\r\n\r\n                        data.forEach(field => {\r\n\r\n                        if (field.type === 'enum') {\r\n                          params[field.gid || field.id] = field.enum_value ? field.enum_value.name : null\r\n                        } else {\r\n                          params[field.gid || field.id] = field[field.type + '_value']\r\n                        }\r\n\r\n                        })\r\n\r\n                    }\r\n\r\n                }else if(key === \"parent\"){\r\n                    if(data && typeof data === 'object' && data.constructor === Object){\r\n                        _.each(data, function(wData, wKey){\r\n                            if(wKey == \"gid\")\r\n                                params[\"parent_id\" ] = wData;\r\n                            else\r\n                                params[\"parent_\" + wKey] = wData;\r\n                        });\r\n                    }\r\n                    params[\"parent\"] = data\r\n                }else if(key === \"projects\") {\r\n\r\n                    if(data instanceof Array && data.length) {\r\n                        params['projectIds'] = data.map(pro => pro.gid || pro.id).join()\r\n                        params['projectNames'] = data.map(pro => pro.name).join()\r\n                    }\r\n                    \r\n                } else if(keys[key]){\r\n                    if(data !== null && data !== undefined){\r\n                        if(key == 'gid')    \r\n                            params[\"id\"] = data;\r\n                        else\r\n                            params[key] = data;\r\n                    }\r\n                }\r\n            });\r\n\r\n            retObj.status = \"SUCCESS\";\r\n            retObj.data = params;\r\n\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n                code,\r\n                message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else if (hashedParams.response.statusCode === 403) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n\r\n        }\r\n    }\r\n    callback(retObj);\r\n    return\r\n}",
        "webhookObjectQuery": true,
        "webhookObjectRequest": "function webhookObjectRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/tasks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var task = hashedParams.parsedData;\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + task.resource.gid,\r\n\r\n     headers: {\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n\r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: [options]};\r\n\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookRegisterParse": "function webhookRegisterParse(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {message: \"response or body to parse is missing while requesting in dynamicValueSourceParse\"};\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if (( hashedParams.response.statusCode || {} ) == 200 || ( hashedParams.response.statusCode || {} ) == 201) {\r\n      var parsed = hashedParams.body;\r\n      retObj.status = \"SUCCESS\";\r\n      retObj.data = {\r\n          webHook:{\r\n            status: 'registered',\r\n            data: parsed.data\r\n          }\r\n        };\r\n\r\n      callback(retObj);\r\n      return;\r\n\r\n  } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n  } else if (hashedParams.response.statusCode == 400) {\r\n\r\n    var message = hashedParams && hashedParams.body && hashedParams.body.errors.map(err => err.message).join()\r\n    message = message.includes('Unknown object') ? 'Does the selected project exist?' : message\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = { message };\r\n    retObj.data =  { webHook : {} };\r\n    retObj.data.webHook.status = 'Failed';\r\n    retObj.data.webHook.data = { message };\r\n    callback(retObj);\r\n    return;\r\n  } else {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.data=  {};\r\n    retObj.error = {message: \"error occured with status code:\"+hashedParams.response.statusCode};\r\n    retObj.data.webHook = {};\r\n    retObj.data.webHook.status = 'Failed';\r\n    retObj.data.webHook.data = {message: \"Error while requesting for webhook registration with status code \" + hashedParams.response.statusCode + \" body \" + JSON.stringify(hashedParams.body)};\r\n    callback(retObj);\r\n    return\r\n  }\r\n}",
        "webhookRegisterRequest": "function webhookRegisterRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/webhooks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var resource_id = null;\r\n\r\n  var triggerParams = hashedParams.workflow.trigger.params || {};\r\n\r\n  if(triggerParams && triggerParams.length){\r\n    triggerParams.forEach(function(param){\r\n      if(param.id === \"resource_id\"){\r\n        resource_id = param.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  if(!resource_id){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Resource Id is missing from Workflow\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n      method: 'POST',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      body: {\r\n          \"data\": {\r\n            \"resource\": resource_id,\r\n            \"target\": process.env['webhookUrl'] + '/webhook/' + hashedParams.workflow._id\r\n          }\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  \r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookTriggerParse": "function webhookTriggerParse(hashedParams, hashedUtils, callback){\r\n \r\n    var retObj = {};\r\n\r\n    var _ = hashedUtils._;\r\n\r\n     if(hashedParams.request.headers[\"x-hook-secret\"] && _.isEmpty(hashedParams.request.body)){\r\n\r\n        retObj.status = \"SKIP\";\r\n        retObj.message = \"Handshake\";\r\n        retObj.response = {};\r\n        retObj.response.headers = {\r\n            \"x-hook-secret\": hashedParams.request.headers[\"x-hook-secret\"]\r\n        };\r\n\r\n        callback(retObj);\r\n        return;\r\n\r\n    } else if (hashedParams['body'].events.length) {\r\n      var events = hashedParams.body.events\r\n      var deletedTasks = events\r\n        .filter(event => event.resource.resource_type === 'task' && event.action === 'deleted')\r\n\r\n      var changedTasks = events\r\n        .filter(event => event.resource.resource_type === 'task' && event.action === 'changed')\r\n        .filter(cEvent => !deletedTasks.find(dEvent => dEvent.resource.gid === cEvent.resource.gid))\r\n\r\n      var uniqueTasks = []\r\n      var uniqueMap = {}\r\n\r\n      changedTasks.forEach(task => {\r\n        if (!uniqueMap[task.resource.gid]) {\r\n          uniqueTasks.push(task)\r\n          uniqueMap[task.resource.gid] = true\r\n        }\r\n      })\r\n\r\n      if (uniqueTasks.length) {\r\n        retObj.data = {objects: uniqueTasks}\r\n        retObj.status = 'SUCCESS'\r\n        callback(retObj)\r\n      } else {\r\n        retObj.status = 'SKIP'\r\n        retObj.message = 'Unwanted Resource'\r\n        callback(retObj)\r\n      }\r\n\r\n    } else if(hashedParams[\"body\"].events.length === 0) {\r\n\r\n        retObj.status = \"SKIP\";\r\n        retObj.message = \"TEST PING\";\r\n\r\n        callback(retObj);\r\n        return;\r\n\r\n    } else {\r\n        retObj.status = \"ERROR\";\r\n        retObj.error = {\r\n            message: \"Error Occured\"\r\n        }\r\n        callback(retObj);\r\n        return\r\n    }\r\n\r\n}"
      },
      "webhookType": "workflow"
    },
    {
      "description": "Triggers when there are changes to Task due date, assignee, name, section etc.",
      "dynamicResponseFieldsDependsOn": [
        
      ],
      "entity": "message",
      "id": "new-story",
      "important": true,
      "name": "New Activity in Project",
      "params": [
        {
          "dynamicValueSourceParse": "function dynamicValueSourceParse(hashedParams, hashedUtils, callback) {\r\n  \r\n\r\n    var retObj = {};\r\n    var responseObjArray = [];\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in actionParse.\"\r\n        callback(retObj);\r\n                return;\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            if(!(body || {}) || !(body.data || {}) ){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"Missing projects from body\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n            if(!(body.data.length)){\r\n                retObj[\"status\"] = \"ERROR\";\r\n                retObj[\"error\"] = {};\r\n                retObj[\"error\"][\"message\"] = \"No projects Found\";\r\n                callback(retObj);\r\n                return; \r\n            }\r\n\r\n\r\n            if(body.data && body.data.length){\r\n                body.data.forEach(function(project){\r\n                    data.push({\r\n                        id: project.gid || project.id,\r\n                        name: project.name\r\n                    });\r\n                });\r\n            }\r\n            if (body.next_page && body.next_page.offset) {\r\n                retObj.meta = {\r\n                    nextPage: {\r\n                        offset: body.next_page.offset\r\n                    }\r\n                }\r\n            }\r\n            retObj[\"status\"] = \"SUCCESS\";\r\n            retObj[\"data\"] = data;\r\n\r\n            callback(retObj);\r\n            return\r\n        \r\n            \r\n        // add more error code specific code blocks\r\n    } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n    } else if (hashedParams.response.statusCode === 403){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        }  else if (hashedParams.response.statusCode === 404){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429){\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n            callback(retObj);\r\n            return;\r\n\r\n        }\r\n    }\r\n    \r\n}",
          "dynamicValueSourceRequest": "function dynamicValueSourceRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/projects\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n\r\n   if(!(fetchedParams[\"access_token\"])){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access_token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }//end auth fetch\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n    if (hashedParams.query && hashedParams.query.offset) {\r\n      options.qs.offset = hashedParams.query.offset\r\n  \r\n    }\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
          "fixedValueSource": [
            
          ],
          "id": "resource_id",
          "inputType": "select",
          "name": "Project",
          "required": true,
          "type": "String"
        }
      ],
      "priority": 2,
      "responseFields": [
        {
          "description": "Global unique ID of the activity.",
          "id": "id",
          "name": "Activity Id",
          "type": "String"
        },
        {
          "description": "Human-readable text for the activity.",
          "id": "text",
          "name": "Activity Text",
          "type": "String"
        },
        {
          "description": "The component of the Asana product the user used to trigger the activity.",
          "id": "source",
          "name": "Activity Source",
          "type": "String"
        },
        {
          "description": "The id of the user who created the activity.",
          "id": "created_by_id",
          "name": "Activity Created By Id",
          "type": "String"
        },
        {
          "description": "The name of the user who created the activity.",
          "id": "created_by_name",
          "name": "Activity Created By Name",
          "type": "String"
        },
        {
          "description": "The task related to this activity.",
          "id": "target_id",
          "name": "Task Id",
          "searchAction": "find-task",
          "searchID": "task_id",
          "searchLabel": "Get Task info",
          "type": "String"
        },
        {
          "description": "The time at which this activity was created.",
          "id": "created_at",
          "name": "Activity Created At",
          "type": "String"
        },
        {
          "description": "The type of Activity. Example: System, Comment..",
          "id": "type",
          "name": "Activity Type",
          "type": "String"
        }
      ],
      "sampleData": {
        "created_at": "05-Aug-2019 09:15:00",
        "created_by_id": 840504531510598,
        "created_by_name": "Ratan",
        "gid": "1135026385087801",
        "id": "1135026385087801",
        "resource_subtype": "due_date_changed",
        "resource_type": "story",
        "source": "web",
        "target_id": 1134219505003201,
        "text": "changed the due date to August 20",
        "type": "system"
      },
      "source": {
        "type": "webhook",
        "webhookDeleteParse": "function webhookDeleteParse(hashedParams, hashedUtils, callback) {\r\n\r\n  var retObj = {};\r\n\r\n  if( !(hashedParams || {}).response ){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {\r\n      message: \"response is missing while requesting webhook Delete Request\"\r\n    };\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  if ( ( hashedParams.response.statusCode || {} ) == 200 ) {\r\n    \r\n    retObj.status = \"SUCCESS\";\r\n    callback(retObj);\r\n    return;\r\n      \r\n  } else if (hashedParams.response.statusCode == 401) {\r\n    \r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n            \r\n  } else {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {\r\n      message: \"error occured while deleting webhook with status code:\" + hashedParams.response.statusCode\r\n    };\r\n    callback(retObj);\r\n    return;\r\n  }\r\n}",
        "webhookDeleteRequest": "function webhookDeleteRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/webhooks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if(!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo || !(hashedParams || {}).workflow){\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var workflow = hashedParams.workflow;\r\n\r\n  var webhookId = null;\r\n\r\n \r\n  if( workflow && workflow.trigger && workflow.trigger.webHook && workflow.trigger.webHook.status == 'registered' && workflow.trigger.webHook.data) {\r\n\r\n    webhookId = workflow.trigger.webHook.data.gid;\r\n\r\n    if (!webhookId) {\r\n      webhookId = workflow.trigger.webHook.data.gid;\r\n    }\r\n    \r\n  }\r\n\r\n  if ( !webhookId ) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch webhookId from workflow to delete webhook\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n\r\n    method: 'DELETE',\r\n\r\n    baseUrl: baseUrl,\r\n\r\n    headers: {\r\n        Authorization: \"Bearer \" + access_token\r\n    },\r\n\r\n    url: path + \"/\" + webhookId,\r\n\r\n    json: true\r\n      \r\n  };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookObjectParse": "function webhookObjectParse(hashedParams, hashedUtils, callback) {\r\n\r\n    var retObj = {};\r\n    var _ = hashedUtils._;\r\n\r\n    // Input Validation\r\n    if (!hashedParams || !hashedParams['body'] || !hashedParams['response']) {\r\n\r\n        retObj['status'] = \"ERROR\";\r\n        retObj['error'] = {};\r\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\r\n        retObj['error']['message'] = \"Error: Invalid/Missing API Response in webhookObjectRequest.\"\r\n\r\n    } else {\r\n        var response = hashedParams['response'];\r\n        var data = [];\r\n\r\n        if (response['statusCode'] === 200) {\r\n\r\n            var body = hashedParams[\"body\"];\r\n\r\n            var params = {};\r\n\r\n            var dates = {\r\n                \"created_at\": true\r\n            };\r\n\r\n            var keys = {\r\n                text: true,\r\n                type: true,\r\n                source: true,\r\n                id: true,\r\n                gid: true\r\n            };\r\n\r\n            _.each(body.data, function (data, key) {\r\n                if (dates[key]) {\r\n                    if (data) {\r\n                        params[key] = hashedUtils.libDate.parseJSDateTimeToStandardString(new Date(data));\r\n                    }\r\n                } else if(key === \"created_by\"){\r\n                    if(data){\r\n                        _.each(data, function(wData, wKey){\r\n                            if(wKey == 'gid')\r\n                                 params[\"created_by_id\"] = wData; \r\n                            else            \r\n                                params[\"created_by_\" + wKey] = wData;\r\n                        });\r\n                    }\r\n                } else if (key === \"target\") {\r\n\r\n                    if(data){\r\n                        _.each(data, function(tData, tKey){\r\n                            if(tKey === \"id\" || tKey == 'gid'){\r\n                                if(tData){\r\n                                    params[\"target_id\"] = tData;\r\n                                }\r\n                            }\r\n                        });\r\n                       \r\n                    }\r\n\r\n                } else if(keys[key]){\r\n                    if(data !== null && data !== undefined){\r\n                        if(key == 'gid')    \r\n                           params[\"id\"] = data;\r\n                        else\r\n                           params[key] = data;\r\n                    }\r\n                }\r\n            });\r\n\r\n            retObj.status = \"SUCCESS\";\r\n            retObj.data = params;\r\n\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n                code,\r\n                message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n        } else if (hashedParams.response.statusCode === 403) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Forbidden\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 404) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Not found\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else if (hashedParams.response.statusCode === 429) {\r\n\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = \"Rate Limit Enforced\";\r\n            retObj.error = {\r\n                message: hashedParams.body.errors[0].message\r\n            };\r\n            callback(retObj);\r\n            return;\r\n\r\n        } else {\r\n            retObj['status'] = \"ERROR\";\r\n            retObj['error'] = {};\r\n            retObj['error']['code'] = \"ERROR_UNKNOWN\";\r\n\r\n        }\r\n    }\r\n    callback(retObj);\r\n    return\r\n}",
        "webhookObjectQuery": true,
        "webhookObjectRequest": "function webhookObjectRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/stories\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var story = hashedParams.parsedData;\r\n\r\n  var options = {\r\n      method: 'GET',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path + \"/\" + story.resource.gid,\r\n\r\n     headers: {\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      json: true\r\n\r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: [options]};\r\n\r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookRegisterParse": "function webhookRegisterParse(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = {message: \"response or body to parse is missing while requesting in dynamicValueSourceParse\"};\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  if (( hashedParams.response.statusCode || {} ) == 200 || ( hashedParams.response.statusCode || {} ) == 201) {\r\n      var parsed = hashedParams.body;\r\n      retObj.status = \"SUCCESS\";\r\n      retObj.data = {\r\n          webHook:{\r\n            status: 'registered',\r\n            data: parsed.data\r\n          }\r\n        };\r\n\r\n      callback(retObj);\r\n      return;\r\n\r\n  } else if (hashedParams.response.statusCode == 401) {\r\n\r\n            var code = \"ERROR_AUTH_REFRESH\";\r\n            retObj.status = \"ERROR\";\r\n            retObj.errorCode = code;\r\n            retObj.error = {\r\n              code,\r\n              message: \"error occured due to expiration of token\"\r\n            };\r\n            callback(retObj);\r\n            return\r\n\r\n  } else if (hashedParams.response.statusCode == 400) {\r\n\r\n    var message = hashedParams && hashedParams.body && hashedParams.body.errors.map(err => err.message).join()\r\n    message = message.includes('Unknown object') ? 'Does the selected project exist?' : message\r\n    retObj.status = \"ERROR\";\r\n    retObj.error = { message };\r\n    retObj.data =  { webHook : {} };\r\n    retObj.data.webHook.status = 'Failed';\r\n    retObj.data.webHook.data = { message };\r\n    callback(retObj);\r\n\r\n  } else {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.data=  {};\r\n    retObj.error = {message: \"error occured with status code:\"+hashedParams.response.statusCode};\r\n    retObj.data.webHook = {};\r\n    retObj.data.webHook.status = 'Failed';\r\n    retObj.data.webHook.data = {message: \"Error while requesting for webhook registration with status code \" + hashedParams.response.statusCode + \" body \" + JSON.stringify(hashedParams.body)};\r\n    callback(retObj);\r\n    return\r\n  }\r\n}",
        "webhookRegisterRequest": "function webhookRegisterRequest(hashedParams, hashedUtils, callback) {\r\n  var retObj = {};\r\n\r\n  var path = \"/webhooks\";\r\n\r\n  var baseUrl = \"https://app.asana.com/api/1.0\";\r\n\r\n  if ( !( hashedParams || {} ).userapp || !( hashedParams || {} ).appinfo || !( hashedParams || {} ).workflow ) {\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Userapp or appinfo or workflow is missing while requesting in webhook request\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo);\r\n  if(!(fetchedParams[\"access_token\"])) {\r\n\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"cannot fetch access token from fetchedAuthParams\";\r\n    callback(retObj);\r\n    return;\r\n\r\n  }\r\n\r\n  var access_token = fetchedParams[\"access_token\"];\r\n\r\n  var resource_id = null;\r\n\r\n  var triggerParams = hashedParams.workflow.trigger.params || {};\r\n\r\n  if(triggerParams && triggerParams.length){\r\n    triggerParams.forEach(function(param){\r\n      if(param.id === \"resource_id\"){\r\n        resource_id = param.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  if(!resource_id){\r\n    retObj.status = \"ERROR\";\r\n    retObj.message = \"Resource Id is missing from Workflow\";\r\n    callback(retObj);\r\n    return;\r\n  }\r\n\r\n  var options = {\r\n      method: 'POST',\r\n\r\n      baseUrl: baseUrl,\r\n\r\n      url: path,\r\n\r\n     headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + access_token\r\n      },\r\n\r\n      body: {\r\n          \"data\": {\r\n            \"resource\": resource_id,\r\n            \"target\": process.env['webhookUrl'] + '/webhook/' + hashedParams.workflow._id\r\n          }\r\n      },\r\n\r\n      json: true\r\n      \r\n    };\r\n\r\n  retObj.status = \"SUCCESS\";\r\n  retObj.data = {options: options};\r\n  \r\n  callback(retObj);\r\n  return\r\n\r\n}",
        "webhookTriggerParse": "function webhookTriggerParse(hashedParams, hashedUtils, callback){\r\n\r\n    var retObj = {};\r\n\r\n    var _ = hashedUtils._;\r\n\r\n     if(hashedParams.request.headers[\"x-hook-secret\"] && _.isEmpty(hashedParams.request.body)){\r\n\r\n        retObj.status = \"SKIP\";\r\n        retObj.message = \"Handshake\";\r\n        retObj.response = {};\r\n        retObj.response.headers = {\r\n            \"x-hook-secret\": hashedParams.request.headers[\"x-hook-secret\"]\r\n        };\r\n\r\n        callback(retObj);\r\n        return;\r\n\r\n    } else if (hashedParams['body'].events.length) {\r\n      var events = hashedParams.body.events\r\n\r\n      var removedStories = events\r\n        .filter(event => event.resource.resource_type === 'story' && event.action === 'removed')\r\n\r\n      var addedStories = events\r\n        .filter(event => event.resource.resource_type === 'story' && event.action === 'added')\r\n        .filter(aEvent => !removedStories.find(rEvent => rEvent.resource.gid === aEvent.resource.gid))\r\n\r\n      if (addedStories.length) {\r\n        retObj.data = {objects: addedStories}\r\n        retObj.status = 'SUCCESS'\r\n        callback(retObj)\r\n      } else {\r\n        retObj.status = 'SKIP'\r\n        retObj.message = 'Unwanted Resource'\r\n        callback(retObj)\r\n      }\r\n  \r\n    } else if(hashedParams[\"body\"].events.length === 0) {\r\n\r\n        retObj.status = \"SKIP\";\r\n        retObj.message = \"TEST PING\";\r\n\r\n        callback(retObj);\r\n        return;\r\n\r\n    } else {\r\n        retObj.status = \"ERROR\";\r\n        retObj.error = {\r\n            message: \"Error Occured\"\r\n        }\r\n        callback(retObj);\r\n        return\r\n    }\r\n\r\n}"
      },
      "webhookType": "workflow"
    }
  ],
  "version": "1.0"
}
