{
	"_id": "56b1a697843a7079bcd9df23",
	"actions": [
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdcb5",
			"name": "Add or Update an Account",
			"id": "add-account",
			"priority": 2,
			"entity": "company",
			"description": "Creates a new Account or updates an existing Account",
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {}\n    var update\n    var moment\n    var hardUpdateRecord\n    var REST_ENDPOINT = \"/services/data\"\n    var API_VERSION\n    var entity = \"Account\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    /**\n     * Sanitizes the user input\n     * @param {Object} userInput\n     * @param {Object} stepData\n     */\n\n    var sanitizeUserInput = function (userInput, stepData) {\n\n        let dataType\n        let sanitizedValue\n        let dataTypeArray\n        let skipFields = stepData && stepData.skipFields ? stepData.skipFields.split(',') : []\n\n        // copy mailing address to other address\n        if (userInput['copyBillToShip']) {\n            ['BillingStreet', 'BillingCity', 'BillingPostalCode', 'BillingState', 'BillingCountry'].forEach(el => {\n                if (userInput[el])\n                    userInput[el.replace('Billing', \"Shipping\")] = userInput[el]\n            });\n        }\n\n        delete userInput['Update']\n        delete userInput['value']\n        delete userInput['field']\n        delete userInput['hardUpdateRecord']\n        delete userInput['copyBillToShip']\n\n        Object.keys(userInput).forEach(function (key) {\n\n            if (key.split(\"@\").length > 1) {\n\n                dataTypeArray = key.split(\"@\")\n                dataType = dataTypeArray.pop()\n\n                if (dataType === \"date\" || dataType === \"datetime\") {\n\n                    // checking if the input value is valid date or not\n                    if (moment(userInput[key]).isValid())\n                        sanitizedValue = moment(userInput[key]).toISOString()\n                    else\n                        // INFO : just for now testing the behaviour of API\n                        sanitizedValue = userInput[key]\n\n                } else if (dataType === \"boolean\") {\n\n                    sanitizedValue = (userInput[key] === \"true\")\n\n                } else if (dataType === \"multipicklist\") {\n                    let tempArr = []\n                    if (userInput[key] instanceof Array) {\n                        userInput[key].forEach(v => {\n                            tempArr.push(v.value)\n                        })\n                    } else\n                        tempArr.push(userInput[key])\n\n                    sanitizedValue = tempArr.join('; ')\n                } else {\n                    sanitizedValue = userInput[key]\n                }\n\n                // finally setting the sanitizedValue of the input value\n                userInput[dataTypeArray.join('')] = sanitizedValue\n                delete userInput[key]\n            }\n\n        }, this)\n\n        skipFields.forEach(field => { if (field !== \"Name\") delete userInput[field] })\n    }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params'] || !utils['moment']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        let userInput = params['params'];\n        update = userInput['Update'] ? userInput['Update'] : \"No\"\n        hardUpdateRecord = userInput['hardUpdateRecord'] ? (userInput['hardUpdateRecord'] === \"Yes\") : true\n        moment = utils['moment']\n\n        let fetchedParams = params['userapp'].fetchAuthParams(params['appinfo'])\n        API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        let loginInstanceUrl = fetchedParams['instance_url'];\n\n        // common options Variables\n        var options = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (update === 'No' || (params['step'] && params['step']['value'] === stepValueUpdate)) {\n\n            options['method'] = 'POST'\n            options['url'] = '/sobjects/' + entity + '/'\n\n            // sanitize the user inputs\n            sanitizeUserInput(userInput, params['step'])\n\n            if (update === 'Yes' && (params['step'] && params['step']['accountId'])) {\n\n                options.method = \"PATCH\"\n                options.url = \"/sobjects/\" + entity + \"/\" + params['step']['accountId']\n                retObj['step'] = { accountId: params['step']['accountId'] }\n\n            }\n            // now add the body to the request\n            options['body'] = userInput;\n\n        } else if (params['step'] && params['step']['value'] === stepValueFetchObj) {\n\n            if (params['step']['accountId']) {\n                // send the request for fetching whole object corresponding to given id\n                options.method = \"GET\"\n                options.url = `/sobjects/Account/${params['step']['accountId']}`\n                retObj['step'] = { value: stepValueFetchObj, accountId: params['step']['accountId'] }\n            } else {\n                options['method'] = 'POST'\n                options['url'] = '/sobjects/' + entity + '/'\n                // sanitize the user inputs\n                sanitizeUserInput(userInput, params['step'])\n                // now add the body to the request\n                options['body'] = userInput\n            }\n\n        } else if (update === 'Yes') {\n\n            let matchField = userInput['field']\n            let url = \"/query/?q=select+id+from+\" + entity + \"+where+\"\n            let matchfieldSplit\n            let matchFieldType\n\n            // if user selected update but field and value not available throw error\n            if (!userInput['field'] || !userInput['value']) {\n\n                retObj['error'] = {}\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n                retObj['error']['message'] = \"Missing input for 'Value to check for'. This is required if 'Update if existing' is Yes.\"\n                return callback(retObj)\n            }\n\n            // if the selected matching field is custom field, extract its data type from name\n            if (userInput['field'].split('@').length > 1) {\n\n                matchfieldSplit = userInput['field'].split('@')\n                matchFieldType = matchfieldSplit.pop()\n                matchField = matchfieldSplit.join('')\n            }\n\n            // format the query according to the coming field Type\n            if ((matchField.includes(\"Date\") || matchField.includes(\"date\") || matchField === \"SystemModstamp\") || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n                if (moment(userInput['value']).isValid())\n                    userInput['value'] = moment(userInput['value']).toISOString()\n\n                url += matchField + \"=\" + userInput['value']\n            }\n            else\n                url += matchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g, '\\\\\\\\').replace(/'/g, '\\\\\\'')) + \"'\"\n\n            options['method'] = 'GET'\n            options['url'] = url\n            retObj['step'] = { value: stepValueSearch, hardUpdateRecord: hardUpdateRecord }\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\"\n        retObj['data'] = {\n            options: options\n        }\n    }\n    callback(retObj)\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" }\n    var errorMsg\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n        if (response['statusCode'] == 201) {\n\n            var id = body.id;\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {\n                parsedValues: {\n                    id: id\n                }\n            };\n\n        } else if (response['statusCode'] == 200 && params['step'] && params['step']['value']) {\n\n            let accountId = body && body.records && body.records[0] && body.records[0].Id ? body.records[0].Id : \"\"\n            if (params['step']['value'] === stepValueSearch) {\n\n                retObj['status'] = \"SUCCESS\"\n\n                if (params['step']['hardUpdateRecord'])\n                    retObj['step'] = { value: stepValueUpdate , accountId: accountId }\n                else\n                    retObj['step'] = { value: stepValueFetchObj , accountId: accountId }\n\n            } else if (params['step']['value'] === stepValueFetchObj) {\n\n                let skip = []\n                Object.keys(body).forEach(field => {\n                    if (body[field] !== \"\" && body[field] != null)\n                        skip.push(field)\n                }, this);\n\n                retObj['status'] = \"SUCCESS\"\n                retObj['step'] = { value: stepValueUpdate, accountId: params['step']['accountId'], skipFields: skip.join(',') }\n            }\n\n        } else if (response['statusCode'] == 204) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {\n                parsedValues: {\n                    id: params['step'] && params['step']['accountId'] ? params['step']['accountId'] : \"\"\n                }\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the duplicate search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    return callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update if existing?",
					"id": "Update",
					"inputType": "select",
					"type": "String",
					"defaultValue": "No",
					"required": true,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Check for duplicates using",
					"id": "field",
					"description": "Select the account property to be used to check for duplicates. We recommend this to be the name",
					"inputType": "select",
					"type": "String",
					"required": false,
					"defaultValue": "Name",
					"groupName": "Update",
					"groupType": "COLLECTION",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Account/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value to check for",
					"id": "value",
					"inputType": "input",
					"description": "Enter the value (of property selected above) to look for duplicates",
					"type": "String",
					"groupName": "Update",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update existing data?",
					"id": "hardUpdateRecord",
					"inputType": "select",
					"description": "Select 'Yes' if this Action's input data should override Salesforce field data (if present).",
					"type": "String",
					"defaultValue": "Yes",
					"required": false,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Account Name",
					"id": "Name",
					"inputType": "input",
					"type": "String",
					"required": true
				},
				{
					"fixedValueSource": [],
					"name": "Account Number",
					"id": "AccountNumber",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Account Owner",
					"id": "OwnerId",
					"inputType": "select",
					"type": "String",
					"searchAction": "search-user",
					"searchID": "Id",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+id, name+FROM+USER+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n\n            var arr = parsed.records;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Name']\n                });\n            }\n            \n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Parent Account",
					"id": "ParentId",
					"inputType": "input",
					"searchAction": "search-account",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Account Site",
					"id": "Site",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Annual Revenue",
					"id": "AnnualRevenue",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Phone",
					"id": "Phone",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Fax",
					"id": "Fax",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Website",
					"id": "Website",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Ticker Symbol",
					"id": "TickerSymbol",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Employees",
					"id": "NumberOfEmployees",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "SIC Code",
					"id": "Sic",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Description",
					"id": "Description",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Street",
					"id": "BillingStreet",
					"inputType": "input",
					"type": "String",
					"groupName": "Billing Address",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "City",
					"id": "BillingCity",
					"inputType": "input",
					"groupName": "Billing Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Zip/Postal Code",
					"id": "BillingPostalCode",
					"inputType": "input",
					"groupName": "Billing Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "State/Province",
					"id": "BillingState",
					"inputType": "input",
					"groupName": "Billing Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Country",
					"id": "BillingCountry",
					"inputType": "input",
					"groupName": "Billing Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Copy of Billing Address",
					"id": "copyBillToShip",
					"inputType": "select",
					"defaultValue": "No",
					"type": "String",
					"required": false,
					"groupName": "Shipping Address",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Street",
					"id": "ShippingStreet",
					"inputType": "input",
					"type": "String",
					"groupName": "Shipping Address",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "City",
					"id": "ShippingCity",
					"inputType": "input",
					"groupName": "Shipping Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Zip/Postal Code",
					"id": "ShippingPostalCode",
					"inputType": "input",
					"groupName": "Shipping Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "State/Province",
					"id": "ShippingState",
					"inputType": "input",
					"groupName": "Shipping Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Country",
					"id": "ShippingCountry",
					"inputType": "input",
					"groupName": "Shipping Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				}
			],
			"dynamicInputFields": true,
			"dynamicInputFieldsRequest": "function dynamicInputFieldsRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Account\";\n    var update;\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        update = params.params.find(p => p.id === \"Update\");\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\" + entity + \"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['step'] = { update: update };\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicInputFieldsParse": "function dynamicInputFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n    var update;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_UNKNOWN\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        update = params.step && params.step.update ? params.step.update : null;\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n            let customField;\n            let type;\n\n            fields.map(function (el) {\n                customField = {};\n\n                // if the field is custom field\n                if ((el.custom === true && !el.autoNumber) || (el.name === \"Type\" || el.name === \"Rating\" || el.name === \"Industry\" || el.name === \"Ownership\" || el.name === \"AccountSource\" || \n                    el.name === \"CleanStatus\" || el.name === 'Jigsaw' || el.name === 'DunsNumber' || el.name === 'NaicsCode' || el.name === 'NaicsDesc' || el.name === 'SicDesc' || el.name === 'Tradestyle' \n                    || el.name === 'YearStarted' || el.name === 'BillingCountryCode' || el.name === 'ShippingCountryCode' || el.name === 'BillingStateCode' || el.name === 'ShippingStateCode')) {\n                    \n                    type = el.type;\n                    // adding type field only to those fields which are custom / here Type, Rating, Industry, Ownership are static \n                    // but to save 4 extra requests we are using them here.\n                    if (el.custom === true) \n                        customField['id'] = el.name + \"@\" + type\n                    else\n                        customField['id'] = el.name\n\n                    customField['name'] = el.label\n                    if (type != \"multipicklist\")\n                        customField['defaultValue'] = el.defaultValue\n                    customField['type'] = type && (type === \"date\" || type === \"datetime\") ? \"Date\" : \"String\"\n                    customField['description'] = el.inlineHelpText\n\n                    // Using few fields to infer if they are required or not\n                    if (el.createable && !el.defaultedOnCreate && !el.nillable)\n                        customField['required'] = true\n                    else\n                        customField['required'] = false\n\n                    if (type) {\n\n                        // adding options for the dropdown type fields\n                        if (type === \"picklist\" || type === \"boolean\" || type === \"multipicklist\") {\n\n                            if (type === \"picklist\" || type === \"boolean\")\n                                customField['inputType'] = \"select\";\n                            else\n                                customField['inputType'] = \"multiselect\";\n\n                            customField['fixedValueSource'] = [];\n\n                            if (type === \"boolean\") {\n\n                                // checkbox can take 2 values either true or false\n                                customField['fixedValueSource'].push({ id: \"true\", name: \"Yes\" });\n                                customField['fixedValueSource'].push({ id: \"false\", name: \"No\" });\n\n                            } else {\n\n                                // options for picklist\n                                el.picklistValues.forEach(op => {\n\n                                    // if the value is active\n                                    if (op.active) {\n                                        customField['fixedValueSource'].push({\n                                            \"id\": op.value || op.label,\n                                            \"name\": op.label\n                                        });\n                                    }\n                                }, this);\n                            }\n\n                        } else {\n\n                            customField['inputType'] = \"input\";\n                            // adding reference / lookup fields\n                            if (type === \"reference\") {\n\n                                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0]) {\n\n                                    // lookup / reference fields\n                                    switch (el.referenceTo[0]) {\n                                        case \"Contact\":\n                                            customField['searchAction'] = \"search-contact\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Account\":\n                                            customField['searchAction'] = \"search-account\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Lead\":\n                                            customField['searchAction'] = \"search-lead\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Opportunity\":\n                                            customField['searchAction'] = \"search-opportunity\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Task\":\n                                            customField['searchAction'] = \"search-task\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Case\":\n                                            customField['searchAction'] = \"search-case\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Event\":\n                                            customField['searchAction'] = \"search-event\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"User\":\n                                            customField['searchAction'] = \"search-user\";\n                                            customField['searchID'] = \"Id\";\n                                    }\n                                }\n                            } else if (type === \"textarea\")\n                                customField['inputType'] = \"textArea\";\n                        }\n                    }\n                    // Adding groupType if required \n                    if (el.name === 'BillingCountryCode' || el.name === 'BillingStateCode') {\n                        \n                        customField['name'] = customField['name'].replace('Billing', '')\n                        customField['groupName'] = \"Billing Address\"\n                        customField['groupType'] = \"COLLECTION\"\n                    } else if (el.name === 'ShippingCountryCode' || el.name === 'ShippingStateCode') {\n                        \n                        customField['name'] = customField['name'].replace('Shipping', '')\n                        customField['groupName'] = \"Shipping Address\"\n                        customField['groupType'] = \"COLLECTION\"\n                    }\n                    retObj['data'].push(customField);\n                }\n            }, this);\n\n            const recordTypes = (body.recordTypeInfos || []).filter(type => type.available && !type.master)\n            if (recordTypes && recordTypes.length) {\n                let defaultOpt\n                let field = { \n                    type: 'String',\n                    inputType: 'select',\n                    name: 'Record Type',\n                    required: true,\n                    id: 'recordTypeId',\n                    fixedValueSource: []\n                }\n\n                // options for picklist\n                recordTypes.forEach(op => {\n                    defaultOpt = op.defaultRecordTypeMapping === true ? op.recordTypeId : defaultOpt\n                    field['fixedValueSource'].push({\n                        'id': op.recordTypeId,\n                        'name': op.name\n                    })\n                })\n                field.defaultValue = defaultOpt || undefined\n                retObj['data'].push(field)\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
			"responseFields": [
				{
					"name": "Account Id",
					"id": "id",
					"type": "String",
					"description": "Id of the newly added / updated Account"
				}
			]
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdcb4",
			"name": "Add a Call Log",
			"id": "add-call-log",
			"priority": 3,
			"entity": "activity",
			"beta": true,
			"description": "Creates a new Call log",
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {}\n    var moment\n    var entity = \"Task\"\n\n    /**\n     * Sanitizes the user input\n     * @param {Object} userInput\n     * @param {Object} stepData\n     */\n\n    var sanitizeUserInput = function(userInput) {\n\n        let dataType\n        let sanitizedValue\n        let dataTypeArray\n\n        // sanitize the user inputs\n        Object.keys(userInput).forEach(function (key) {\n\n            if (key.split(\"@\").length > 1) {\n\n                dataTypeArray = key.split(\"@\");\n                dataType = dataTypeArray.pop();\n\n                if (dataType === \"date\" || dataType === \"datetime\") {\n\n                    // checking if the input value is valid date or not\n                    if (moment(userInput[key]).isValid())\n                        sanitizedValue = moment(userInput[key]).toISOString();\n                    else\n                    // INFO : just for now testing the behaviour of API\n                        sanitizedValue = userInput[key];\n\n                } else if (dataType === \"boolean\") {\n\n                    sanitizedValue = (userInput[key] === \"true\");\n\n                } else if (dataType === \"multipicklist\") {\n                    let tempArr = [];\n                    if (userInput[key] instanceof Array) {\n                        userInput[key].forEach(v => {\n                            tempArr.push(v.value);\n                        });\n                    } else\n                        tempArr.push(userInput[key])\n                        \n                    sanitizedValue = tempArr.join('; ');\n                } else {\n                    sanitizedValue = userInput[key];\n                }\n\n                // finally setting the sanitizedValue of the input value\n                userInput[dataTypeArray.join('')] = sanitizedValue;\n                delete userInput[key];\n\n            } else if (key === \"contactForName\" || key === \"leadForName\") {\n\n                // extracting value for WhoId\n                userInput['WhoId'] = userInput[\"contactForName\"] ? userInput[\"contactForName\"] : (userInput[\"leadForName\"] ? userInput[\"leadForName\"] : undefined);\n                delete userInput[\"contactForName\"];\n                delete userInput[\"leadForName\"];\n\n            } else if (key === \"accountForRelatedTo\" || key === \"opportunityForRelatedTo\" || key === \"caseForRelatedTo\") {\n\n                // extracting value for WhatId\n                userInput['WhatId'] = userInput[\"accountForRelatedTo\"] ? userInput[\"accountForRelatedTo\"] : ( userInput[\"opportunityForRelatedTo\"] ? userInput[\"opportunityForRelatedTo\"] : undefined );\n                if (!userInput['WhatId'])\n                    userInput['WhatId'] = userInput['caseForRelatedTo'] ? userInput['caseForRelatedTo'] : undefined\n                delete userInput[\"accountForRelatedTo\"];\n                delete userInput[\"caseForRelatedTo\"];\n                delete userInput[\"opportunityForRelatedTo\"];\n\n            }\n\n        }, this);\n        userInput['TaskSubtype'] = 'Call'\n        userInput['Status'] = 'Completed'\n        userInput['Subject'] = 'Call'\n    }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params'] || !utils['moment']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        let userInput = params['params']\n        moment = utils['moment']\n\n        let fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n        let loginInstanceUrl = fetchedParams['instance_url'];\n        let REST_ENDPOINT = \"/services/data\";\n        let API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        // common options Variables\n        let options = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        options['method'] = 'POST';\n        options['url'] = '/sobjects/' + entity + '/';\n\n        // sanitizes the userInput\n        sanitizeUserInput(userInput)\n\n        // now add the body to the request\n        options['body'] = userInput;\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" }\n    var errorMsg\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        var response = params['response']\n        var body = response['body']\n        if (response['statusCode'] == 201) {\n\n            var id = body.id\n            retObj['status'] = \"SUCCESS\"\n            retObj['data'] = {\n                parsedValues: {\n                    id: id\n                }\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the duplicate search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    return callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Assigned to",
					"id": "OwnerId",
					"inputType": "select",
					"type": "String",
					"required": false,
					"searchAction": "search-user",
					"searchID": "Id",
					"groupName": "Call Log Information",
					"groupType": "COLLECTION",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+id, name+FROM+USER+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n\n            var arr = parsed.records;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Name']\n                });\n            }\n            \n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Description/Comment",
					"id": "Description",
					"inputType": "textArea",
					"type": "String",
					"required": false,
					"groupName": "Call Log Information",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Contact ID",
					"id": "contactForName",
					"inputType": "input",
					"groupName": "Contact/Lead",
					"groupType": "OR",
					"searchAction": "search-contact",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Lead ID",
					"id": "leadForName",
					"inputType": "input",
					"groupName": "Contact/Lead",
					"groupType": "OR",
					"searchAction": "search-lead",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Account ID",
					"id": "accountForRelatedTo",
					"inputType": "input",
					"groupName": "Related To",
					"groupType": "OR",
					"searchAction": "search-account",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Opportunity ID",
					"id": "opportunityForRelatedTo",
					"inputType": "input",
					"groupName": "Related To",
					"groupType": "OR",
					"searchAction": "search-opportunity",
					"searchID": "Id",
					"type": "String",
					"required": false
				}
			],
			"dynamicInputFields": true,
			"dynamicInputFieldsRequest": "function dynamicInputFieldsRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Task\";\n    var update;\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        update = params.params.find(p => p.id === \"Update\");\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\" + entity + \"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['step'] = { update: update };\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicInputFieldsParse": "function dynamicInputFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n    var update;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_UNKNOWN\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        update = params.step && params.step.update ? params.step.update : null;\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n            let customField;\n            let type;\n\n            fields.map(function (el) {\n                customField = {};\n\n                // if the field is custom field\n                if ((el.custom === true && !el.autoNumber) || \n                    (el.name === \"Priority\" || el.name === \"CallType\" || el.name === 'Type')) {\n\n                    type = el.type;\n                    // adding type field only to those fields which are custom / here Type, Rating, Industry, Ownership are static \n                    // but to save 4 extra requests we are using them here.\n                    if ( el.name === \"Priority\" || el.name === \"CallType\" || el.name === 'Type') {\n\n                        customField['id'] = el.name;\n                        customField[\"groupName\"] = \"Call Log Information\";\n                        customField[\"groupType\"] = \"COLLECTION\";\n\n                    } else\n                        customField['id'] = el.name + \"@\" + type\n\n                    customField['name'] = el.label\n                    customField['defaultValue'] = el.defaultValue\n                    customField['type'] = type && (type === \"date\" || type === \"datetime\") ? \"Date\" : \"String\"\n                    customField['description'] = el.inlineHelpText\n\n                    // Using few fields to infer if they are required or not\n                    if ((el.createable && !el.defaultedOnCreate && !el.nillable) || (el.name === \"Status\" || el.name === \"Priority\" || el.name === \"Subject\"))\n                        customField['required'] = true\n                    else\n                        customField['required'] = false\n\n                    if (type) {\n\n                        // adding options for the dropdown type fields\n                        if (type === \"picklist\" || type === \"boolean\" || type === \"multipicklist\" || type === \"combobox\") {\n\n                            if (type != \"multipicklist\")\n                                customField['inputType'] = \"select\";\n                            else\n                                customField['inputType'] = \"multiselect\";\n\n                            customField['fixedValueSource'] = [];\n\n                            if (type === \"boolean\") {\n\n                                // checkbox can take 2 values either true or false\n                                customField['fixedValueSource'].push({ id: \"true\", name: \"Yes\" });\n                                customField['fixedValueSource'].push({ id: \"false\", name: \"No\" });\n\n                            } else {\n\n                                // options for picklist\n                                el.picklistValues.forEach(op => {\n\n                                    // if the value is active\n                                    if (op.active) {\n                                        customField['fixedValueSource'].push({\n                                            \"id\": op.value || op.label,\n                                            \"name\": op.label\n                                        });\n                                    }\n                                }, this);\n\n                                if (el.name === 'Subject') {\n                                    customField['defaultValue'] = 'Call'\n                                }\n                            }\n\n                        } else {\n\n                            customField['inputType'] = \"input\";\n                            // adding reference / lookup fields\n                            if (type === \"reference\") {\n\n                                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0]) {\n\n                                    // lookup / reference fields\n                                    switch (el.referenceTo[0]) {\n                                        case \"Contact\":\n                                            customField['searchAction'] = \"search-contact\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Account\":\n                                            customField['searchAction'] = \"search-account\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Lead\":\n                                            customField['searchAction'] = \"search-lead\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Opportunity\":\n                                            customField['searchAction'] = \"search-opportunity\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Task\":\n                                            customField['searchAction'] = \"search-task\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Case\":\n                                            customField['searchAction'] = \"search-case\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Event\":\n                                            customField['searchAction'] = \"search-event\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"User\":\n                                            customField['searchAction'] = \"search-user\";\n                                            customField['searchID'] = \"Id\";\n                                    }\n                                }\n                            } else if (type === \"textarea\")\n                                customField['inputType'] = \"textArea\";\n                        }\n                    }\n                    retObj['data'].push(customField);\n                }\n            }, this);\n\n            const recordTypes = (body.recordTypeInfos || []).filter(type => type.available && !type.master)\n            if (recordTypes && recordTypes.length) {\n                let defaultOpt\n                let field = { \n                    type: 'String',\n                    inputType: 'select',\n                    name: 'Record Type',\n                    required: true,\n                    id: 'recordTypeId',\n                    fixedValueSource: []\n                }\n\n                // options for picklist\n                recordTypes.forEach(op => {\n                    defaultOpt = op.defaultRecordTypeMapping === true ? op.recordTypeId : defaultOpt\n                    field['fixedValueSource'].push({\n                        'id': op.recordTypeId,\n                        'name': op.name\n                    })\n                })\n                field.defaultValue = defaultOpt || undefined\n                retObj['data'].push(field)\n            }\n\n        } else {\n\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
			"responseFields": [
				{
					"name": "Call Log Id",
					"id": "id",
					"type": "String",
					"description": "Id of the newly added Call Log"
				}
			]
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdcb3",
			"name": "Add a Campaign Member",
			"id": "add-campaign-member",
			"priority": 3,
			"entity": "person",
			"beta": true,
			"description": "Creates a new Campaign Member (Existing Lead or Contact)",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var update;\n    var moment;\n    var entity = \"CampaignMember\";\n\n    /**\n     * Sanitizes the user input\n     * @param {Object} userInput\n     * @param {Object} stepData\n     */\n\n    var sanitizeUserInput = function (userInput, stepData) {\n\n        let dataType\n        let sanitizedValue\n        let dataTypeArray\n\n        // sanitize the user inputs\n        Object.keys(userInput).forEach(function (key) {\n\n            if (key.split(\"@\").length > 1) {\n\n                dataTypeArray = key.split(\"@\");\n                dataType = dataTypeArray.pop();\n\n                if (dataType === \"date\" || dataType === \"datetime\") {\n\n                    // checking if the input value is valid date or not\n                    if (moment(userInput[key]).isValid())\n                        sanitizedValue = moment(userInput[key]).toISOString();\n                    else\n                        // INFO : just for now testing the behaviour of API\n                        sanitizedValue = userInput[key];\n\n                } else if (dataType === \"boolean\") {\n\n                    sanitizedValue = (userInput[key] === \"true\");\n\n                } else if (dataType === \"multipicklist\") {\n                    let tempArr = [];\n                    if (userInput[key] instanceof Array) {\n                        userInput[key].forEach(v => {\n                            tempArr.push(v.value);\n                        });\n                    } else\n                        tempArr.push(userInput[key])\n                        \n                    sanitizedValue = tempArr.join('; ');\n                } else {\n                    sanitizedValue = userInput[key];\n                }\n\n                // finally setting the sanitizedValue of the input value\n                userInput[dataTypeArray.join('')] = sanitizedValue;\n                delete userInput[key];\n            }\n\n        }, this);\n\n    }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params'] || !utils['moment']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let userInput = params['params']\n        moment = utils['moment']\n\n        let fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n        let loginInstanceUrl = fetchedParams['instance_url'];\n        let REST_ENDPOINT = \"/services/data\";\n        let API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        // common options Variables\n        let options = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        options['method'] = 'POST';\n        options['url'] = '/sobjects/' + entity + '/';\n\n        // sanitizes the userInput\n        sanitizeUserInput(userInput, params['step'])\n        // now add the body to the request\n        options['body'] = userInput;\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n        if (response['statusCode'] == 201) {\n\n            var id = body.id;\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {\n                parsedValues: {\n                    id: id\n                }\n            };\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the duplicate search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    return callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Campaign",
					"id": "CampaignId",
					"inputType": "select",
					"type": "String",
					"searchAction": "search-campaign",
					"searchID": "Id",
					"required": true,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+Id, Name, Description+FROM+Campaign+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n            var arr = parsed.records;\n\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Name'] || arr[index]['Description']\n                });\n            }\n\n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Contact Id",
					"id": "ContactId",
					"inputType": "input",
					"searchAction": "search-contact",
					"searchID": "Id",
					"groupName": "Member",
					"groupType": "OR_REQUIRED",
					"type": "String",
					"required": false,
					"description": "Adds this Contact to above selected Campaign"
				},
				{
					"fixedValueSource": [],
					"name": "Lead Id",
					"id": "LeadId",
					"inputType": "input",
					"type": "String",
					"searchAction": "search-lead",
					"searchID": "Id",
					"groupName": "Member",
					"groupType": "OR_REQUIRED",
					"required": false,
					"description": "Adds this Lead to above selected Campaign"
				}
			],
			"dynamicInputFields": true,
			"dynamicInputFieldsRequest": "function dynamicInputFieldsRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"CampaignMember\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\" + entity + \"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicInputFieldsParse": "function dynamicInputFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n    var update;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_UNKNOWN\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        update = params.step && params.step.update ? params.step.update : null;\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n            let customField;\n            let type;\n\n            fields.map(function (el) {\n                customField = {};\n                \n                // if the field is custom field\n                if ((el.custom === true && !el.autoNumber)) {\n\n                    type = el.type;\n                    customField['id'] = el.name + \"@\" + type\n\n                    customField['name'] = el.label\n                    customField['defaultValue'] = el.defaultValue\n                    customField['type'] = type && (type === \"date\" || type === \"datetime\") ? \"Date\" : \"String\"\n                    customField['description'] = el.inlineHelpText\n\n                    // Using few fields to infer if they are required or not\n                    if (el.createable && !el.defaultedOnCreate && !el.nillable)\n                        customField['required'] = true\n                    else\n                        customField['required'] = false\n\n                    // exception for few fields\n                    if (el.name === \"Status\" || el.name === \"Origin\") \n                        customField['required'] = true\n\n                    if (type) {\n\n                        // adding options for the dropdown type fields\n                        if (type === \"picklist\" || type === \"boolean\" || type === \"multipicklist\") {\n\n                            if (type === \"picklist\" || type === \"boolean\")\n                                customField['inputType'] = \"select\";\n                            else\n                                customField['inputType'] = \"multiselect\";\n\n                            customField['fixedValueSource'] = [];\n\n                            if (type === \"boolean\") {\n\n                                // checkbox can take 2 values either true or false\n                                customField['fixedValueSource'].push({ id: \"true\", name: \"Yes\" });\n                                customField['fixedValueSource'].push({ id: \"false\", name: \"No\" });\n\n                            } else {\n\n                                // options for picklist\n                                el.picklistValues.forEach(op => {\n\n                                    // if the value is active\n                                    if (op.active) {\n                                        customField['fixedValueSource'].push({\n                                            \"id\": op.value || op.label,\n                                            \"name\": op.label\n                                        });\n                                    }\n                                }, this);\n                            }\n\n                        } else {\n\n                            customField['inputType'] = \"input\";\n                            // adding reference / lookup fields\n                            if (type === \"reference\") {\n\n                                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0]) {\n\n                                    // lookup / reference fields\n                                    switch (el.referenceTo[0]) {\n                                        case \"Contact\":\n                                            customField['searchAction'] = \"search-contact\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Account\":\n                                            customField['searchAction'] = \"search-account\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Lead\":\n                                            customField['searchAction'] = \"search-lead\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Opportunity\":\n                                            customField['searchAction'] = \"search-opportunity\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Task\":\n                                            customField['searchAction'] = \"search-task\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Case\":\n                                            customField['searchAction'] = \"search-case\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Event\":\n                                            customField['searchAction'] = \"search-event\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"User\":\n                                            customField['searchAction'] = \"search-user\";\n                                            customField['searchID'] = \"Id\";\n                                    }\n                                }\n                            } else if (type === \"textarea\")\n                                customField['inputType'] = \"textArea\";\n                        }\n                    }\n                    retObj['data'].push(customField);\n                } \n            }, this);\n\n            const recordTypes = (body.recordTypeInfos || []).filter(type => type.available && !type.master)\n            if (recordTypes && recordTypes.length) {\n                let defaultOpt\n                let field = { \n                    type: 'String',\n                    inputType: 'select',\n                    name: 'Record Type',\n                    required: true,\n                    id: 'recordTypeId',\n                    fixedValueSource: []\n                }\n\n                // options for picklist\n                recordTypes.forEach(op => {\n                    defaultOpt = op.defaultRecordTypeMapping === true ? op.recordTypeId : defaultOpt\n                    field['fixedValueSource'].push({\n                        'id': op.recordTypeId,\n                        'name': op.name\n                    })\n                })\n                field.defaultValue = defaultOpt || undefined\n                retObj['data'].push(field)\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
			"responseFields": [
				{
					"name": "Campaign Member Id",
					"id": "id",
					"type": "String",
					"description": "Id of the newly added Campaign Member"
				}
			]
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdcb2",
			"name": "Add or Update a Case",
			"id": "add-case",
			"priority": 3,
			"entity": "ticket",
			"description": "Creates a new Case or updates an existing Case",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var update;\n    var moment;\n    var entity = \"Case\";\n    const stepValueSearch = \"SEARCH_BY_FIELD\";\n    const stepValueUpdate = \"UPDATE_BY_ID\";\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    /**\n     * Sanitizes the user input\n     * @param {Object} userInput\n     * @param {Object} stepData\n     */\n\n    var sanitizeUserInput = function (userInput, stepData) {\n\n        let dataType\n        let sanitizedValue\n        let dataTypeArray\n        let skipFields = stepData && stepData.skipFields ? stepData.skipFields.split(',') : []\n\n        delete userInput['Update'];\n        delete userInput['value'];\n        delete userInput['field'];\n        delete userInput['hardUpdateRecord']\n\n        // sanitize the user inputs\n        Object.keys(userInput).forEach(function (key) {\n\n            if (key.split(\"@\").length > 1) {\n\n                dataTypeArray = key.split(\"@\");\n                dataType = dataTypeArray.pop();\n\n                if (dataType === \"date\" || dataType === \"datetime\") {\n\n                    // checking if the input value is valid date or not\n                    if (moment(userInput[key]).isValid())\n                        sanitizedValue = moment(userInput[key]).toISOString();\n                    else\n                        // INFO : just for now testing the behaviour of API\n                        sanitizedValue = userInput[key];\n\n                } else if (dataType === \"boolean\") {\n\n                    sanitizedValue = (userInput[key] === \"true\");\n\n                } else if (dataType === \"multipicklist\") {\n                    let tempArr = [];\n                    if (userInput[key] instanceof Array) {\n                        userInput[key].forEach(v => {\n                            tempArr.push(v.value);\n                        });\n                    } else\n                        tempArr.push(userInput[key])\n                        \n                    sanitizedValue = tempArr.join('; ');\n                } else {\n                    sanitizedValue = userInput[key];\n                }\n\n                // finally setting the sanitizedValue of the input value\n                userInput[dataTypeArray.join('')] = sanitizedValue;\n                delete userInput[key];\n            }\n\n            if (key === 'CloseDate') {\n                // checking if the input value is valid date or not\n                if (moment(userInput[key]).isValid())\n                    userInput[key] = moment(userInput[key]).toISOString();\n            }\n\n        }, this);\n\n        if (userInput['IsPrivate'])\n            userInput['IsPrivate'] = (userInput['IsPrivate'] === \"Yes\");\n\n        skipFields.forEach(field => delete userInput[field])\n    }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params'] || !utils['moment']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let userInput = params['params']\n        let update = userInput['Update'] ? userInput['Update'] : \"No\"\n        let hardUpdateRecord = userInput['hardUpdateRecord'] ? (userInput['hardUpdateRecord'] === \"Yes\") : true\n        moment = utils['moment']\n\n        let fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n        let loginInstanceUrl = fetchedParams['instance_url'];\n        let REST_ENDPOINT = \"/services/data\";\n        let API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        // common options Variables\n        let options = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (update === 'No' || (params['step'] && params['step']['value'] === stepValueUpdate)) {\n\n            options['method'] = 'POST';\n            options['url'] = '/sobjects/' + entity + '/';\n\n            // sanitizes the userInput\n            sanitizeUserInput(userInput, params['step'])\n\n            if (update === 'Yes' && (params['step'] && params['step']['caseId'])) {\n                options.method = \"PATCH\";\n                options.url = \"/sobjects/\" + entity + \"/\" + params['step']['caseId'];\n                retObj['step'] = { caseId: params['step']['caseId'] }\n            }\n\n            // now add the body to the request\n            options['body'] = userInput;\n\n        } else if (params['step'] && params['step']['value'] === stepValueFetchObj) {\n\n            if (params['step']['caseId']) {\n                // send the request for fetching whole object corresponding to given id\n                options.method = \"GET\"\n                options.url = `/sobjects/Case/${params['step']['caseId']}`\n                retObj['step'] = { value: stepValueFetchObj, caseId: params['step']['caseId'] }\n            } else {\n                options['method'] = 'POST'\n                options['url'] = '/sobjects/' + entity + '/'\n                // sanitizes the userInput\n                sanitizeUserInput(userInput, params['step'])\n                 // now add the body to the request\n                options['body'] = userInput\n            }\n\n        } else if (update === 'Yes') {\n\n            let matchField = userInput['field'];\n            let url = \"/query/?q=select+id+from+\" + entity + \"+where+\";\n            let matchfieldSplit;\n            let matchFieldType;\n\n            // if user selected update but field and value not available throw error\n            if (!userInput['field'] || !userInput['value']) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Missing input for 'Value to check for'. This is required if 'Update if existing' is Yes.\";\n                return callback(retObj);\n            }\n\n            // if the selected matching field is custom field, extract its data type from name\n            if (userInput['field'].split('@').length > 1) {\n\n                matchfieldSplit = userInput['field'].split('@');\n                matchFieldType = matchfieldSplit.pop();\n                matchField = matchfieldSplit.join('');\n            }\n\n            // format the query according to the coming field Type\n            if ((matchField.includes(\"Date\") || matchField.includes(\"date\") || matchField === \"SystemModstamp\") || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n                if (moment(userInput['value']).isValid())\n                    userInput['value'] = moment(userInput['value']).toISOString();\n\n                url += matchField + \"=\" + userInput['value'];\n            }\n            else\n                url += matchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g, '\\\\\\\\').replace(/'/g, '\\\\\\'')) + \"'\";\n\n            options['method'] = 'GET';\n            options['url'] = url;\n            retObj['step'] = { value: stepValueSearch, hardUpdateRecord: hardUpdateRecord }\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n        if (response['statusCode'] == 201) {\n\n            var id = body.id;\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {\n                parsedValues: {\n                    id: id\n                }\n            };\n\n        } else if (response['statusCode'] == 200) {\n\n            let caseId = body && body.records && body.records[0] && body.records[0].Id ? body.records[0].Id : \"\";\n\n            if (params['step']['value'] === stepValueSearch) {\n\n                retObj['status'] = \"SUCCESS\"\n\n                if (params['step']['hardUpdateRecord'])\n                    retObj['step'] = { value: stepValueUpdate , caseId: caseId }\n                else\n                    retObj['step'] = { value: stepValueFetchObj , caseId: caseId }\n\n            } else if (params['step']['value'] === stepValueFetchObj) {\n\n                let skip = []\n                Object.keys(body).forEach(field => {\n                    if (body[field] !== \"\" && body[field] != null)\n                        skip.push(field)\n                }, this);\n\n                retObj['status'] = \"SUCCESS\"\n                retObj['step'] = { value: stepValueUpdate, caseId: params['step']['caseId'], skipFields: skip.join(',') }\n            }\n\n        } else if (response['statusCode'] == 204) {\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {\n                parsedValues: {\n                    id: params['step'] && params['step']['caseId'] ? params['step']['caseId'] : \"\"\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the duplicate search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    return callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update if existing",
					"id": "Update",
					"inputType": "select",
					"type": "String",
					"defaultValue": "No",
					"required": true,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Check for duplicates using",
					"id": "field",
					"description": "Select the Event property to be used to check for duplicates. We recommend this to be the subject",
					"inputType": "select",
					"type": "String",
					"required": false,
					"defaultValue": "Subject",
					"groupName": "Update",
					"groupType": "COLLECTION",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Case/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value to check for",
					"id": "value",
					"inputType": "input",
					"description": " Value for the above matching field",
					"type": "String",
					"groupName": "Update",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update existing data?",
					"id": "hardUpdateRecord",
					"inputType": "select",
					"description": "Select 'Yes' if this Action's input data should override Salesforce field data (if present).",
					"type": "String",
					"defaultValue": "Yes",
					"required": false,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Case Owner",
					"id": "OwnerId",
					"inputType": "select",
					"type": "String",
					"searchAction": "search-user",
					"searchID": "Id",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+id, name+FROM+USER+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n\n            var arr = parsed.records;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Name']\n                });\n            }\n            \n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Contact",
					"id": "ContactId",
					"inputType": "input",
					"searchAction": "search-contact",
					"searchID": "Id",
					"type": "Number",
					"required": false,
					"description": "Links the Case to this Contact"
				},
				{
					"fixedValueSource": [],
					"name": "Account",
					"id": "AccountId",
					"inputType": "input",
					"type": "String",
					"searchAction": "search-account",
					"searchID": "Id",
					"required": false,
					"description": "Links the Case to this Account"
				},
				{
					"fixedValueSource": [],
					"name": "Asset",
					"id": "AssetId",
					"inputType": "select",
					"type": "String",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+Id, Name+FROM+ASSET+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n\n            var arr = parsed.records;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Name'] || \"\"\n                });\n            }\n\n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}",
					"description": "Links the Case to this Asset"
				},
				{
					"fixedValueSource": [],
					"name": "Parent Case",
					"id": "ParentId",
					"inputType": "select",
					"type": "String",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+id, Subject+FROM+Case+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n            var arr = parsed.records;\n\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Subject'] || \"\"\n                });\n            }\n\n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}",
					"description": "Links the Case to this Case"
				},
				{
					"fixedValueSource": [],
					"name": "Subject",
					"id": "Subject",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Description",
					"id": "Description",
					"inputType": "input",
					"defaultValue": "",
					"type": "Number",
					"required": false
				},
				{
					"fixedValueSource": [
						{
							"id": "true",
							"name": "Yes"
						},
						{
							"id": "false",
							"name": "No"
						}
					],
					"name": "Escalated",
					"id": "IsEscalated",
					"inputType": "select",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Company",
					"id": "SuppliedCompany",
					"inputType": "input",
					"type": "Number",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Email",
					"id": "SuppliedEmail",
					"inputType": "input",
					"type": "Number",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Name",
					"id": "SuppliedName",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Phone",
					"id": "SuppliedPhone",
					"inputType": "input",
					"type": "String",
					"required": false
				}
			],
			"dynamicInputFields": true,
			"dynamicInputFieldsRequest": "function dynamicInputFieldsRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Case\";\n    var update;\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        update = params.params.find(p => p.id === \"Update\");\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\" + entity + \"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['step'] = { update: update };\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicInputFieldsParse": "function dynamicInputFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n    var update;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_UNKNOWN\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        update = params.step && params.step.update ? params.step.update : null;\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n            let customField;\n            let type;\n\n            fields.map(function (el) {\n                customField = {};\n                \n                // if the field is custom field\n                if ((el.custom === true && !el.autoNumber) || \n                    (el.name === \"Type\" || el.name === \"Status\" || el.name === \"Priority\" || el.name === \"Origin\" || el.name === \"Reason\")) {\n\n                    type = el.type;\n                    // adding type field only to those fields which are custom / here Type, Status, Priority, Origin, Reason are static\n                    // but to save 4 extra requests we are using them here.\n                    if (el.name === \"Type\" || el.name === \"Status\" || el.name === \"Priority\" || el.name === \"Origin\" || el.name === \"Reason\")\n                        customField['id'] = el.name\n                    else \n                        customField['id'] = el.name + \"@\" + type\n\n                    customField['name'] = el.label\n                    customField['defaultValue'] = el.defaultValue\n                    customField['type'] = type && (type === \"date\" || type === \"datetime\") ? \"Date\" : \"String\"\n                    customField['description'] = el.inlineHelpText\n\n                    // Using few fields to infer if they are required or not\n                    if (el.createable && !el.defaultedOnCreate && !el.nillable)\n                        customField['required'] = true\n                    else\n                        customField['required'] = false\n\n                    // exception for few fields\n                    if (el.name === \"Status\" || el.name === \"Origin\") \n                        customField['required'] = true\n\n                    if (type) {\n\n                        // adding options for the dropdown type fields\n                        if (type === \"picklist\" || type === \"boolean\" || type === \"multipicklist\") {\n\n                            if (type === \"picklist\" || type === \"boolean\")\n                                customField['inputType'] = \"select\";\n                            else\n                                customField['inputType'] = \"multiselect\";\n\n                            customField['fixedValueSource'] = [];\n\n                            if (type === \"boolean\") {\n\n                                // checkbox can take 2 values either true or false\n                                customField['fixedValueSource'].push({ id: \"true\", name: \"Yes\" });\n                                customField['fixedValueSource'].push({ id: \"false\", name: \"No\" });\n\n                            } else {\n\n                                // options for picklist\n                                el.picklistValues.forEach(op => {\n\n                                    // if the value is active\n                                    if (op.active) {\n                                        customField['fixedValueSource'].push({\n                                            \"id\": op.value || op.label,\n                                            \"name\": op.label\n                                        });\n                                    }\n                                }, this);\n                            }\n\n                        } else {\n\n                            customField['inputType'] = \"input\";\n                            // adding reference / lookup fields\n                            if (type === \"reference\") {\n\n                                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0]) {\n\n                                    // lookup / reference fields\n                                    switch (el.referenceTo[0]) {\n                                        case \"Contact\":\n                                            customField['searchAction'] = \"search-contact\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Account\":\n                                            customField['searchAction'] = \"search-account\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Lead\":\n                                            customField['searchAction'] = \"search-lead\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Opportunity\":\n                                            customField['searchAction'] = \"search-opportunity\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Task\":\n                                            customField['searchAction'] = \"search-task\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Case\":\n                                            customField['searchAction'] = \"search-case\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Event\":\n                                            customField['searchAction'] = \"search-event\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"User\":\n                                            customField['searchAction'] = \"search-user\";\n                                            customField['searchID'] = \"Id\";\n                                    }\n                                }\n                            } else if (type === \"textarea\")\n                                customField['inputType'] = \"textArea\";\n                        }\n                    }\n                    retObj['data'].push(customField);\n                } \n            }, this);\n\n            const recordTypes = (body.recordTypeInfos || []).filter(type => type.available && !type.master)\n            if (recordTypes && recordTypes.length) {\n                let defaultOpt\n                let field = { \n                    type: 'String',\n                    inputType: 'select',\n                    name: 'Record Type',\n                    required: true,\n                    id: 'recordTypeId',\n                    fixedValueSource: []\n                }\n\n                // options for picklist\n                recordTypes.forEach(op => {\n                    defaultOpt = op.defaultRecordTypeMapping === true ? op.recordTypeId : defaultOpt\n                    field['fixedValueSource'].push({\n                        'id': op.recordTypeId,\n                        'name': op.name\n                    })\n                })\n                field.defaultValue = defaultOpt || undefined\n                retObj['data'].push(field)\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
			"responseFields": [
				{
					"name": "Case Id",
					"id": "id",
					"type": "String",
					"description": "Id of the newly added Case"
				}
			]
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdcb1",
			"name": "Add or Update a Contact",
			"id": "add-contact",
			"priority": 1,
			"entity": "person",
			"description": "Creates a new Contact or updates an existing Contact",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {}\n    var update\n    var moment\n    var entity = \"Contact\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    /**\n     * Sanitizes the user input\n     * @param {Object} userInput\n     * @param {Object} stepData\n     */\n\n    var sanitizeUserInput = function(userInput, stepData) {\n\n        let dataType\n        let sanitizedValue\n        let dataTypeArray\n        let skipFields = stepData && stepData.skipFields ? stepData.skipFields.split(',') : []\n\n        delete userInput['Update']\n        delete userInput['value']\n        delete userInput['field']\n        delete userInput['copyMailToOther']\n        delete userInput['hardUpdateRecord']\n\n        // copy mailing address to other address\n        if (userInput['copyMailToOther']) {\n            ['MailingStreet', 'MailingCity', 'MailingPostalCode', 'MailingState', 'MailingCountry'].forEach(el => {\n                if (userInput[el])\n                    userInput[el.replace('Mailing', \"Other\")] = userInput[el];\n            });\n        }\n\n        // sanitize the user inputs\n        Object.keys(userInput).forEach(function (key) {\n\n            if (key.split(\"@\").length > 1) {\n\n                dataTypeArray = key.split(\"@\");\n                dataType = dataTypeArray.pop();\n\n                if (dataType === \"date\" || dataType === \"datetime\") {\n\n                    // checking if the input value is valid date or not\n                    if (moment(userInput[key]).isValid())\n                        sanitizedValue = moment(userInput[key]).toISOString();\n                    else\n                    // INFO : just for now testing the behaviour of API\n                        sanitizedValue = userInput[key];\n\n                } else if (dataType === \"boolean\") {\n\n                    sanitizedValue = (userInput[key] === \"true\");\n\n                } else if (dataType === \"multipicklist\") {\n                    let tempArr = [];\n                    if (userInput[key] instanceof Array) {\n                        userInput[key].forEach(v => {\n                            tempArr.push(v.value);\n                        });\n                    } else\n                        tempArr.push(userInput[key])\n\n                    sanitizedValue = tempArr.join('; ');\n                } else {\n                    sanitizedValue = userInput[key];\n                }\n\n                // finally setting the sanitizedValue of the input value\n                userInput[dataTypeArray.join('')] = sanitizedValue;\n                delete userInput[key];\n\n            } else if (key === 'Birthdate') {\n                // checking if the input value is valid date or not\n                if (moment(userInput[key]).isValid())\n                    userInput[key] = moment(userInput[key]).toISOString();\n            }\n\n        }, this);\n\n        skipFields.forEach(field => delete userInput[field])\n    }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params'] || !utils['moment']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let userInput = params['params'];\n        update = userInput['Update'] ? userInput['Update'] : \"No\";\n        let hardUpdateRecord = userInput['hardUpdateRecord'] ? (userInput['hardUpdateRecord'] === \"Yes\") : true\n        moment = utils['moment']\n\n        let fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n        let loginInstanceUrl = fetchedParams['instance_url'];\n        let REST_ENDPOINT = \"/services/data\";\n        let API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        // common options Variables\n        let options = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (update === 'No' || (params['step'] && params['step']['value'] === stepValueUpdate)) {\n\n            options['method'] = 'POST'\n            options['url'] = '/sobjects/' + entity + '/'\n\n            // sanitizes the userInput\n            sanitizeUserInput(userInput, params['step'])\n\n            if (update === 'Yes' && (params['step'] && params['step']['contactId'])) {\n\n                options.method = \"PATCH\";\n                options.url = \"/sobjects/\" + entity + \"/\" + params['step']['contactId']\n                retObj['step'] = { contactId: params['step']['contactId'] }\n\n            }\n\n            // now add the body to the request\n            options['body'] = userInput;\n\n        } else if (params['step'] && params['step']['value'] === stepValueFetchObj) {\n            // if contact id is present\n            if (params['step']['contactId']) {\n                // send the request for fetching whole object corresponding to given id\n                options.method = \"GET\"\n                options.url = `/sobjects/Contact/${params['step']['contactId']}`\n                retObj['step'] = {value: stepValueFetchObj, contactId: params['step']['contactId']}\n            } else {\n                options['method'] = 'POST'\n                options['url'] = '/sobjects/' + entity + '/'\n                // sanitizes the userInput\n                sanitizeUserInput(userInput, params['step'])\n                // now add the body to the request\n                options['body'] = userInput\n            }\n\n        } else if (update === 'Yes') {\n\n            let matchField = userInput['field'];\n            let url = \"/query/?q=select+id+from+\" + entity + \"+where+\";\n            let matchfieldSplit;\n            let matchFieldType;\n\n            // if user selected update but \n            if (!userInput['field'] || !userInput['value']) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Missing input for 'Value to check for'. This is required if 'Update if existing' is Yes.\";\n                return callback(retObj);\n            }\n\n            // if the selected matching field is custom field, extract its data type from name\n            if (userInput['field'].split('@').length > 1) {\n\n                matchfieldSplit = userInput['field'].split('@');\n                matchFieldType = matchfieldSplit.pop();\n                matchField = matchfieldSplit.join('');\n\n            }\n            // format the query according to the coming field Type\n            if ((matchField.includes(\"Date\") || matchField.includes(\"date\") || matchField === \"SystemModstamp\") || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n                if (moment(userInput['value']).isValid())\n                    userInput['value'] = moment(userInput['value']).toISOString();\n\n                url += matchField + \"=\" + userInput['value'];\n            }\n            else\n                url += matchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n\n            options['method'] = 'GET';\n            options['url'] = url;\n            retObj['step'] = { value: stepValueSearch, hardUpdateRecord: hardUpdateRecord }\n\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n        if (response['statusCode'] == 201) {\n\n            var id = body.id;\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {\n                parsedValues: {\n                    id: id\n                }\n            };\n\n        } else if (response['statusCode'] == 200) {\n\n            let contactId = body && body.records && body.records[0] && body.records[0].Id ? body.records[0].Id : \"\";\n            if (params['step']['value'] === stepValueSearch) {\n\n                retObj['status'] = \"SUCCESS\"\n\n                if (params['step']['hardUpdateRecord'])\n                    retObj['step'] = { value: stepValueUpdate , contactId: contactId }\n                else\n                    retObj['step'] = { value: stepValueFetchObj , contactId: contactId }\n\n            } else if (params['step']['value'] === stepValueFetchObj) {\n\n                let skip = []\n                Object.keys(body).forEach(field => {\n                    if (body[field] !== \"\" && body[field] != null)\n                        skip.push(field)\n                }, this);\n\n                retObj['status'] = \"SUCCESS\"\n                retObj['step'] = { value: stepValueUpdate, contactId: params['step']['contactId'], skipFields: skip.join(',') }\n            }\n\n        } else if (response['statusCode'] == 204) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {\n                parsedValues: {\n                    id: params['step'] && params['step']['contactId'] ? params['step']['contactId'] : \"\"\n                }\n            };\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the duplicate search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    return callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update if existing",
					"id": "Update",
					"inputType": "select",
					"type": "String",
					"defaultValue": "No",
					"required": true,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Check for duplicates using",
					"id": "field",
					"description": "Select the contact property to be used to check for duplicates. We recommend this to be the email address",
					"inputType": "select",
					"type": "String",
					"required": false,
					"defaultValue": "Email",
					"groupName": "Update",
					"groupType": "COLLECTION",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Contact/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value to check for",
					"id": "value",
					"inputType": "input",
					"description": "Enter the value (of property selected above) to look for duplicates",
					"type": "String",
					"groupName": "Update",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update existing data?",
					"id": "hardUpdateRecord",
					"inputType": "select",
					"description": "Select 'Yes' if this Action's input data should override Salesforce field data (if present).",
					"type": "String",
					"defaultValue": "Yes",
					"required": false,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Salutation",
					"id": "salutation",
					"inputType": "select",
					"defaultValue": "",
					"type": "String",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/sobjects/Contact/describe',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParseForSalutation(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n            fields = fields.filter(p => p.label === \"Salutation\");\n\n            if (fields && fields[0].picklistValues.length) {\n                fields[0].picklistValues.map(function (el) {\n\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.value\n                    });\n\n                }, this);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "First Name",
					"id": "FirstName",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Last Name",
					"id": "LastName",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": true
				},
				{
					"fixedValueSource": [],
					"name": "Email Address",
					"id": "Email",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Title",
					"id": "Title",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Contact Owner",
					"id": "OwnerId",
					"inputType": "select",
					"type": "String",
					"searchAction": "search-user",
					"searchID": "Id",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+id, name+FROM+USER+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n\n            var arr = parsed.records;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Name']\n                });\n            }\n            \n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Reports To",
					"id": "ReportsToId",
					"inputType": "select",
					"type": "String",
					"searchAction": "search-contact",
					"searchID": "Id",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n        \n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+Id, Name+FROM+CONTACT+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n        retObj.step = { limit: LIMIT }\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n        \n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n            var arr = parsed.records;\n\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Name']\n                });\n            }\n\n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Birth Date",
					"id": "Birthdate",
					"inputType": "input",
					"type": "Date",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Account",
					"id": "AccountId",
					"inputType": "select",
					"defaultValue": "",
					"type": "String",
					"searchAction": "search-account",
					"searchID": "Id",
					"required": false,
					"description": "Links the contact to this account",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+Id, Name+FROM+ACCOUNT+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n        \n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n            var arr = parsed.records;\n\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Name']\n                });\n            }\n\n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Lead Source",
					"id": "LeadSource",
					"inputType": "select",
					"defaultValue": "",
					"type": "String",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/sobjects/Contact/describe',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n            var fields = parsed.fields;\n            var picklistValues;\n\n            fields.forEach(function (data) {\n                if (data.name == \"LeadSource\") {\n                    picklistValues = data.picklistValues;\n                }\n            });\n\n            var arr = picklistValues;\n            var responseObjArray = [];\n            for (var index in arr) {\n                if (arr[index]['active']) {\n                    responseObjArray.push({\n                        id: arr[index]['value'],\n                        name: arr[index]['label']\n                    });\n                }\n            }\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Department",
					"id": "Department",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Description",
					"id": "Description",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Assistant's Name",
					"id": "AssistantName",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Asst. Phone",
					"id": "AssistantPhone",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Home Phone",
					"id": "HomePhone",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Mobile Phone",
					"id": "MobilePhone",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Other Phone",
					"id": "OtherPhone",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Phone",
					"id": "Phone",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Business Fax",
					"id": "Fax",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Street",
					"id": "MailingStreet",
					"inputType": "input",
					"type": "String",
					"groupName": "Mailing Address",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "City",
					"id": "MailingCity",
					"inputType": "input",
					"groupName": "Mailing Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Zip/Postal Code",
					"id": "MailingPostalCode",
					"inputType": "input",
					"groupName": "Mailing Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "State/Province",
					"id": "MailingState",
					"inputType": "input",
					"groupName": "Mailing Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Country",
					"id": "MailingCountry",
					"inputType": "input",
					"groupName": "Mailing Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Copy of Mailing Address",
					"id": "copyMailToOther",
					"inputType": "select",
					"defaultValue": "No",
					"type": "String",
					"required": false,
					"groupName": "Other Address",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Street",
					"id": "OtherStreet",
					"inputType": "input",
					"type": "String",
					"groupName": "Other Address",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "City",
					"id": "OtherCity",
					"inputType": "input",
					"groupName": "Other Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Zip/Postal Code",
					"id": "OtherPostalCode",
					"inputType": "input",
					"groupName": "Other Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "State/Province",
					"id": "OtherState",
					"inputType": "input",
					"groupName": "Other Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Country",
					"id": "OtherCountry",
					"inputType": "input",
					"groupName": "Other Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				}
			],
			"dynamicInputFields": true,
			"dynamicInputFieldsRequest": "function dynamicInputFieldsRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Contact\";\n    var update;\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        update = params.params.find(p => p.id === \"Update\");\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\" + entity + \"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['step'] = { update: update };\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicInputFieldsParse": "function dynamicInputFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n    var update;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_UNKNOWN\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        update = params.step && params.step.update ? params.step.update : null;\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n            let customField;\n            let type;\n\n            fields.map(function (el) {\n                customField = {};\n\n                // if the field is custom field\n                if ((el.custom === true && !el.autoNumber) || (el.name === 'Jigsaw' || el.name === 'DoNotCall' || el.name === 'HasOptedOutOfEmail' || \n                    el.name === 'HasOptedOutOfFax' || el.name === 'MailingCountryCode' || el.name === 'MailingStateCode' || el.name === 'OtherCountryCode' || el.name === 'OtherStateCode')) {\n\n                    type = el.type;\n                    customField['name'] = el.label\n                    if (el.custom === true) \n                        customField['id'] = el.name + \"@\" + type\n                    else\n                        customField['id'] = el.name\n\n                    customField['defaultValue'] = el.defaultValue\n                    customField['type'] = type && (type === \"date\" || type === \"datetime\") ? \"Date\" : \"String\"\n                    customField['description'] = el.inlineHelpText\n\n                    // Using few fields to infer if they are required or not\n                    if (el.createable && !el.defaultedOnCreate && !el.nillable)\n                        customField['required'] = true\n                    else\n                        customField['required'] = false\n\n                    if (type) {\n\n                        // adding options for the dropdown type fields\n                        if (type === \"picklist\" || type === \"boolean\" || type === \"multipicklist\") {\n\n                            if (type === \"picklist\" || type === \"boolean\")\n                                customField['inputType'] = \"select\";\n                            else\n                                customField['inputType'] = \"multiselect\";\n\n                            customField['fixedValueSource'] = [];\n\n                            if (type === \"boolean\") {\n\n                                // checkbox can take 2 values either true or false\n                                customField['fixedValueSource'].push({ id: \"true\", name: \"Yes\" });\n                                customField['fixedValueSource'].push({ id: \"false\", name: \"No\" });\n\n                            } else {\n\n                                // options for picklist\n                                el.picklistValues.forEach(op => {\n\n                                    // if the value is active\n                                    if (op.active) {\n                                        customField['fixedValueSource'].push({\n                                            \"id\": op.value || op.label,\n                                            \"name\": op.label\n                                        });\n                                    }\n                                }, this);\n                            }\n\n                        } else {\n\n                            customField['inputType'] = \"input\";\n                            // adding reference / lookup fields\n                            if (type === \"reference\") {\n\n                                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0]) {\n\n                                    // lookup / reference fields\n                                    switch (el.referenceTo[0]) {\n                                        case \"Contact\":\n                                            customField['searchAction'] = \"search-contact\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Account\":\n                                            customField['searchAction'] = \"search-account\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Lead\":\n                                            customField['searchAction'] = \"search-lead\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Opportunity\":\n                                            customField['searchAction'] = \"search-opportunity\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Task\":\n                                            customField['searchAction'] = \"search-task\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Case\":\n                                            customField['searchAction'] = \"search-case\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Event\":\n                                            customField['searchAction'] = \"search-event\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"User\":\n                                            customField['searchAction'] = \"search-user\";\n                                            customField['searchID'] = \"Id\";\n                                    }\n                                }\n                            } else if (type === \"textarea\")\n                                customField['inputType'] = \"textArea\";\n                        }\n                    }\n                    // adding groups to address fields\n                    if (el.name === 'MailingCountryCode' || el.name === 'MailingStateCode') {\n                        \n                        customField['name'] = customField['name'].replace('Mailing', '')\n                        customField['groupName'] = \"Mailing Address\"\n                        customField['groupType'] = \"COLLECTION\"\n                    } else if (el.name === 'OtherCountryCode' || el.name === 'OtherStateCode') {\n                        \n                        customField['name'] = customField['name'].replace('Other', '')\n                        customField['groupName'] = \"Other Address\"\n                        customField['groupType'] = \"COLLECTION\"\n                    }\n                    retObj['data'].push(customField);\n                }\n            }, this);\n\n            const recordTypes = (body.recordTypeInfos || []).filter(type => type.available && !type.master)\n            if (recordTypes && recordTypes.length) {\n                let defaultOpt\n                let field = { \n                    type: 'String',\n                    inputType: 'select',\n                    name: 'Record Type',\n                    required: true,\n                    id: 'recordTypeId',\n                    fixedValueSource: []\n                }\n\n                // options for picklist\n                recordTypes.forEach(op => {\n                    defaultOpt = op.defaultRecordTypeMapping === true ? op.recordTypeId : defaultOpt\n                    field['fixedValueSource'].push({\n                        'id': op.recordTypeId,\n                        'name': op.name\n                    })\n                })\n                field.defaultValue = defaultOpt || undefined\n                retObj['data'].push(field)\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
			"responseFields": [
				{
					"name": "Contact Id",
					"id": "id",
					"type": "String",
					"description": "Id of the newly added Contact"
				}
			]
		},
		{
			"dynamicInputFieldsDependsOn": [
				"customType"
			],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdcb0",
			"name": "Add or Update a Custom Object",
			"id": "add-custom-object",
			"priority": 2,
			"entity": "dataEntry",
			"description": "Creates a new Custom Object or updates an existing Custom Object",
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var update;\n    var moment;\n    var entity;\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    /**\n     * Sanitizes the user input\n     * @param {Object} userInput\n     * @param {Object} stepData\n     */\n\n    var sanitizeUserInput = function(userInput, stepData) {\n\n        let dataType\n        let sanitizedValue\n        let dataTypeArray\n        let skipFields = stepData && stepData.skipFields ? stepData.skipFields.split(',') : []\n\n        delete userInput['Update']\n        delete userInput['value']\n        delete userInput['field']\n        delete userInput['customType']\n        delete userInput['hardUpdateRecord']\n\n        // sanitize the user inputs\n        Object.keys(userInput).forEach(function (key) {\n\n            if (key.split(\"@\").length > 1) {\n\n                dataTypeArray = key.split(\"@\");\n                dataType = dataTypeArray.pop();\n\n                if (dataType === \"date\" || dataType === \"datetime\") {\n\n                    // checking if the input value is valid date or not\n                    if (moment(userInput[key]).isValid())\n                        sanitizedValue = moment(userInput[key]).toISOString();\n                    else\n                    // INFO : just for now testing the behaviour of API\n                        sanitizedValue = userInput[key];\n\n                } else if (dataType === \"boolean\") {\n\n                    sanitizedValue = (userInput[key] === \"true\");\n\n                } else if (dataType === \"multipicklist\") {\n                    let tempArr = [];\n                    if (userInput[key] instanceof Array) {\n                        userInput[key].forEach(v => {\n                            tempArr.push(v.value);\n                        });\n                    } else\n                        tempArr.push(userInput[key])\n\n                    sanitizedValue = tempArr.join('; ');\n                } else {\n                    sanitizedValue = userInput[key];\n                }\n\n                // finally setting the sanitizedValue of the input value\n                userInput[dataTypeArray.join('')] = sanitizedValue;\n                delete userInput[key];\n            }\n\n        }, this);\n\n        skipFields.forEach(field => delete userInput[field])\n    }\n\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let userInput = params['params'];\n        let hardUpdateRecord = userInput['hardUpdateRecord'] ? (userInput['hardUpdateRecord'] === \"Yes\") : true\n\n        // fetch the selected type of entity\n        entity = userInput['customType']\n        moment = utils['moment'] ? utils['moment'] : null\n        update = userInput['Update'] ? userInput['Update'] : \"No\";\n\n        if (!entity || !moment) {\n\n            retObj['status'] = \"ERROR\"\n            retObj['error'] = {}\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n            retObj['error']['message'] = \"Error: Missing required user input\"\n\n        }\n\n        let fetchedParams =  params['userapp'].fetchAuthParams(params['appinfo']);\n        let loginInstanceUrl = fetchedParams['instance_url'];\n        let REST_ENDPOINT = \"/services/data\";\n        let API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        // common options Variables\n        var options = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (update === 'No' || (params['step'] && params['step']['value'] === stepValueUpdate)) {\n\n            options['method'] = 'POST';\n            options['url'] = '/sobjects/' + entity + '/';\n\n            // sanitizes the userInput\n            sanitizeUserInput(userInput, params['step'])\n\n            if (update === 'Yes' && (params['step'] && params['step']['objectId'])) {\n                options.method = \"PATCH\";\n                options.url = \"/sobjects/\" + entity + \"/\" + params['step']['objectId'];\n                retObj['step'] = { objectId: params['step']['objectId'] }\n            }\n\n            // now add the body to the request\n            options['body'] = userInput;\n\n        } else if (params['step'] && params['step']['value'] === stepValueFetchObj) {\n            \n            if (params['step']['objectId']) {\n                // send the request for fetching whole object corresponding to given id\n                options.method = \"GET\"\n                options.url = `/sobjects/${entity}/${params['step']['objectId']}`\n                retObj['step'] = {value: stepValueFetchObj, objectId: params['step']['objectId']}\n            } else {\n                options['method'] = 'POST'\n                options['url'] = '/sobjects/' + entity + '/'\n\n                // sanitizes the userInput\n                sanitizeUserInput(userInput, params['step'])\n                // now add the body to the request\n                options['body'] = userInput\n            }\n\n        } else if (update === 'Yes') {\n\n            let matchField = userInput['field'];\n            let url = \"/query/?q=select+id+from+\" + entity + \"+where+\";\n            let matchfieldSplit;\n            let matchFieldType;\n\n            // if user selected update but field and value not available throw error\n            if (!userInput['field'] || !userInput['value']) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Missing input for 'Value to check for'. This is required if 'Update if existing' is Yes.\";\n                return callback(retObj);\n            }\n\n            // if the selected matching field is custom field, extract its data type from name\n            if (userInput['field'].split('@').length > 1) {\n\n                matchfieldSplit = userInput['field'].split('@');\n                matchFieldType = matchfieldSplit.pop();\n                matchField = matchfieldSplit.join('');\n            }\n\n            // format the query according to the coming field Type\n            if ((matchField.includes(\"Date\") || matchField.includes(\"date\") || matchField === \"SystemModstamp\") || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n                if (moment(userInput['value']).isValid())\n                    userInput['value'] = moment(userInput['value']).toISOString();\n\n                url += matchField + \"=\" + userInput['value'];\n            }\n            else\n                url += matchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n            options['method'] = 'GET';\n            options['url'] = url;\n            retObj['step'] = { value: stepValueSearch, hardUpdateRecord: hardUpdateRecord }\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n    callback(retObj);\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" }\n    var errorMsg\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        var response = params['response']\n        var body = response['body']\n        if (response['statusCode'] == 201) {\n\n            var id = body.id\n            retObj['status'] = \"SUCCESS\"\n            retObj['data'] = {\n                parsedValues: {\n                    id: id\n                }\n            }\n\n        } else if (response['statusCode'] == 200) {\n\n            let objectId = body && body.records && body.records[0] && body.records[0].Id ? body.records[0].Id : \"\";\n            if (params['step']['value'] === stepValueSearch) {\n\n                retObj['status'] = \"SUCCESS\"\n\n                if (params['step']['hardUpdateRecord'])\n                    retObj['step'] = { value: stepValueUpdate , objectId: objectId }\n                else\n                    retObj['step'] = { value: stepValueFetchObj , objectId: objectId }\n\n            } else if (params['step']['value'] === stepValueFetchObj) {\n\n                let skip = []\n                Object.keys(body).forEach(field => {\n                    if (body[field] !== \"\" && body[field] != null)\n                        skip.push(field)\n                }, this);\n\n                retObj['status'] = \"SUCCESS\"\n                retObj['step'] = { value: stepValueUpdate, objectId: params['step']['objectId'], skipFields: skip.join(',') }\n            }\n\n        } else if (response['statusCode'] == 204) {\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {\n                parsedValues: {\n                    id: params['step'] && params['step']['objectId'] ? params['step']['objectId'] : \"\"\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the duplicate search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    return callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Custom Object Type",
					"id": "customType",
					"description": "Select the Custom object type to create or update.",
					"inputType": "select",
					"type": "String",
					"required": true,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/sobjects?limit=5',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let response = params['response'];\n        let body = response['body'];\n        let responseObjArray = []\n\n        if (response['statusCode'] == 200 && response['body'] && response['body'].sobjects) {\n\n            response['body'].sobjects.filter(obj => obj.label && obj.name)\n            .sort(function(x, y) { return y.custom - x.custom })\n            .forEach(obj => {\n                responseObjArray.push({\n                    \"id\": obj.name,\n                    \"name\": obj.label\n                })\n            })\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update if existing",
					"id": "Update",
					"inputType": "select",
					"description": "May not work as expected for few Objects due to respective field level permissions.",
					"type": "String",
					"defaultValue": "No",
					"required": true,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Check for duplicates using",
					"id": "field",
					"description": "Select the account property to be used to check for duplicates.",
					"inputType": "select",
					"type": "String",
					"required": false,
					"groupName": "Update",
					"groupType": "COLLECTION",
					"dependsOn": "customType",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params.params) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        entity = params['params']['customType']\n\n        if (!entity) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj)\n        }\n\n        // Generate HTTP Request body\n\n        var fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: `/sobjects/${entity}/describe/`,\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value to check for",
					"id": "value",
					"inputType": "input",
					"description": "Enter the value (of property selected above) to look for duplicates",
					"type": "String",
					"groupName": "Update",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update existing data?",
					"id": "hardUpdateRecord",
					"inputType": "select",
					"description": "Select 'Yes' if this Action's input data should override Salesforce field data (if present).",
					"type": "String",
					"defaultValue": "Yes",
					"required": false,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Object Owner",
					"id": "OwnerId",
					"inputType": "select",
					"type": "String",
					"searchAction": "search-user",
					"searchID": "Id",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+id, name+FROM+USER+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n\n            var arr = parsed.records;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Name']\n                });\n            }\n            \n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				}
			],
			"dynamicInputFields": true,
			"dynamicInputFieldsRequest": "function dynamicInputFieldsRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity\n    var update;\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let inputParams = params.params && params.params ? params.params : []\n        entity = inputParams.find(p => p.id === \"customType\") || {}\n\n        if (!entity || !entity.value) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj)\n        }\n\n        // Generate HTTP Request body\n        var fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\" + entity.value + \"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicInputFieldsParse": "function dynamicInputFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n    var update;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_UNKNOWN\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        update = params.step && params.step.update ? params.step.update : null;\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n            let customField;\n            let type;\n            \n            fields.map(function (el) {\n                customField = {};\n\n                if ((!el.autoNumber && el.label !== \"Owner ID\" && el.name !== 'Id' && el.name !== 'IsDeleted' &&\n                     el.name !== 'CreatedById' && el.name !== 'CreatedDate' && el.name !== 'LastModifiedById' &&\n                     el.name !== 'LastModifiedDate' && el.name !== 'SystemModstamp' && el.name !== 'id' &&\n                     el.name !== 'LastActivityDate' && el.name !== 'LastViewedDate' && el.name !== 'LastReferencedDate')) {\n\n                    type = el.type\n                    customField['id'] = el.name + \"@\" + type\n                    customField['name'] = el.label\n                    if (type != \"multipicklist\")\n                        customField['defaultValue'] = el.defaultValue\n                    customField['type'] = type && (type === \"date\" || type === \"datetime\") ? \"Date\" : \"String\"\n                    customField['description'] = el.inlineHelpText\n\n                    // Using few fields to infer if they are required or not\n                    if (el.createable && !el.defaultedOnCreate && !el.nillable)\n                        customField['required'] = true\n                    else\n                        customField['required'] = false\n\n                    // exception for Name custom field\n                    if (el.name === \"Name\")\n                        customField['required'] = true\n\n                    if (type) {\n\n                        // adding options for the dropdown type fields\n                        if (type === \"picklist\" || type === \"boolean\" || type === \"multipicklist\") {\n\n                            if (type === \"picklist\" || type === \"boolean\")\n                                customField['inputType'] = \"select\";\n                            else\n                                customField['inputType'] = \"multiselect\";\n\n                            customField['fixedValueSource'] = [];\n\n                            if (type === \"boolean\") {\n\n                                // checkbox can take 2 values either true or false\n                                customField['fixedValueSource'].push({ id: \"true\", name: \"Yes\" });\n                                customField['fixedValueSource'].push({ id: \"false\", name: \"No\" });\n\n                            } else {\n                                // options for picklist\n                                el.picklistValues.forEach(op => {\n\n                                    // if the value is active\n                                    if (op.active) {\n                                        customField['fixedValueSource'].push({\n                                            \"id\": op.value || op.label,\n                                            \"name\": op.label\n                                        });\n                                    }\n                                }, this);\n                            }\n\n                        } else {\n\n                            customField['inputType'] = \"input\";\n                            // adding reference / lookup fields\n                            if (type === \"reference\") {\n\n                                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0]) {\n\n                                    // lookup / reference fields\n                                    switch (el.referenceTo[0]) {\n                                        case \"Contact\":\n                                            customField['searchAction'] = \"search-contact\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Account\":\n                                            customField['searchAction'] = \"search-account\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Lead\":\n                                            customField['searchAction'] = \"search-lead\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Opportunity\":\n                                            customField['searchAction'] = \"search-opportunity\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Task\":\n                                            customField['searchAction'] = \"search-task\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Case\":\n                                            customField['searchAction'] = \"search-case\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Event\":\n                                            customField['searchAction'] = \"search-event\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"User\":\n                                            customField['searchAction'] = \"search-user\";\n                                            customField['searchID'] = \"Id\";\n                                    }\n                                }\n                            } else if (type === \"textarea\")\n                                customField['inputType'] = \"textArea\";\n                        }\n                    }\n                    retObj['data'].push(customField);\n                }\n            }, this);\n\n            const recordTypes = (body.recordTypeInfos || []).filter(type => type.available && !type.master)\n            if (recordTypes && recordTypes.length) {\n                let defaultOpt\n                let field = { \n                    type: 'String',\n                    inputType: 'select',\n                    name: 'Record Type',\n                    required: true,\n                    id: 'recordTypeId',\n                    fixedValueSource: []\n                }\n\n                // options for picklist\n                recordTypes.forEach(op => {\n                    defaultOpt = op.defaultRecordTypeMapping === true ? op.recordTypeId : defaultOpt\n                    field['fixedValueSource'].push({\n                        'id': op.recordTypeId,\n                        'name': op.name\n                    })\n                })\n                field.defaultValue = defaultOpt || undefined\n                retObj['data'].push(field)\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
			"responseFields": [
				{
					"name": "Custom Object Id",
					"id": "id",
					"type": "String",
					"description": "Id of the newly added/updated Custom Object"
				}
			]
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdcaf",
			"name": "Add or Update an Event",
			"id": "add-event",
			"priority": 2,
			"entity": "activity",
			"description": "Creates a new Event or updates an existing Event",
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var update;\n    var moment;\n    var entity = \"Event\";\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    /**\n     * Sanitizes the user input\n     * @param {Object} userInput\n     * @param {Object} stepData\n     */\n\n    var sanitizeUserInput = function(userInput, stepData) {\n\n        let dataType\n        let sanitizedValue\n        let dataTypeArray\n        let flagWhatId = false\n        let skipFields = stepData && stepData.skipFields ? stepData.skipFields.split(',') : []\n\n        delete userInput['Update']\n        delete userInput['value']\n        delete userInput['field']\n        delete userInput['hardUpdateRecord']\n\n        // sanitize the user inputs\n        Object.keys(userInput).forEach(function (key) {\n\n            if (key.split(\"@\").length > 1) {\n\n                dataTypeArray = key.split(\"@\");\n                dataType = dataTypeArray.pop();\n\n                if (dataType === \"date\" || dataType === \"datetime\") {\n\n                    // checking if the input value is valid date or not\n                    if (moment(userInput[key]).isValid())\n                        sanitizedValue = moment(userInput[key]).toISOString();\n                    else\n                    // INFO : just for now testing the behaviour of API\n                        sanitizedValue = userInput[key];\n\n                } else if (dataType === \"boolean\") {\n\n                    sanitizedValue = (userInput[key] === \"true\");\n\n                } else if (dataType === \"multipicklist\") {\n                    let tempArr = [];\n                    if (userInput[key] instanceof Array) {\n                        userInput[key].forEach(v => {\n                            tempArr.push(v.value);\n                        });\n                    } else\n                        tempArr.push(userInput[key])\n\n                    sanitizedValue = tempArr.join('; ');\n                } else {\n                    sanitizedValue = userInput[key];\n                }\n\n                // finally setting the sanitizedValue of the input value\n                userInput[dataTypeArray.join('')] = sanitizedValue;\n                delete userInput[key];\n\n            } else if (key === \"contactForName\" || key === \"leadForName\") {\n\n                // extracting value for WhoId\n                if (!userInput['WhoId']) {\n                    userInput['WhoId'] = userInput[key]\n                    if (key === \"leadForName\")\n                        flagWhatId = true\n                }\n                delete userInput[key];\n\n            } else if (key === \"accountForRelatedTo\" || key === \"opportunityForRelatedTo\" || key === \"caseForRelatedTo\") {\n\n                // extracting value for WhatId\n                if (!userInput['WhatId'])\n                    userInput['WhatId'] = userInput[key]\n                delete userInput[key]\n\n            } else if (key === 'ActivityDate' || key === 'RecurrenceStartDateTime' || key === 'RecurrenceEndDateOnly' || key === 'RemainderDateTime' || key === 'EndDateTime' || key === 'ActivityDateTime') {\n\n                // checking if the input value is valid date or not\n                if (moment(userInput[key]).isValid())\n                    userInput[key] = moment(userInput[key]).toISOString();\n            }\n\n        }, this);\n\n        if (!userInput['IsRecurrence'] || (userInput['IsRecurrence'] && userInput['IsRecurrence'] === \"No\")) {\n            ['RecurrenceTimeZoneSidKey', 'RecurrenceInstance', 'RecurrenceMonthOfYear', 'RecurrenceType', 'RecurrenceStartDateTime'\n                , 'RecurrenceEndDateOnly', 'RecurrenceDayOfMonth', 'RecurrenceDayOfWeekMask', 'RecurrenceInterval'].forEach(p => {delete userInput[p];});\n        }\n\n        // Check for recurring type of task creation\n        userInput['IsRecurrence'] = userInput['IsRecurrence'] ? (userInput['IsRecurrence'] === \"Yes\") : false;\n\n        // check for reminder settings\n        userInput['IsReminderSet'] = userInput['IsReminderSet'] ? (userInput['IsReminderSet'] === \"Yes\") : false;\n\n         // Check for IsAllDayEvent\n         userInput['IsAllDayEvent'] = userInput['IsAllDayEvent'] ? (userInput['IsAllDayEvent'] === \"Yes\") : false;\n         \n        // check for IsPrivate\n        userInput['IsPrivate'] = userInput['IsPrivate'] ? (userInput['IsPrivate'] === \"Yes\") : false;\n\n        // if lead entity is attached as WhoId, then need to remove WhatId from request.\n        if (flagWhatId)\n            delete userInput['WhatId']\n            \n        skipFields.forEach(field => delete userInput[field])\n    }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params'] || !utils['moment']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let userInput = params['params']\n        let hardUpdateRecord = userInput['hardUpdateRecord'] ? (userInput['hardUpdateRecord'] === \"Yes\") : true\n        moment = utils['moment']\n        update = userInput['Update'] ? userInput['Update'] : \"No\"\n\n        let fetchedParams = params['userapp'].fetchAuthParams(params['appinfo'])\n        let loginInstanceUrl = fetchedParams['instance_url']\n        let REST_ENDPOINT = \"/services/data\"\n        let API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        // common options Variables\n        let options = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (update === 'No' || (params['step'] && params['step']['value'] === stepValueUpdate)) {\n\n            options['method'] = 'POST';\n            options['url'] = '/sobjects/' + entity + '/';\n\n            // sanitizes the userInput\n            sanitizeUserInput(userInput, params['step'])\n\n            if (update === 'Yes' && (params['step'] && params['step']['eventId'])) {\n\n                // delete fields which can not be updated \n                delete userInput['IsRecurrence']\n\n                options.method = \"PATCH\";\n                options.url = \"/sobjects/\" + entity + \"/\" + params['step']['eventId'];\n                retObj['step'] = { eventId: params['step']['eventId'] }\n            }\n\n            // now add the body to the request\n            options['body'] = userInput;\n\n        } else if (params['step'] && params['step']['value'] === stepValueFetchObj) {\n\n            if (params['step']['eventId']) {\n                // send the request for fetching whole object corresponding to given id\n                options.method = \"GET\"\n                options.url = `/sobjects/Event/${params['step']['eventId']}`\n                retObj['step'] = {value: stepValueFetchObj, eventId: params['step']['eventId']}\n            } else {\n                options['method'] = 'POST'\n                options['url'] = '/sobjects/' + entity + '/'\n    \n                // sanitizes the userInput\n                sanitizeUserInput(userInput, params['step'])\n                 // now add the body to the request\n                options['body'] = userInput\n            }\n\n        } else if (update === 'Yes') {\n\n            let matchField = userInput['field'];\n            let url = \"/query/?q=select+id+from+\" + entity + \"+where+\";\n            let matchfieldSplit;\n            let matchFieldType;\n\n            // if user selected update but field and value not available throw error\n            if (!userInput['field'] || !userInput['value']) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Missing input for 'Value to check for'. This is required if 'Update if existing' is Yes.\";\n                return callback(retObj);\n            }\n\n            // if the selected matching field is custom field, extract its data type from name\n            if (userInput['field'].split('@').length > 1) {\n\n                matchfieldSplit = userInput['field'].split('@');\n                matchFieldType = matchfieldSplit.pop();\n                matchField = matchfieldSplit.join('');\n            }\n            \n            // format the query according to the coming field Type\n            if ((matchField.includes(\"Date\") || matchField.includes(\"date\") || matchField === \"SystemModstamp\") || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n                if (moment(userInput['value']).isValid())\n                    userInput['value'] = moment(userInput['value']).toISOString();\n\n                url += matchField + \"=\" + userInput['value'];\n            }\n            else\n                url += matchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n            options['method'] = 'GET';\n            options['url'] = url;\n            retObj['step'] = { value: stepValueSearch, hardUpdateRecord: hardUpdateRecord }\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n        if (response['statusCode'] == 201) {\n\n            var id = body.id;\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {\n                parsedValues: {\n                    id: id\n                }\n            };\n\n        } else if (response['statusCode'] == 200) {\n\n            let eventId = body && body.records && body.records[0] && body.records[0].Id ? body.records[0].Id : \"\";\n            if (params['step']['value'] === stepValueSearch) {\n\n                retObj['status'] = \"SUCCESS\"\n\n                if (params['step']['hardUpdateRecord'])\n                    retObj['step'] = { value: stepValueUpdate , eventId: eventId }\n                else\n                    retObj['step'] = { value: stepValueFetchObj , eventId: eventId }\n\n            } else if (params['step']['value'] === stepValueFetchObj) {\n\n                let skip = []\n                Object.keys(body).forEach(field => {\n                    if (body[field] !== \"\" && body[field] != null)\n                        skip.push(field)\n                }, this);\n\n                retObj['status'] = \"SUCCESS\"\n                retObj['step'] = { value: stepValueUpdate, eventId: params['step']['eventId'], skipFields: skip.join(',') }\n            }\n\n        } else if (response['statusCode'] == 204) {\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {\n                parsedValues: {\n                    id: params['step'] && params['step']['eventId'] ? params['step']['eventId'] : \"\"\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the duplicate search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    return callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update if existing",
					"id": "Update",
					"inputType": "select",
					"type": "String",
					"defaultValue": "No",
					"required": true,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Check for duplicates using",
					"id": "field",
					"description": "Select the Event property to be used to check for duplicates. We recommend this to be the subject",
					"inputType": "select",
					"type": "String",
					"required": false,
					"defaultValue": "Subject",
					"groupName": "Update",
					"groupType": "COLLECTION",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Event/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value to check for",
					"id": "value",
					"inputType": "input",
					"description": " Value for the above matching field",
					"type": "String",
					"groupName": "Update",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update existing data?",
					"id": "hardUpdateRecord",
					"inputType": "select",
					"description": "Select 'Yes' if this Action's input data should override Salesforce field data (if present).",
					"type": "String",
					"defaultValue": "Yes",
					"required": false,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Assigned to",
					"id": "OwnerId",
					"inputType": "select",
					"type": "String",
					"required": false,
					"searchAction": "search-user",
					"searchID": "Id",
					"groupName": "Event Information",
					"groupType": "COLLECTION",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+id, name+FROM+USER+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n\n            var arr = parsed.records;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Name']\n                });\n            }\n            \n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Start Date Time",
					"id": "ActivityDateTime",
					"inputType": "input",
					"type": "Date",
					"required": true,
					"groupName": "Event Information",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "End Date Time ",
					"id": "EndDateTime",
					"inputType": "input",
					"type": "String",
					"groupName": "Event Information",
					"groupType": "COLLECTION",
					"required": true
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "All-Day Event",
					"id": "IsAllDayEvent",
					"inputType": "select",
					"defaultValue": "No",
					"type": "String",
					"required": false,
					"groupName": "Event Information",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Due Date",
					"id": "ActivityDate",
					"inputType": "input",
					"description": "Due Date is required if 'All-Day Event' is 'Yes'",
					"type": "Date",
					"required": false,
					"groupName": "Event Information",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Description",
					"id": "Description",
					"inputType": "textArea",
					"type": "String",
					"required": false,
					"groupName": "Event Information",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Private",
					"id": "IsPrivate",
					"inputType": "select",
					"defaultValue": "No",
					"type": "String",
					"required": false,
					"groupName": "Event Information",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Location",
					"id": "Location",
					"inputType": "input",
					"type": "String",
					"required": false,
					"groupName": "Event Information",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Contact ID",
					"id": "contactForName",
					"inputType": "input",
					"groupName": "Contact/Lead",
					"groupType": "OR",
					"searchAction": "search-contact",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Lead ID",
					"id": "leadForName",
					"inputType": "input",
					"groupName": "Contact/Lead",
					"groupType": "OR",
					"searchAction": "search-lead",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Account ID",
					"id": "accountForRelatedTo",
					"inputType": "input",
					"groupName": "Related To",
					"groupType": "OR",
					"searchAction": "search-account",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Opportunity ID",
					"id": "opportunityForRelatedTo",
					"inputType": "input",
					"groupName": "Related To",
					"groupType": "OR",
					"searchAction": "search-opportunity",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Case ID",
					"id": "caseForRelatedTo",
					"inputType": "input",
					"groupName": "Related To",
					"groupType": "OR",
					"searchAction": "search-case",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Create Recurring Series of Events",
					"id": "IsRecurrence",
					"inputType": "select",
					"defaultValue": "No",
					"type": "String",
					"groupName": "Recurrence",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Recurrence Start Date",
					"id": "RecurrenceStartDateTime",
					"inputType": "input",
					"description": "",
					"type": "Date",
					"groupName": "Recurrence",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Recurrence End Date",
					"id": "RecurrenceEndDateOnly",
					"inputType": "input",
					"defaultValue": "",
					"type": "Date",
					"groupName": "Recurrence",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Recurrence Day of Month",
					"id": "RecurrenceDayOfMonth",
					"inputType": "input",
					"type": "String",
					"groupName": "Recurrence",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Recurrence of Week Mask",
					"id": "RecurrenceDayOfWeekMask",
					"inputType": "input",
					"type": "String",
					"groupName": "Recurrence",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Recurrence Interval",
					"id": "RecurrenceInterval",
					"inputType": "input",
					"type": "String",
					"groupName": "Recurrence",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Set Reminder",
					"id": "IsReminderSet",
					"inputType": "select",
					"defaultValue": "No",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Remainder Date/Time",
					"id": "RemainderDateTime",
					"inputType": "input",
					"type": "Date",
					"required": false
				}
			],
			"dynamicInputFields": true,
			"dynamicInputFieldsRequest": "function dynamicInputFieldsRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Event\";\n    var update;\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        update = params.params.find(p => p.id === \"Update\");\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\" + entity + \"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['step'] = { update: update };\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicInputFieldsParse": "function dynamicInputFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n    var update;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_UNKNOWN\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        update = params.step && params.step.update ? params.step.update : null;\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n            let customField;\n            let type;\n\n            fields.map(function (el) {\n                customField = {};\n\n                // if the field is custom field\n                if ((el.custom === true && !el.autoNumber)\n                    || (el.name === \"Status\" || el.name === \"Priority\" || el.name === \"CallType\" || el.name === \"Subject\"\n                        || el.name === \"RecurrenceTimeZoneSidKey\" || el.name === \"RecurrenceInstance\" || el.name === \"RecurrenceMonthOfYear\" || el.name === \"RecurrenceType\" || el.name === 'WhatId' || el.name === 'ShowAs' || el.name === 'WhoId')) {\n\n                    type = el.type;\n                    // adding type field only to those fields which are custom / here Type, Rating, Industry, Ownership are static \n                    // but to save 4 extra requests we are using them here.\n                    if (el.name === \"Status\" || el.name === \"Priority\" || el.name === \"CallType\" || el.name === \"Subject\" || el.name === 'WhatId' || el.name === 'ShowAs' || el.name === 'WhoId') {\n\n                        customField['id'] = el.name;\n                        customField[\"groupName\"] = \"Event Information\";\n                        customField[\"groupType\"] = \"COLLECTION\";\n\n                    } else if (el.name === \"RecurrenceTimeZoneSidKey\" || el.name === \"RecurrenceInstance\" || el.name === \"RecurrenceMonthOfYear\" || el.name === \"RecurrenceType\") {\n\n                        customField['id'] = el.name;\n                        customField[\"groupName\"] = \"Recurrence\";\n                        customField[\"groupType\"] = \"COLLECTION\";\n\n                    } else\n                        customField['id'] = el.name + \"@\" + type\n\n                    customField['name'] = el.label\n                    customField['defaultValue'] = el.defaultValue\n                    customField['type'] = type && (type === \"date\" || type === \"datetime\") ? \"Date\" : \"String\"\n                    customField['description'] = el.inlineHelpText\n\n                    // Using few fields to infer if they are required or not\n                    if ((el.createable && !el.defaultedOnCreate && !el.nillable) || (el.name === \"Status\" || el.name === \"Priority\" || el.name === \"Subject\"))\n                        customField['required'] = true\n                    else\n                        customField['required'] = false\n\n                    if (type) {\n\n                        // adding options for the dropdown type fields\n                        if (type === \"picklist\" || type === \"boolean\" || type === \"multipicklist\" || type === \"combobox\") {\n\n                            if (type != \"multipicklist\")\n                                customField['inputType'] = \"select\";\n                            else\n                                customField['inputType'] = \"multiselect\";\n\n                            customField['fixedValueSource'] = [];\n\n                            if (type === \"boolean\") {\n\n                                // checkbox can take 2 values either true or false\n                                customField['fixedValueSource'].push({ id: \"true\", name: \"Yes\" });\n                                customField['fixedValueSource'].push({ id: \"false\", name: \"No\" });\n\n                            } else {\n\n                                // options for picklist\n                                el.picklistValues.forEach(op => {\n\n                                    // if the value is active\n                                    if (op.active) {\n                                        customField['fixedValueSource'].push({\n                                            \"id\": op.value || op.label,\n                                            \"name\": op.label\n                                        });\n                                    }\n                                }, this);\n                            }\n\n                        } else {\n\n                            customField['inputType'] = \"input\";\n                            // adding reference / lookup fields\n                            if (type === \"reference\") {\n\n                                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0]) {\n\n                                    // lookup / reference fields\n                                    switch (el.referenceTo[0]) {\n                                        case \"Contact\":\n                                            customField['searchAction'] = \"search-contact\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Account\":\n                                            customField['searchAction'] = \"search-account\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Lead\":\n                                            customField['searchAction'] = \"search-lead\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Opportunity\":\n                                            customField['searchAction'] = \"search-opportunity\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Task\":\n                                            customField['searchAction'] = \"search-task\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Case\":\n                                            customField['searchAction'] = \"search-case\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Event\":\n                                            customField['searchAction'] = \"search-event\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"User\":\n                                            customField['searchAction'] = \"search-user\";\n                                            customField['searchID'] = \"Id\";\n                                    }\n                                }\n                            } else if (type === \"textarea\")\n                                customField['inputType'] = \"textArea\";\n                        }\n                    }\n                    retObj['data'].push(customField);\n                }\n            }, this);\n\n            const recordTypes = (body.recordTypeInfos || []).filter(type => type.available && !type.master)\n            if (recordTypes && recordTypes.length) {\n                let defaultOpt\n                let field = { \n                    type: 'String',\n                    inputType: 'select',\n                    name: 'Record Type',\n                    required: true,\n                    id: 'recordTypeId',\n                    fixedValueSource: []\n                }\n\n                // options for picklist\n                recordTypes.forEach(op => {\n                    defaultOpt = op.defaultRecordTypeMapping === true ? op.recordTypeId : defaultOpt\n                    field['fixedValueSource'].push({\n                        'id': op.recordTypeId,\n                        'name': op.name\n                    })\n                })\n                field.defaultValue = defaultOpt || undefined\n                retObj['data'].push(field)\n            }\n\n        } else {\n\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
			"responseFields": [
				{
					"name": "Event Id",
					"id": "id",
					"type": "String",
					"description": "Id of the newly added Event"
				}
			]
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdcae",
			"name": "Add or Update a Lead",
			"id": "add-lead",
			"priority": 1,
			"entity": "person",
			"description": "Creates a new Lead or updates an existing Lead",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {}\n    var update\n    var moment\n    var entity = \"Lead\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    /**\n     * Sanitizes the user input\n     * @param {Object} userInput\n     * @param {Object} stepData\n     */\n\n    var sanitizeUserInput = function(userInput, stepData) {\n\n        let dataType\n        let sanitizedValue\n        let dataTypeArray\n        let skipFields = stepData && stepData.skipFields ? stepData.skipFields.split(',') : []\n\n        delete userInput['Update']\n        delete userInput['value']\n        delete userInput['field']\n        delete userInput['hardUpdateRecord']\n\n        // sanitize the user inputs\n        Object.keys(userInput).forEach(function (key) {\n\n            if (key.split(\"@\").length > 1) {\n\n                dataTypeArray = key.split(\"@\");\n                dataType = dataTypeArray.pop();\n\n                if (dataType === \"date\" || dataType === \"datetime\") {\n\n                    // checking if the input value is valid date or not\n                    if (moment(userInput[key]).isValid())\n                        sanitizedValue = moment(userInput[key]).toISOString();\n                    else\n                    // INFO : just for now testing the behaviour of API\n                        sanitizedValue = userInput[key];\n\n                } else if (dataType === \"boolean\") {\n\n                    sanitizedValue = (userInput[key] === \"true\");\n\n                } else if (dataType === \"multipicklist\") {\n                    let tempArr = [];\n                    if (userInput[key] instanceof Array) {\n                        userInput[key].forEach(v => {\n                            tempArr.push(v.value);\n                        });\n                    } else\n                        tempArr.push(userInput[key])\n\n                    sanitizedValue = tempArr.join('; ');\n                } else {\n                    sanitizedValue = userInput[key];\n                }\n\n                // finally setting the sanitizedValue of the input value\n                userInput[dataTypeArray.join('')] = sanitizedValue;\n                delete userInput[key];\n            }\n        }, this);\n\n        skipFields.forEach(field => delete userInput[field])        \n    }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params'] || !utils['moment']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        let userInput = params['params']\n        update = userInput['Update'] ? userInput['Update'] : \"No\"\n        let hardUpdateRecord = userInput['hardUpdateRecord'] ? (userInput['hardUpdateRecord'] === \"Yes\") : true\n        moment = utils['moment']\n\n        let fetchedParams = params['userapp'].fetchAuthParams(params['appinfo'])\n        let loginInstanceUrl = fetchedParams['instance_url']\n        let REST_ENDPOINT = \"/services/data\"\n        let API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        // common options Variables\n        let options = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }\n\n        if (update === 'No' || (params['step'] && params['step']['value'] === stepValueUpdate)) {\n\n            options['method'] = 'POST';\n            options['url'] = '/sobjects/' + entity + '/'\n\n            // sanitizes the userInput\n            sanitizeUserInput(userInput, params['step'])\n\n            if (update === 'Yes' && (params['step'] && params['step']['leadId'])) {\n                options.method = \"PATCH\";\n                options.url = \"/sobjects/\" + entity + \"/\" + params['step']['leadId'];\n                retObj['step'] = { leadId: params['step']['leadId'] }\n            }\n\n            // now add the body to the request\n            options['body'] = userInput;\n\n        } else if (params['step'] && params['step']['value'] === stepValueFetchObj) {\n\n            if (params['step']['leadId']) {\n                // send the request for fetching whole object corresponding to given id\n                options.method = \"GET\"\n                options.url = `/sobjects/${entity}/${params['step']['leadId']}`\n                retObj['step'] = {value: stepValueFetchObj, leadId: params['step']['leadId']}\n            } else {\n                options['method'] = 'POST'\n                options['url'] = '/sobjects/' + entity + '/'\n    \n                // sanitizes the userInput\n                sanitizeUserInput(userInput, params['step'])\n                // now add the body to the request\n                options['body'] = userInput\n            }\n        } else if (update === 'Yes') {\n\n            let matchField = userInput['field'];\n            let url = \"/query/?q=select+id+from+\" + entity + \"+where+\";\n            let matchfieldSplit;\n            let matchFieldType;\n\n            // if user selected update but \n            if (!userInput['field'] || !userInput['value']) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Missing input for 'Value to check for'. This is required if 'Update if existing' is Yes.\";\n                return callback(retObj);\n            }\n\n            // if the selected matching field is custom field, extract its data type from name\n            if (userInput['field'].split('@').length > 1) {\n\n                matchfieldSplit = userInput['field'].split('@');\n                matchFieldType = matchfieldSplit.pop();\n                matchField = matchfieldSplit.join('');\n\n            }\n\n            // format the query according to the coming field Type\n            if ((matchField.includes(\"Date\") || matchField.includes(\"date\") || matchField === \"SystemModstamp\") || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n                if (moment(userInput['value']).isValid())\n                    userInput['value'] = moment(userInput['value']).toISOString();\n\n                url += matchField + \"=\" + userInput['value'];\n            }\n            else\n                url += matchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n\n            options['method'] = 'GET';\n            options['url'] = url;\n            retObj['step'] = { value: stepValueSearch, hardUpdateRecord: hardUpdateRecord }\n\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" }\n    var errorMsg\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n        if (response['statusCode'] == 201) {\n\n            var id = body.id;\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {\n                parsedValues: {\n                    id: id\n                }\n            };\n\n        } else if (response['statusCode'] == 200) {\n\n            var leadId = body && body.records && body.records[0] && body.records[0].Id ? body.records[0].Id : \"\";\n            if (params['step']['value'] === stepValueSearch) {\n\n                retObj['status'] = \"SUCCESS\"\n\n                if (params['step']['hardUpdateRecord'])\n                    retObj['step'] = { value: stepValueUpdate , leadId: leadId }\n                else\n                    retObj['step'] = { value: stepValueFetchObj , leadId: leadId }\n\n            } else if (params['step']['value'] === stepValueFetchObj) {\n\n                let skip = []\n                Object.keys(body).forEach(field => {\n                    if (body[field] !== \"\" && body[field] != null)\n                        skip.push(field)\n                }, this);\n\n                retObj['status'] = \"SUCCESS\"\n                retObj['step'] = { value: stepValueUpdate, leadId: params['step']['leadId'], skipFields: skip.join(',') }\n            }\n\n        } else if (response['statusCode'] == 204) {\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {\n                parsedValues: {\n                    id: params['step'] && params['step']['leadId'] ? params['step']['leadId'] : \"\"\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the duplicate search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    return callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update if existing",
					"id": "Update",
					"inputType": "select",
					"type": "String",
					"defaultValue": "No",
					"required": true,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Check for duplicates using",
					"id": "field",
					"description": "Select the lead property to be used to check for duplicates. We recommend this to be the email address",
					"inputType": "select",
					"type": "String",
					"required": false,
					"defaultValue": "Email",
					"groupName": "Update",
					"groupType": "COLLECTION",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Lead/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value to check for",
					"id": "value",
					"inputType": "input",
					"description": "Enter the value (of property selected above) to look for duplicates",
					"type": "String",
					"groupName": "Update",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update existing data?",
					"id": "hardUpdateRecord",
					"inputType": "select",
					"description": "Select 'Yes' if this Action's input data should override Salesforce field data (if present).",
					"type": "String",
					"defaultValue": "Yes",
					"required": false,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Salutation",
					"id": "salutation",
					"inputType": "select",
					"defaultValue": "",
					"type": "String",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/sobjects/Contact/describe',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParseForSalutation(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n            fields = fields.filter(p => p.label === \"Salutation\");\n\n            if (fields && fields[0].picklistValues.length) {\n                fields[0].picklistValues.map(function (el) {\n\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.value\n                    });\n\n                }, this);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "First Name",
					"id": "FirstName",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Last Name",
					"id": "LastName",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": true
				},
				{
					"fixedValueSource": [],
					"name": "Company",
					"id": "Company",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": true
				},
				{
					"fixedValueSource": [],
					"name": "Email",
					"id": "Email",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Title",
					"id": "Title",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Owner ID",
					"id": "OwnerId",
					"inputType": "select",
					"type": "String",
					"searchAction": "search-user",
					"searchID": "Id",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+id, name+FROM+USER+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n\n            var arr = parsed.records;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Name']\n                });\n            }\n            \n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Lead Source",
					"id": "LeadSource",
					"inputType": "select",
					"type": "String",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/sobjects/Lead/describe',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {};\n    var errorMsg;\n    var body;\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        body = response['body']\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n            var fields = parsed.fields;\n            var picklistValues;\n\n            fields.forEach(function(data){\n                if(data.name == \"LeadSource\") {\n                    picklistValues = data.picklistValues;\n                }\n            });\n            \n            var arr = picklistValues;\n            var responseObjArray = [];\n            for (var index in arr) {\n                if(arr[index]['active']) {\n                    responseObjArray.push({\n                        id: arr[index]['value'],\n                        name: arr[index]['label']\n                    });\n                }\n            }\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        }  else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Annual Revenue",
					"id": "AnnualRevenue",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Phone",
					"id": "Phone",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Mobile",
					"id": "MobilePhone",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Fax",
					"id": "Fax",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Website",
					"id": "Website",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Number of employees",
					"id": "NumberOfEmployees",
					"inputType": "input",
					"type": "Number",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Street",
					"id": "Street",
					"inputType": "textArea",
					"type": "String",
					"groupName": "Address",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "City",
					"id": "City",
					"inputType": "input",
					"groupName": "Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "State/Province",
					"id": "State",
					"inputType": "input",
					"groupName": "Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Zip/Postal Code",
					"id": "PostalCode",
					"inputType": "input",
					"groupName": "Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Country",
					"id": "Country",
					"inputType": "input",
					"groupName": "Address",
					"groupType": "COLLECTION",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Description",
					"id": "Description",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				}
			],
			"dynamicInputFields": true,
			"dynamicInputFieldsRequest": "function dynamicInputFieldsRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Lead\";\n    var update;\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        update = params.params.find(p => p.id === \"Update\");\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\" + entity + \"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['step'] = { update: update };\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicInputFieldsParse": "function dynamicInputFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n    var update;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_UNKNOWN\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        update = params.step && params.step.update ? params.step.update : null;\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n            let customField;\n            let type;\n\n            fields.map(function (el) {\n                customField = {};\n                \n                // if the field is custom field\n                if ((el.custom === true && !el.autoNumber) \n                || (el.name === \"Status\" || el.name === \"Rating\" || el.name === \"Industry\" || el.name === 'CleanStatus' || el.name === 'CompanyDunsNumber' || el.name === 'Jigsaw' || el.name === 'DoNotCall' || el.name === 'HasOptedOutOfEmail' || el.name === 'HasOptedOutOfFax') || el.name === 'CountryCode' || el.name === 'StateCode') {\n\n                    type = el.type;\n                    // adding type field only to those fields which are custom / here Type, Rating, Industry, Ownership are static \n                    // but to save 4 extra requests we are using them here.\n                    if (el.name === \"Industry\" || el.name === \"Rating\" || el.name === \"Status\" || el.name === 'CleanStatus' || el.name === 'CompanyDunsNumber' || el.name === 'Jigsaw' || el.name === 'DoNotCall' || el.name === 'HasOptedOutOfEmail' || el.name === 'HasOptedOutOfFax')\n                        customField['id'] = el.name\n                    else \n                        customField['id'] = el.name + \"@\" + type\n\n                    customField['name'] = el.label\n                    customField['defaultValue'] = el.defaultValue\n                    customField['type'] = type && (type === \"date\" || type === \"datetime\") ? \"Date\" : \"String\"\n                    customField['description'] = el.inlineHelpText\n\n                    // Using few fields to infer if they are required or not\n                    if (el.createable && !el.defaultedOnCreate && !el.nillable)\n                        customField['required'] = true\n                    else\n                        customField['required'] = false\n\n                    if (type) {\n\n                        // adding options for the dropdown type fields\n                        if (type === \"picklist\" || type === \"boolean\" || type === \"multipicklist\") {\n\n                            if (type === \"picklist\" || type === \"boolean\")\n                                customField['inputType'] = \"select\";\n                            else\n                                customField['inputType'] = \"multiselect\";\n\n                            customField['fixedValueSource'] = [];\n\n                            if (type === \"boolean\") {\n\n                                // checkbox can take 2 values either true or false\n                                customField['fixedValueSource'].push({ id: \"true\", name: \"Yes\" });\n                                customField['fixedValueSource'].push({ id: \"false\", name: \"No\" });\n\n                            } else {\n\n                                // options for picklist\n                                el.picklistValues.forEach(op => {\n\n                                    // if the value is active\n                                    if (op.active) {\n                                        customField['fixedValueSource'].push({\n                                            \"id\": op.value || op.label,\n                                            \"name\": op.label\n                                        });\n                                    }\n                                }, this);\n                            }\n\n                        } else {\n\n                            customField['inputType'] = \"input\";\n                            // adding reference / lookup fields\n                            if (type === \"reference\") {\n\n                                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0]) {\n\n                                    // lookup / reference fields\n                                    switch (el.referenceTo[0]) {\n                                        case \"Contact\":\n                                            customField['searchAction'] = \"search-contact\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Account\":\n                                            customField['searchAction'] = \"search-account\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Lead\":\n                                            customField['searchAction'] = \"search-lead\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Opportunity\":\n                                            customField['searchAction'] = \"search-opportunity\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Task\":\n                                            customField['searchAction'] = \"search-task\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Case\":\n                                            customField['searchAction'] = \"search-case\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Event\":\n                                            customField['searchAction'] = \"search-event\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"User\":\n                                            customField['searchAction'] = \"search-user\";\n                                            customField['searchID'] = \"Id\";\n                                    }\n                                }\n                            } else if (type === \"textarea\")\n                                customField['inputType'] = \"textArea\";\n                        }\n                    }\n                     // adding groups to address fields\n                     if (el.name === 'CountryCode' || el.name === 'StateCode') {\n                        customField['groupName'] = \"Address\"\n                        customField['groupType'] = \"COLLECTION\"\n                    }\n                    retObj['data'].push(customField);\n                } \n            }, this);\n\n            const recordTypes = (body.recordTypeInfos || []).filter(type => type.available && !type.master)\n            if (recordTypes && recordTypes.length) {\n                let defaultOpt\n                let field = { \n                    type: 'String',\n                    inputType: 'select',\n                    name: 'Record Type',\n                    required: true,\n                    id: 'recordTypeId',\n                    fixedValueSource: []\n                }\n\n                // options for picklist\n                recordTypes.forEach(op => {\n                    defaultOpt = op.defaultRecordTypeMapping === true ? op.recordTypeId : defaultOpt\n                    field['fixedValueSource'].push({\n                        'id': op.recordTypeId,\n                        'name': op.name\n                    })\n                })\n                field.defaultValue = defaultOpt || undefined\n                retObj['data'].push(field)\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
			"responseFields": [
				{
					"name": "Lead Id",
					"id": "id",
					"type": "String",
					"description": "Id of the added / updated Lead"
				}
			]
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdcad",
			"name": "Add a Note",
			"id": "add-note",
			"priority": 2,
			"entity": "message",
			"beta": true,
			"description": "Creates a new Note",
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {}\n    var update\n    var moment\n    var hardUpdateRecord\n    var REST_ENDPOINT = \"/services/data\"\n    var API_VERSION\n    var entity = \"Account\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    /**\n     * Sanitizes the user input\n     * @param {Object} userInput\n     * @param {Object} stepData\n     */\n\n    var sanitizeUserInput = function (userInput, noteType) {\n\n        let dataType\n        let sanitizedValue\n        let dataTypeArray\n\n        delete userInput['noteType']\n        if (userInput['body'] && /^CONTENTNOTE$/i.test(noteType)) {\n            let buff = new Buffer(userInput['body']);  \n            userInput['Content'] = buff.toString('base64');   \n            delete userInput['body']\n        }\n\n        Object.keys(userInput).forEach(function (key, array) {\n\n            // picking one parent id provided by user \n            if (key === 'accountForRelatedTo' || key === 'opportunityForRelatedTo' || key === 'contactForRelatedTo'\n                || key === 'LeadForRelatedTo' || key === 'CaseForRelatedTo' || key === 'TaskForRelatedTo' || key === 'otherForRelatedTo') {\n                if (!userInput['parentId']) {\n                    userInput['ParentId'] = userInput[key] \n                }\n                delete userInput[key]\n            }\n\n\n            if (key.split(\"@\").length > 1) {\n                dataTypeArray = key.split(\"@\")\n                dataType = dataTypeArray.pop()\n\n                if (dataType === \"date\" || dataType === \"datetime\") {\n\n                    // checking if the input value is valid date or not\n                    if (moment(userInput[key]).isValid())\n                        sanitizedValue = moment(userInput[key]).toISOString()\n                    else\n                        // INFO : just for now testing the behaviour of API\n                        sanitizedValue = userInput[key]\n\n                } else if (dataType === \"boolean\") {\n\n                    sanitizedValue = (userInput[key] === \"true\")\n\n                } else if (dataType === \"multipicklist\") {\n                    let tempArr = []\n                    if (userInput[key] instanceof Array) {\n                        userInput[key].forEach(v => {\n                            tempArr.push(v.value)\n                        })\n                    } else\n                        tempArr.push(userInput[key])\n\n                    sanitizedValue = tempArr.join('; ')\n                } else {\n                    sanitizedValue = userInput[key]\n                }\n\n                // finally setting the sanitizedValue of the input value\n                userInput[dataTypeArray.join('')] = sanitizedValue\n                delete userInput[key]\n            }\n\n        }, this)\n    }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params'] || !utils['moment']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        let userInput = params['params'];\n        moment = utils['moment']\n\n        let fetchedParams = params['userapp'].fetchAuthParams(params['appinfo'])\n        let loginInstanceUrl = fetchedParams['instance_url'];\n\n        API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        // common options Variables\n        var options = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            method: 'POST',\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        let noteType = params.params && params.params.noteType ? params.params.noteType : entity\n        \n        if ( !(/^NOTE$/i.test(noteType)) && !(/^CONTENTNOTE$/i.test(noteType))) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Please select a valid Note Type from dropdown.\";\n            callback(retObj);\n\n        }\n        options['url'] = '/sobjects/' + noteType + '/'\n        \n        // if content note is created but need to add a link\n        if (params.step && params.step.LinkedEntityId && params.step.LinkedEntityId && params.step.ContentDocumentId) {\n            options['url'] = `/sobjects/ContentDocumentLink/`\n            options['body'] = Object.assign({ 'ShareType': 'V', 'Visibility': 'AllUsers'}, params.step)\n            retObj['step'] = { 'outputData': params.step.ContentDocumentId }\n        } else {\n            // sanitize the user inputs\n            sanitizeUserInput(userInput, noteType)\n            // now add the body to the request\n            options['body'] = userInput\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\"\n        retObj['data'] = {\n            options: options\n        }\n        \n       if (userInput['ParentId'] && /^CONTENTNOTE$/i.test(noteType) && !params.step) {\n            retObj['step'] = {'LinkedEntityId': userInput['ParentId'] }\n            delete userInput['ParentId']\n       }\n\n       console.log(JSON.stringify(retObj))\n    }\n    callback(retObj)\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" }\n    var errorMsg\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n        if (response['statusCode'] == 201) {\n\n            var id = params && params.step && params.step.outputData ? params.step.outputData : body.id;\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {\n                parsedValues: {\n                    id: id\n                }\n            };\n            if (params && params.step && params.step.LinkedEntityId) {\n                retObj['step'] = {'ContentDocumentId': id, 'LinkedEntityId': params.step.LinkedEntityId }\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the duplicate search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    return callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [
						{
							"id": "ContentNote",
							"name": "Notes (Enhanced/Rich Notes)"
						},
						{
							"id": "Note",
							"name": "Notes and Attachment"
						}
					],
					"name": "Note Type",
					"id": "noteType",
					"inputType": "select",
					"type": "String",
					"defaultValue": "ContentNote",
					"required": true,
					"description": "In case of Enahnced/Rich Notes, please make sure Notes are enabled in org settings (In your Salesforce org go to Setup -> Feature Settings -> Sales -> Notes Settings)"
				},
				{
					"fixedValueSource": [],
					"name": "Title",
					"id": "title",
					"inputType": "input",
					"type": "String",
					"required": true
				},
				{
					"fixedValueSource": [],
					"name": "Body",
					"id": "body",
					"inputType": "textArea",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Owner Id",
					"id": "OwnerId",
					"inputType": "select",
					"type": "String",
					"searchAction": "search-user",
					"searchID": "Id",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+id, name+FROM+USER+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n\n            var arr = parsed.records;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Name']\n                });\n            }\n            \n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Account Id",
					"id": "accountForRelatedTo",
					"inputType": "input",
					"groupName": "Related To",
					"groupType": "OR",
					"searchAction": "search-account",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Contact Id",
					"id": "contactForRelatedTo",
					"inputType": "input",
					"groupName": "Related To",
					"groupType": "OR",
					"searchAction": "search-contact",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Opportunity Id",
					"id": "opportunityForRelatedTo",
					"inputType": "input",
					"groupName": "Related To",
					"groupType": "OR",
					"searchAction": "search-opportunity",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Lead Id",
					"id": "LeadForRelatedTo",
					"inputType": "input",
					"groupName": "Related To",
					"groupType": "OR",
					"searchAction": "search-lead",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Case Id",
					"id": "CaseForRelatedTo",
					"inputType": "input",
					"groupName": "Related To",
					"groupType": "OR",
					"searchAction": "search-case",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Task Id",
					"id": "TaskForRelatedTo",
					"inputType": "input",
					"groupName": "Related To",
					"groupType": "OR",
					"searchAction": "search-task",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Custom Object Id",
					"id": "otherForRelatedTo",
					"inputType": "input",
					"groupName": "Related To",
					"groupType": "OR",
					"searchAction": "search-custom-object",
					"searchID": "Id",
					"type": "String",
					"required": false
				}
			],
			"dynamicInputFields": true,
			"dynamicInputFieldsRequest": "function dynamicInputFieldsRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Note\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        let noteType = (params.params || []).find(obj => obj.id === \"noteType\" && obj.value) || {}\n        noteType = noteType && noteType.value ? noteType.value : entity\n\n        if ( !(/^NOTE$/i.test(noteType)) && !(/^CONTENTNOTE$/i.test(noteType))) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Please select a valid Note Type from dropdown.\";\n            callback(retObj);\n\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\" + noteType + \"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicInputFieldsParse": "function dynamicInputFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_UNKNOWN\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n            let customField;\n            let type;\n\n            fields.map(function (el) {\n                customField = {};\n\n                // if the field is custom field\n                if ((el.custom === true && !el.autoNumber) || (el.name === \"Type\" || el.name === \"Rating\" || el.name === \"Industry\" || el.name === \"Ownership\" || el.name === \"AccountSource\" || \n                    el.name === \"CleanStatus\" || el.name === 'Jigsaw' || el.name === 'DunsNumber' || el.name === 'NaicsCode' || el.name === 'NaicsDesc' || el.name === 'SicDesc' || el.name === 'Tradestyle' \n                    || el.name === 'YearStarted' || el.name === 'BillingCountryCode' || el.name === 'ShippingCountryCode' || el.name === 'BillingStateCode' || el.name === 'ShippingStateCode')) {\n                    \n                    type = el.type;\n                    // adding type field only to those fields which are custom / here Type, Rating, Industry, Ownership are static \n                    // but to save 4 extra requests we are using them here.\n                    if (el.custom === true) \n                        customField['id'] = el.name + \"@\" + type\n                    else\n                        customField['id'] = el.name\n\n                    customField['name'] = el.label\n                    if (type != \"multipicklist\")\n                        customField['defaultValue'] = el.defaultValue\n                    customField['type'] = type && (type === \"date\" || type === \"datetime\") ? \"Date\" : \"String\"\n                    customField['description'] = el.inlineHelpText\n\n                    // Using few fields to infer if they are required or not\n                    if (el.createable && !el.defaultedOnCreate && !el.nillable)\n                        customField['required'] = true\n                    else\n                        customField['required'] = false\n\n                    if (type) {\n\n                        // adding options for the dropdown type fields\n                        if (type === \"picklist\" || type === \"boolean\" || type === \"multipicklist\") {\n\n                            if (type === \"picklist\" || type === \"boolean\")\n                                customField['inputType'] = \"select\";\n                            else\n                                customField['inputType'] = \"multiselect\";\n\n                            customField['fixedValueSource'] = [];\n\n                            if (type === \"boolean\") {\n\n                                // checkbox can take 2 values either true or false\n                                customField['fixedValueSource'].push({ id: \"true\", name: \"Yes\" });\n                                customField['fixedValueSource'].push({ id: \"false\", name: \"No\" });\n\n                            } else {\n\n                                // options for picklist\n                                el.picklistValues.forEach(op => {\n\n                                    // if the value is active\n                                    if (op.active) {\n                                        customField['fixedValueSource'].push({\n                                            \"id\": op.value || op.label,\n                                            \"name\": op.label\n                                        });\n                                    }\n                                }, this);\n                            }\n\n                        } else {\n\n                            customField['inputType'] = \"input\";\n                            // adding reference / lookup fields\n                            if (type === \"reference\") {\n\n                                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0]) {\n\n                                    // lookup / reference fields\n                                    switch (el.referenceTo[0]) {\n                                        case \"Contact\":\n                                            customField['searchAction'] = \"search-contact\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Account\":\n                                            customField['searchAction'] = \"search-account\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Lead\":\n                                            customField['searchAction'] = \"search-lead\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Opportunity\":\n                                            customField['searchAction'] = \"search-opportunity\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Task\":\n                                            customField['searchAction'] = \"search-task\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Case\":\n                                            customField['searchAction'] = \"search-case\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Event\":\n                                            customField['searchAction'] = \"search-event\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"User\":\n                                            customField['searchAction'] = \"search-user\";\n                                            customField['searchID'] = \"Id\";\n                                    }\n                                }\n                            } else if (type === \"textarea\")\n                                customField['inputType'] = \"textArea\";\n                        }\n                    }\n                    // Adding groupType if required \n                    if (el.name === 'BillingCountryCode' || el.name === 'BillingStateCode') {\n                        \n                        customField['name'] = customField['name'].replace('Billing', '')\n                        customField['groupName'] = \"Billing Address\"\n                        customField['groupType'] = \"COLLECTION\"\n                    } else if (el.name === 'ShippingCountryCode' || el.name === 'ShippingStateCode') {\n                        \n                        customField['name'] = customField['name'].replace('Shipping', '')\n                        customField['groupName'] = \"Shipping Address\"\n                        customField['groupType'] = \"COLLECTION\"\n                    }\n                    retObj['data'].push(customField);\n                }\n            }, this);\n\n            const recordTypes = (body.recordTypeInfos || []).filter(type => type.available && !type.master)\n            if (recordTypes && recordTypes.length) {\n                let defaultOpt\n                let field = { \n                    type: 'String',\n                    inputType: 'select',\n                    name: 'Record Type',\n                    required: true,\n                    id: 'recordTypeId',\n                    fixedValueSource: []\n                }\n\n                // options for picklist\n                recordTypes.forEach(op => {\n                    defaultOpt = op.defaultRecordTypeMapping === true ? op.recordTypeId : defaultOpt\n                    field['fixedValueSource'].push({\n                        'id': op.recordTypeId,\n                        'name': op.name\n                    })\n                })\n                field.defaultValue = defaultOpt || undefined\n                retObj['data'].push(field)\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 404) {\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\"\n                retObj['error']['message'] = \"Please make sure Notes are enabled in settings (Setup -> Feature Settings -> Sales -> Notes Settings)\"\n                return callback(retObj);\n                \n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
			"responseFields": [
				{
					"name": "Note Id",
					"id": "id",
					"type": "String",
					"description": "Id of the newly added Note"
				}
			]
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdcac",
			"name": "Add or Update an Opportunity",
			"id": "add-opportunity",
			"priority": 2,
			"entity": "deal",
			"description": "Creates a new Opportunity or updates an existing Opportunity",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {}\n    var update\n    var moment\n    var entity = \"Opportunity\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    /**\n     * Sanitizes the user input\n     * @param {Object} userInput\n     * @param {Object} stepData\n     */\n\n    var sanitizeUserInput = function(userInput, stepData) {\n\n        let dataType\n        let sanitizedValue\n        let dataTypeArray\n        let skipFields = stepData && stepData.skipFields ? stepData.skipFields.split(',') : []\n\n        delete userInput['Update']\n        delete userInput['value']\n        delete userInput['field']\n        delete userInput['hardUpdateRecord']\n        \n        // sanitize the user inputs\n        Object.keys(userInput).forEach(function (key) {\n\n            if (key.split(\"@\").length > 1) {\n\n                dataTypeArray = key.split(\"@\")\n                dataType = dataTypeArray.pop()\n\n                if (dataType === \"date\" || dataType === \"datetime\") {\n\n                    // checking if the input value is valid date or not\n                    if (moment(userInput[key]).isValid())\n                        sanitizedValue = moment(userInput[key]).toISOString()\n                    else\n                    // INFO : just for now testing the behaviour of API\n                        sanitizedValue = userInput[key]\n\n                } else if (dataType === \"boolean\") {\n\n                    sanitizedValue = (userInput[key] === \"true\")\n\n                } else if (dataType === \"multipicklist\") {\n                    let tempArr = []\n                    if (userInput[key] instanceof Array) {\n                        userInput[key].forEach(v => {\n                            tempArr.push(v.value);\n                        });\n                    } else\n                        tempArr.push(userInput[key])\n                        \n                    sanitizedValue = tempArr.join('; ')\n                } else {\n                    sanitizedValue = userInput[key]\n                }\n\n                // finally setting the sanitizedValue of the input value\n                userInput[dataTypeArray.join('')] = sanitizedValue\n                delete userInput[key];\n            }\n\n            if (key === 'CloseDate') {\n                // checking if the input value is valid date or not\n                if (moment(userInput[key]).isValid())\n                    userInput[key] = moment(userInput[key]).toISOString()\n            }\n\n        }, this);\n\n        if (userInput['IsPrivate'])\n            userInput['IsPrivate'] = (userInput['IsPrivate'] === \"Yes\")\n\n        skipFields.forEach(field => delete userInput[field])\n    }\n\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params'] || !utils['moment']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        let userInput = params['params']\n        update = userInput['Update'] ? userInput['Update'] : \"No\"\n        let hardUpdateRecord = userInput['hardUpdateRecord'] ? (userInput['hardUpdateRecord'] === \"Yes\") : true\n        moment = utils['moment']\n\n        let fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n        let loginInstanceUrl = fetchedParams['instance_url'];\n        let REST_ENDPOINT = \"/services/data\";\n        let API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        // common options Variables\n        let options = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (update === 'No' || (params['step'] && params['step']['value'] === stepValueUpdate)) {\n\n            options['method'] = 'POST';\n            options['url'] = '/sobjects/' + entity + '/';\n\n            // sanitizes the userInput\n            sanitizeUserInput(userInput, params['step'])\n\n            if (update === 'Yes' && (params['step'] && params['step']['opportunityId'])) {\n                options.method = \"PATCH\";\n                options.url = \"/sobjects/\" + entity + \"/\" + params['step']['opportunityId'];\n                retObj['step'] = { opportunityId: params['step']['opportunityId'] }\n            }\n\n            // now add the body to the request\n            options['body'] = userInput;\n\n        } else if (params['step'] && params['step']['value'] === stepValueFetchObj) {\n\n            if (params['step']['opportunityId']) {\n                // send the request for fetching whole object corresponding to given id\n                options.method = \"GET\"\n                options.url = `/sobjects/${entity}/${params['step']['opportunityId']}`\n                retObj['step'] = {value: stepValueFetchObj, opportunityId: params['step']['opportunityId']}\n            } else {\n                options['method'] = 'POST'\n                options['url'] = '/sobjects/' + entity + '/'\n\n                // sanitizes the userInput\n                sanitizeUserInput(userInput, params['step'])\n                // now add the body to the request\n                options['body'] = userInput\n            }\n\n        } else if (update === 'Yes') {\n\n            let matchField = userInput['field'];\n            let url = \"/query/?q=select+id+from+\" + entity + \"+where+\";\n            let matchfieldSplit;\n            let matchFieldType;\n\n            // if user selected update but field and value not available throw error\n            if (!userInput['field'] || !userInput['value']) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Missing input for 'Value to check for'. This is required if 'Update if existing' is Yes.\";\n                return callback(retObj);\n            }\n\n            // if the selected matching field is custom field, extract its data type from name\n            if (userInput['field'].split('@').length > 1) {\n\n                matchfieldSplit = userInput['field'].split('@');\n                matchFieldType = matchfieldSplit.pop();\n                matchField = matchfieldSplit.join('');\n            }\n\n            // format the query according to the coming field Type\n            if ((matchField.includes(\"Date\") || matchField.includes(\"date\") || matchField === \"SystemModstamp\") || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n                if (moment(userInput['value']).isValid())\n                    userInput['value'] = moment(userInput['value']).toISOString();\n\n                url += matchField + \"=\" + userInput['value'];\n            }\n            else\n                url += matchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n            options['method'] = 'GET';\n            options['url'] = url;\n            retObj['step'] = { value: stepValueSearch, hardUpdateRecord: hardUpdateRecord }\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" }\n    var errorMsg\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        var response = params['response']\n        var body = response['body']\n        if (response['statusCode'] == 201) {\n\n            var id = body.id\n            retObj['status'] = \"SUCCESS\"\n            retObj['data'] = {\n                parsedValues: {\n                    id: id\n                }\n            };\n\n        } else if (response['statusCode'] == 200) {\n\n            let opportunityId = body && body.records && body.records[0] && body.records[0].Id ? body.records[0].Id : \"\"\n            if (params['step']['value'] === stepValueSearch) {\n\n                retObj['status'] = \"SUCCESS\"\n\n                if (params['step']['hardUpdateRecord'])\n                    retObj['step'] = { value: stepValueUpdate , opportunityId: opportunityId }\n                else\n                    retObj['step'] = { value: stepValueFetchObj , opportunityId: opportunityId }\n\n            } else if (params['step']['value'] === stepValueFetchObj) {\n\n                let skip = []\n                Object.keys(body).forEach(field => {\n                    if (body[field] !== \"\" && body[field] != null)\n                        skip.push(field)\n                }, this);\n\n                retObj['status'] = \"SUCCESS\"\n                retObj['step'] = { value: stepValueUpdate, opportunityId: params['step']['opportunityId'], skipFields: skip.join(',') }\n            }\n        } else if (response['statusCode'] == 204) {\n\n            retObj['status'] = \"SUCCESS\"\n            retObj['data'] = {\n                parsedValues: {\n                    id: params['step'] && params['step']['opportunityId'] ? params['step']['opportunityId'] : \"\"\n                }\n            }\n\n        } else {\n\n            let rateErrorOccurred = false\n            errorMsg = \"\"\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\"\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the duplicate search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\"\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    return callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update if existing",
					"id": "Update",
					"inputType": "select",
					"type": "String",
					"defaultValue": "No",
					"required": true,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Check for duplicates using",
					"id": "field",
					"description": "Select the opportunity property to be used to check for duplicates. We recommend this to be the name",
					"inputType": "select",
					"type": "String",
					"required": false,
					"defaultValue": "Name",
					"groupName": "Update",
					"groupType": "COLLECTION",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Opportunity/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value to check for",
					"id": "value",
					"inputType": "input",
					"description": "Enter the value (of property selected above) to look for duplicates",
					"type": "String",
					"groupName": "Update",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update existing data?",
					"id": "hardUpdateRecord",
					"inputType": "select",
					"description": "Select 'Yes' if this Action's input data should override Salesforce field data (if present).",
					"type": "String",
					"defaultValue": "Yes",
					"required": false,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Opportunity Name",
					"id": "Name",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": true
				},
				{
					"fixedValueSource": [],
					"name": "Opportunity Owner",
					"id": "OwnerId",
					"inputType": "select",
					"type": "String",
					"searchAction": "search-user",
					"searchID": "Id",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+id, name+FROM+USER+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n\n            var arr = parsed.records;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Name']\n                });\n            }\n            \n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Close Date",
					"id": "CloseDate",
					"inputType": "input",
					"type": "Date",
					"required": true
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Private",
					"id": "IsPrivate",
					"inputType": "select",
					"type": "String",
					"defaultValue": "No",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Account ID",
					"id": "AccountId",
					"inputType": "input",
					"type": "String",
					"searchAction": "search-account",
					"searchID": "Id",
					"required": false,
					"description": "Links the Opportunity to this Account"
				},
				{
					"fixedValueSource": [],
					"name": "Primary Campaign Source",
					"id": "CampaignId",
					"inputType": "select",
					"type": "String",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+Id, Name, Description+FROM+Campaign+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n            var arr = parsed.records;\n\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Name'] || arr[index]['Description']\n                });\n            }\n\n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Amount",
					"id": "Amount",
					"inputType": "input",
					"defaultValue": "",
					"type": "Number",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Probability (%)",
					"id": "Probability",
					"inputType": "input",
					"defaultValue": "",
					"type": "Number",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Quantity",
					"id": "TotalOpportunityQuantity",
					"inputType": "input",
					"defaultValue": "",
					"type": "Number",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Description",
					"id": "Description",
					"inputType": "input",
					"defaultValue": "",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Next Step",
					"id": "NextStep",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Score",
					"id": "IqScore",
					"inputType": "input",
					"type": "String",
					"required": false
				}
			],
			"dynamicInputFields": true,
			"dynamicInputFieldsRequest": "function dynamicInputFieldsRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Opportunity\";\n    var update;\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        update = params.params.find(p => p.id === \"Update\");\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\" + entity + \"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['step'] = { update: update };\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicInputFieldsParse": "function dynamicInputFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n    var update;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_UNKNOWN\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        update = params.step && params.step.update ? params.step.update : null;\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n            let customField;\n            let type;\n\n            fields.map(function (el) {\n                customField = {};\n                \n                // if the field is custom field\n                if ((el.custom === true && !el.autoNumber) \n                || (el.name === \"LeadSource\" || el.name === \"StageName\" || el.name === \"Type\" || el.name === 'ExpectedRevenue' || el.name === 'ForecastCategoryName') && (el.createable || el.updateable)) {\n\n                    type = el.type;\n                    // adding type field only to those fields which are custom / here Type, Rating, Industry, Ownership are static \n                    // but to save 4 extra requests we are using them here.\n                    if (el.name === \"LeadSource\" || el.name === \"StageName\" || el.name === \"Type\" || el.name === 'ExpectedRevenue' || el.name === 'ForecastCategoryName')\n                        customField['id'] = el.name\n                    else \n                        customField['id'] = el.name + \"@\" + type\n\n                    customField['name'] = el.label\n                    customField['defaultValue'] = el.defaultValue\n                    customField['type'] = type && (type === \"date\" || type === \"datetime\") ? \"Date\" : \"String\"\n                    customField['description'] = el.inlineHelpText\n\n                    // Using few fields to infer if they are required or not\n                    if (el.createable && !el.defaultedOnCreate && !el.nillable)\n                        customField['required'] = true\n                    else\n                        customField['required'] = false\n\n                    if (type) {\n\n                        // adding options for the dropdown type fields\n                        if (type === \"picklist\" || type === \"boolean\" || type === \"multipicklist\") {\n\n                            if (type === \"picklist\" || type === \"boolean\")\n                                customField['inputType'] = \"select\";\n                            else\n                                customField['inputType'] = \"multiselect\";\n\n                            customField['fixedValueSource'] = [];\n\n                            if (type === \"boolean\") {\n\n                                // checkbox can take 2 values either true or false\n                                customField['fixedValueSource'].push({ id: \"true\", name: \"Yes\" });\n                                customField['fixedValueSource'].push({ id: \"false\", name: \"No\" });\n\n                            } else {\n\n                                // options for picklist\n                                el.picklistValues.forEach(op => {\n\n                                    // if the value is active\n                                    if (op.active) {\n                                        customField['fixedValueSource'].push({\n                                            \"id\": op.value || op.label,\n                                            \"name\": op.label\n                                        });\n                                    }\n                                }, this);\n                            }\n\n                        } else {\n\n                            customField['inputType'] = \"input\";\n                            // adding reference / lookup fields\n                            if (type === \"reference\") {\n\n                                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0]) {\n\n                                    // lookup / reference fields\n                                    switch (el.referenceTo[0]) {\n                                        case \"Contact\":\n                                            customField['searchAction'] = \"search-contact\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Account\":\n                                            customField['searchAction'] = \"search-account\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Lead\":\n                                            customField['searchAction'] = \"search-lead\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Opportunity\":\n                                            customField['searchAction'] = \"search-opportunity\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Task\":\n                                            customField['searchAction'] = \"search-task\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Case\":\n                                            customField['searchAction'] = \"search-case\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Event\":\n                                            customField['searchAction'] = \"search-event\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"User\":\n                                            customField['searchAction'] = \"search-user\";\n                                            customField['searchID'] = \"Id\";\n                                    }\n                                }\n                            } else if (type === \"textarea\")\n                                customField['inputType'] = \"textArea\";\n                        }\n                    }\n                    retObj['data'].push(customField);\n                } \n            }, this);\n\n            const recordTypes = (body.recordTypeInfos || []).filter(type => type.available && !type.master)\n            if (recordTypes && recordTypes.length) {\n                let defaultOpt\n                let field = { \n                    type: 'String',\n                    inputType: 'select',\n                    name: 'Record Type',\n                    required: true,\n                    id: 'recordTypeId',\n                    fixedValueSource: []\n                }\n\n                // options for picklist\n                recordTypes.forEach(op => {\n                    defaultOpt = op.defaultRecordTypeMapping === true ? op.recordTypeId : defaultOpt\n                    field['fixedValueSource'].push({\n                        'id': op.recordTypeId,\n                        'name': op.name\n                    })\n                })\n                field.defaultValue = defaultOpt || undefined\n                retObj['data'].push(field)\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
			"responseFields": [
				{
					"name": "Opportunity Id",
					"id": "id",
					"type": "String",
					"description": "Id of the newly added Opportunity"
				}
			]
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdcab",
			"name": "Add or Update a Task",
			"id": "add-task",
			"priority": 2,
			"entity": "activity",
			"description": "Creates a new Task or updates an existing Task",
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {}\n    var update\n    var moment\n    var entity = \"Task\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    /**\n     * Sanitizes the user input\n     * @param {Object} userInput\n     * @param {Object} stepData\n     */\n\n    var sanitizeUserInput = function(userInput, stepData) {\n\n        let dataType\n        let sanitizedValue\n        let dataTypeArray\n        let skipFields = stepData && stepData.skipFields ? stepData.skipFields.split(',') : []\n\n        delete userInput['Update']\n        delete userInput['value']\n        delete userInput['field']\n        delete userInput['hardUpdateRecord']\n\n        // sanitize the user inputs\n        Object.keys(userInput).forEach(function (key) {\n\n            if (key.split(\"@\").length > 1) {\n\n                dataTypeArray = key.split(\"@\");\n                dataType = dataTypeArray.pop();\n\n                if (dataType === \"date\" || dataType === \"datetime\") {\n\n                    // checking if the input value is valid date or not\n                    if (moment(userInput[key]).isValid())\n                        sanitizedValue = moment(userInput[key]).toISOString();\n                    else\n                    // INFO : just for now testing the behaviour of API\n                        sanitizedValue = userInput[key];\n\n                } else if (dataType === \"boolean\") {\n\n                    sanitizedValue = (userInput[key] === \"true\");\n\n                } else if (dataType === \"multipicklist\") {\n                    let tempArr = [];\n                    if (userInput[key] instanceof Array) {\n                        userInput[key].forEach(v => {\n                            tempArr.push(v.value);\n                        });\n                    } else\n                        tempArr.push(userInput[key])\n                        \n                    sanitizedValue = tempArr.join('; ');\n                } else {\n                    sanitizedValue = userInput[key];\n                }\n\n                // finally setting the sanitizedValue of the input value\n                userInput[dataTypeArray.join('')] = sanitizedValue;\n                delete userInput[key];\n\n            } else if (key === \"contactForName\" || key === \"leadForName\") {\n\n                // extracting value for WhoId\n                userInput['WhoId'] = userInput[\"contactForName\"] ? userInput[\"contactForName\"] : (userInput[\"leadForName\"] ? userInput[\"leadForName\"] : undefined);\n                delete userInput[\"contactForName\"];\n                delete userInput[\"leadForName\"];\n\n            } else if (key === \"accountForRelatedTo\" || key === \"opportunityForRelatedTo\" || key === \"caseForRelatedTo\") {\n\n                // extracting value for WhatId\n                userInput['WhatId'] = userInput[\"accountForRelatedTo\"] ? userInput[\"accountForRelatedTo\"] : ( userInput[\"opportunityForRelatedTo\"] ? userInput[\"opportunityForRelatedTo\"] : undefined );\n                if (!userInput['WhatId'])\n                    userInput['WhatId'] = userInput['caseForRelatedTo'] ? userInput['caseForRelatedTo'] : undefined\n                delete userInput[\"accountForRelatedTo\"];\n                delete userInput[\"caseForRelatedTo\"];\n                delete userInput[\"opportunityForRelatedTo\"];\n\n            } else if (key === 'ActivityDate' || key === 'RecurrenceStartDateOnly' || key === 'RecurrenceEndDateOnly' || key === 'RemainderDateTime') {\n\n                // checking if the input value is valid date or not\n                if (moment(userInput[key]).isValid())\n                    userInput[key] = moment(userInput[key]).toISOString();\n            }\n\n        }, this);\n\n        if (!userInput['IsRecurrence'] || (userInput['IsRecurrence'] && userInput['IsRecurrence'] === \"No\")) {\n            ['RecurrenceTimeZoneSidKey', 'RecurrenceInstance', 'RecurrenceMonthOfYear', 'RecurrenceType', 'RecurrenceStartDateOnly'\n                , 'RecurrenceEndDateOnly', 'RecurrenceDayOfMonth', 'RecurrenceDayOfWeekMask', 'RecurrenceInterval'].forEach(p => {delete userInput[p];});\n        }\n\n        // Check for recurring type of task creation\n        userInput['IsRecurrence'] = userInput['IsRecurrence'] ? (userInput['IsRecurrence'] === \"Yes\") : false;\n\n        // check for reminder settings\n        userInput['IsReminderSet'] = userInput['IsReminderSet'] ? (userInput['IsReminderSet'] === \"Yes\") : false;\n\n        skipFields.forEach(field => delete userInput[field])\n    }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params'] || !utils['moment']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        let userInput = params['params']\n        update = userInput['Update'] ? userInput['Update'] : \"No\"\n        let hardUpdateRecord = userInput['hardUpdateRecord'] ? (userInput['hardUpdateRecord'] === \"Yes\") : true\n        moment = utils['moment']\n\n        let fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n        let loginInstanceUrl = fetchedParams['instance_url'];\n        let REST_ENDPOINT = \"/services/data\";\n        let API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        // common options Variables\n        let options = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (update === 'No' || (params['step'] && params['step']['value'] === stepValueUpdate)) {\n\n            options['method'] = 'POST';\n            options['url'] = '/sobjects/' + entity + '/';\n\n            // sanitizes the userInput\n            sanitizeUserInput(userInput, params['step'])\n\n            if (update === 'Yes' && (params['step'] && params['step']['taskId'])) {\n                \n                // delete fields which can not be updated\n                delete userInput['IsRecurrence']\n                delete userInput['TaskSubtype']\n\n                options.method = \"PATCH\";\n                options.url = \"/sobjects/\" + entity + \"/\" + params['step']['taskId'];\n                retObj['step'] = { taskId: params['step']['taskId'] }\n            }\n\n            // now add the body to the request\n            options['body'] = userInput;\n\n        } else if (params['step'] && params['step']['value'] === stepValueFetchObj) {\n\n            if (params['step']['taskId']) {\n                // send the request for fetching whole object corresponding to given id\n                options.method = \"GET\"\n                options.url = `/sobjects/${entity}/${params['step']['taskId']}`\n                retObj['step'] = {value: stepValueFetchObj, taskId: params['step']['taskId']}\n            } else {\n                options['method'] = 'POST'\n                options['url'] = '/sobjects/' + entity + '/'\n    \n                // sanitizes the userInput\n                sanitizeUserInput(userInput, params['step'])\n                 // now add the body to the request\n                options['body'] = userInput\n            }\n\n        } else if (update === 'Yes') {\n\n            let matchField = userInput['field'];\n            let url = \"/query/?q=select+id+from+\" + entity + \"+where+\";\n            let matchfieldSplit;\n            let matchFieldType;\n\n            // if user selected update but field and value not available throw error\n            if (!userInput['field'] || !userInput['value']) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Missing input for 'Value to check for'. This is required if 'Update if existing' is Yes.\";\n                return callback(retObj);\n            }\n\n            // if the selected matching field is custom field, extract its data type from name\n            if (userInput['field'].split('@').length > 1) {\n\n                matchfieldSplit = userInput['field'].split('@');\n                matchFieldType = matchfieldSplit.pop();\n                matchField = matchfieldSplit.join('');\n            }\n            \n            // format the query according to the coming field Type\n            if ((matchField.includes(\"Date\") || matchField.includes(\"date\") || matchField === \"SystemModstamp\") || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n                if (moment(userInput['value']).isValid())\n                    userInput['value'] = moment(userInput['value']).toISOString();\n\n                url += matchField + \"=\" + userInput['value'];\n            }\n            else\n                url += matchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n            options['method'] = 'GET';\n            options['url'] = url;\n            retObj['step'] = { value: stepValueSearch, hardUpdateRecord: hardUpdateRecord }\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" }\n    var errorMsg\n    const stepValueUpdate = \"UPDATE_BY_ID\"\n    const stepValueSearch = \"SEARCH_BY_FIELD\"\n    const stepValueFetchObj = \"FETCH_COMPLETE_OBJECT\"\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        var response = params['response']\n        var body = response['body']\n        if (response['statusCode'] == 201) {\n\n            var id = body.id\n            retObj['status'] = \"SUCCESS\"\n            retObj['data'] = {\n                parsedValues: {\n                    id: id\n                }\n            }\n\n        } else if (response['statusCode'] == 200) {\n\n            let taskId = body && body.records && body.records[0] && body.records[0].Id ? body.records[0].Id : \"\"\n            if (params['step']['value'] === stepValueSearch) {\n\n                retObj['status'] = \"SUCCESS\"\n\n                if (params['step']['hardUpdateRecord'])\n                    retObj['step'] = { value: stepValueUpdate , taskId: taskId }\n                else\n                    retObj['step'] = { value: stepValueFetchObj , taskId: taskId }\n\n            } else if (params['step']['value'] === stepValueFetchObj) {\n\n                let skip = []\n                Object.keys(body).forEach(field => {\n                    if (body[field] !== \"\" && body[field] != null)\n                        skip.push(field)\n                }, this);\n\n                retObj['status'] = \"SUCCESS\"\n                retObj['step'] = { value: stepValueUpdate, taskId: params['step']['taskId'], skipFields: skip.join(',') }\n            }\n\n        } else if (response['statusCode'] == 204) {\n\n            retObj['status'] = \"SUCCESS\"\n            retObj['data'] = {\n                parsedValues: {\n                    id: params['step'] && params['step']['taskId'] ? params['step']['taskId'] : \"\"\n                }\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the duplicate search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    return callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update if existing",
					"id": "Update",
					"inputType": "select",
					"type": "String",
					"defaultValue": "No",
					"required": true,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Check for duplicates using",
					"id": "field",
					"description": "Select the task property to be used to check for duplicates. We recommend this to be the subject",
					"inputType": "select",
					"type": "String",
					"required": false,
					"defaultValue": "Subject",
					"groupName": "Update",
					"groupType": "COLLECTION",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Task/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value to check for",
					"id": "value",
					"inputType": "input",
					"description": " Value for the above matching field",
					"type": "String",
					"groupName": "Update",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Update existing data?",
					"id": "hardUpdateRecord",
					"inputType": "select",
					"description": "Select 'Yes' if this Action's input data should override Salesforce field data (if present).",
					"type": "String",
					"defaultValue": "Yes",
					"required": false,
					"groupName": "Update",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Assigned to",
					"id": "OwnerId",
					"inputType": "select",
					"type": "String",
					"required": false,
					"searchAction": "search-user",
					"searchID": "Id",
					"groupName": "Task Information",
					"groupType": "COLLECTION",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+id, name+FROM+USER+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n\n            var arr = parsed.records;\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Name']\n                });\n            }\n            \n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Due Date",
					"id": "ActivityDate",
					"inputType": "input",
					"type": "Date",
					"required": false,
					"groupName": "Task Information",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Task Description",
					"id": "Description",
					"inputType": "textArea",
					"type": "String",
					"required": false,
					"groupName": "Task Information",
					"groupType": "COLLECTION"
				},
				{
					"fixedValueSource": [],
					"name": "Contact ID",
					"id": "contactForName",
					"inputType": "input",
					"groupName": "Contact/Lead",
					"groupType": "OR",
					"searchAction": "search-contact",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Lead ID",
					"id": "leadForName",
					"inputType": "input",
					"groupName": "Contact/Lead",
					"groupType": "OR",
					"searchAction": "search-lead",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Account ID",
					"id": "accountForRelatedTo",
					"inputType": "input",
					"groupName": "Related To",
					"groupType": "OR",
					"searchAction": "search-account",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Opportunity ID",
					"id": "opportunityForRelatedTo",
					"inputType": "input",
					"groupName": "Related To",
					"groupType": "OR",
					"searchAction": "search-opportunity",
					"searchID": "Id",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Call Result",
					"id": "CallDisposition",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Call Duration",
					"id": "CallDurationInSeconds",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Call Object Identifier",
					"id": "CallObject",
					"inputType": "input",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Create Recurring Series of Tasks",
					"id": "IsRecurrence",
					"inputType": "select",
					"defaultValue": "No",
					"type": "String",
					"groupName": "Recurrence",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Start Date",
					"id": "RecurrenceStartDateOnly",
					"inputType": "input",
					"type": "Date",
					"groupName": "Recurrence",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "End Date",
					"id": "RecurrenceEndDateOnly",
					"inputType": "input",
					"defaultValue": "",
					"type": "Date",
					"groupName": "Recurrence",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Recurrence of Month",
					"id": "RecurrenceDayOfMonth",
					"inputType": "input",
					"type": "String",
					"groupName": "Recurrence",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Recurrence of Week Mask",
					"id": "RecurrenceDayOfWeekMask",
					"inputType": "input",
					"type": "String",
					"groupName": "Recurrence",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Recurrence Interval",
					"id": "RecurrenceInterval",
					"inputType": "input",
					"type": "String",
					"groupName": "Recurrence",
					"groupType": "COLLECTION",
					"required": false
				},
				{
					"fixedValueSource": [
						{
							"id": "Yes",
							"name": "Yes"
						},
						{
							"id": "No",
							"name": "No"
						}
					],
					"name": "Set Reminder",
					"id": "IsReminderSet",
					"inputType": "select",
					"defaultValue": "No",
					"type": "String",
					"required": false
				},
				{
					"fixedValueSource": [],
					"name": "Remainder Date/Time",
					"id": "RemainderDateTime",
					"inputType": "input",
					"type": "Date",
					"required": false
				}
			],
			"dynamicInputFields": true,
			"dynamicInputFieldsRequest": "function dynamicInputFieldsRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Task\";\n    var update;\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        update = params.params.find(p => p.id === \"Update\");\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\" + entity + \"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['step'] = { update: update };\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicInputFieldsParse": "function dynamicInputFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n    var update;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_UNKNOWN\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        update = params.step && params.step.update ? params.step.update : null;\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n            let customField;\n            let type;\n\n            fields.map(function (el) {\n                customField = {};\n\n                // if the field is custom field\n                if ((el.custom === true && !el.autoNumber) || (el.name === \"Status\" || \n                    el.name === \"Priority\" || el.name === \"CallType\" || el.name === \"Subject\" || \n                    el.name === \"RecurrenceTimeZoneSidKey\" || el.name === \"RecurrenceInstance\" || \n                    el.name === \"RecurrenceMonthOfYear\" || el.name === \"RecurrenceType\" || el.name === 'WhatId' || el.name === 'WhoId' || el.name === 'Type')) {\n\n                    type = el.type;\n                    // adding type field only to those fields which are custom / here Type, Rating, Industry, Ownership are static \n                    // but to save 4 extra requests we are using them here.\n                    if (el.name === \"Status\" || el.name === \"Priority\" || el.name === \"CallType\" || el.name === \"Subject\" || el.name === 'Type') {\n\n                        customField['id'] = el.name;\n                        customField[\"groupName\"] = \"Task Information\";\n                        customField[\"groupType\"] = \"COLLECTION\";\n\n                    } else if (el.name === \"RecurrenceTimeZoneSidKey\" || el.name === \"RecurrenceInstance\" || el.name === \"RecurrenceMonthOfYear\" || \n                               el.name === \"RecurrenceType\" || el.name === 'WhatId' || el.name === 'WhoId') {\n\n                        customField['id'] = el.name;\n                        customField[\"groupName\"] = \"Recurrence\";\n                        customField[\"groupType\"] = \"COLLECTION\";\n\n                    } else\n                        customField['id'] = el.name + \"@\" + type\n\n                    customField['name'] = el.label\n                    customField['defaultValue'] = el.defaultValue\n                    customField['type'] = type && (type === \"date\" || type === \"datetime\") ? \"Date\" : \"String\"\n                    customField['description'] = el.inlineHelpText\n\n                    // Using few fields to infer if they are required or not\n                    if ((el.createable && !el.defaultedOnCreate && !el.nillable) || (el.name === \"Status\" || el.name === \"Priority\" || el.name === \"Subject\"))\n                        customField['required'] = true\n                    else\n                        customField['required'] = false\n\n                    if (type) {\n\n                        // adding options for the dropdown type fields\n                        if (type === \"picklist\" || type === \"boolean\" || type === \"multipicklist\" || type === \"combobox\") {\n\n                            if (type != \"multipicklist\")\n                                customField['inputType'] = \"select\";\n                            else\n                                customField['inputType'] = \"multiselect\";\n\n                            customField['fixedValueSource'] = [];\n\n                            if (type === \"boolean\") {\n\n                                // checkbox can take 2 values either true or false\n                                customField['fixedValueSource'].push({ id: \"true\", name: \"Yes\" });\n                                customField['fixedValueSource'].push({ id: \"false\", name: \"No\" });\n\n                            } else {\n\n                                // options for picklist\n                                el.picklistValues.forEach(op => {\n\n                                    // if the value is active\n                                    if (op.active) {\n                                        customField['fixedValueSource'].push({\n                                            \"id\": op.value || op.label,\n                                            \"name\": op.label\n                                        });\n                                    }\n                                }, this);\n                            }\n\n                        } else {\n\n                            customField['inputType'] = \"input\";\n                            // adding reference / lookup fields\n                            if (type === \"reference\") {\n\n                                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0]) {\n\n                                    // lookup / reference fields\n                                    switch (el.referenceTo[0]) {\n                                        case \"Contact\":\n                                            customField['searchAction'] = \"search-contact\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Account\":\n                                            customField['searchAction'] = \"search-account\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Lead\":\n                                            customField['searchAction'] = \"search-lead\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Opportunity\":\n                                            customField['searchAction'] = \"search-opportunity\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Task\":\n                                            customField['searchAction'] = \"search-task\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Case\":\n                                            customField['searchAction'] = \"search-case\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"Event\":\n                                            customField['searchAction'] = \"search-event\";\n                                            customField['searchID'] = \"Id\";\n                                            break;\n                                        case \"User\":\n                                            customField['searchAction'] = \"search-user\";\n                                            customField['searchID'] = \"Id\";\n                                    }\n                                }\n                            } else if (type === \"textarea\")\n                                customField['inputType'] = \"textArea\";\n                        }\n                    }\n                    retObj['data'].push(customField);\n                }\n            }, this);\n\n            const recordTypes = (body.recordTypeInfos || []).filter(type => type.available && !type.master)\n            if (recordTypes && recordTypes.length) {\n                let defaultOpt\n                let field = { \n                    type: 'String',\n                    inputType: 'select',\n                    name: 'Record Type',\n                    required: true,\n                    id: 'recordTypeId',\n                    fixedValueSource: []\n                }\n\n                // options for picklist\n                recordTypes.forEach(op => {\n                    defaultOpt = op.defaultRecordTypeMapping === true ? op.recordTypeId : defaultOpt\n                    field['fixedValueSource'].push({\n                        'id': op.recordTypeId,\n                        'name': op.name\n                    })\n                })\n                field.defaultValue = defaultOpt || undefined\n                retObj['data'].push(field)\n            }\n\n        } else {\n\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
			"responseFields": [
				{
					"name": "Task Id",
					"id": "id",
					"type": "String",
					"description": "Id of the newly added Task"
				}
			]
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdcaa",
			"name": "Get Account of a Contact",
			"id": "get-contact-account",
			"priority": 3,
			"entity": "company",
			"beta": true,
			"description": "Get Accountof a Contact",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var moment;\n    var GET_ID_STEP = \"GET_ACCOUNT\";\n    var FETCH_OBJECT_BY_ID = \"FETCH_COMPLETE_OBJECT\";\n    var url = \"/query/?q=SELECT+AccountId+FROM+Contact+WHERE+\";\n\n    // if the step data is not there set it to default \n    if (!params['step'])\n        params['step'] = { value: GET_ID_STEP }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var userInput = params['params'];\n        let searchField = 'Id';\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        // checking for utils\n        if (!moment) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        // checking if the user input is present or not\n        if (!userInput['contactId']) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj);\n        }\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n        var stepVal = params['step'] && params['step']['value'] ? params['step']['value'] : null;\n        let matchfieldSplit;\n        let matchFieldType;\n\n        url += searchField + \"='\" + encodeURIComponent(userInput['contactId'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n        // common request object\n        var options = {\n\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (stepVal && stepVal === GET_ID_STEP) {\n\n            // searching for the account for selected contact\n            options['url'] = url;\n            retObj['step'] = { value: GET_ID_STEP };\n\n        } else if (stepVal && stepVal === FETCH_OBJECT_BY_ID && params['step']['AccountId']) {\n\n            // fetching complete object for the given id\n            options['url'] = `/sobjects/Account/${params.step.AccountId}`;\n            retObj['step'] = { value: FETCH_OBJECT_BY_ID };\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Unknown error while creating request\";\n            return callback(retObj);\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var GET_ID_STEP = \"GET_ACCOUNT\";\n    var FETCH_OBJECT_BY_ID = \"FETCH_COMPLETE_OBJECT\";\n    var moment;\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n        var step = params['step'];\n        var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n        if (!libDate) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n            retObj['status'] = \"SUCCESS\";\n            if (step && step.value && step.value === GET_ID_STEP) {\n\n                body = response['body'].records ? response['body'].records : [];\n                if (body && body.length && body[0] && body[0]['AccountId']) {\n                    // using step to fetch complete data for the object\n                    retObj['step'] = { value: FETCH_OBJECT_BY_ID, AccountId: body[0]['AccountId'] }\n                }else\n                    retObj['data'] = { parsedValues: { found: \"No\" } }\n\n            } else if (step && step.value && step.value === FETCH_OBJECT_BY_ID && body) {\n\n                let responseObject = { found: \"Yes\" };\n                Object.keys(body).forEach(field => {\n\n                    if (typeof body[field] != \"object\" && field != \"attributes\") {\n                        if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                            responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                        else\n                            responseObject[field] = body[field];\n                    }\n                }, this);\n\n                retObj['data'] = { parsedValues: responseObject }\n\n            } else {\n\n                retObj['status'] = \"ERROR\";\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Error: Unknown error while creating request\";\n                return callback(retObj);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Contact Id",
					"id": "contactId",
					"inputType": "input",
					"type": "String",
					"required": true,
					"searchAction": "search-contact",
					"searchID": "Id"
				}
			],
			"responseFields": [
				{
					"name": "Account Found",
					"id": "found",
					"description": "Yes, if an Account is found",
					"type": "String"
				},
				{
					"name": "Account Name",
					"id": "Name",
					"type": "String"
				},
				{
					"name": "Account ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Account Source",
					"id": "AccountSource",
					"type": "String"
				},
				{
					"name": "Account Phone",
					"id": "Phone",
					"type": "String"
				},
				{
					"name": "Account Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Account Fax",
					"id": "Fax",
					"type": "String"
				},
				{
					"name": "Account Rating",
					"id": "Rating",
					"type": "String"
				},
				{
					"name": "Account SIC",
					"id": "Sic",
					"type": "String"
				},
				{
					"name": "Account Type",
					"id": "Type",
					"type": "String"
				},
				{
					"name": "Account Number",
					"id": "AccountNumber",
					"type": "String"
				},
				{
					"name": "Account Annual Revnue",
					"id": "AnnualRevenue",
					"type": "String"
				},
				{
					"name": "Account Billing Country",
					"id": "BillingCountry",
					"type": "String"
				},
				{
					"name": "Account Billing ZIP/Postal Code",
					"id": "BillingPostal",
					"type": "String"
				},
				{
					"name": "Account Billing Street",
					"id": "BillingStreet",
					"type": "String"
				},
				{
					"name": "Account Created By",
					"id": "CreatedById",
					"type": "String"
				},
				{
					"name": "Account D and B Company",
					"id": "DandbCompanyId",
					"type": "String"
				},
				{
					"name": "Account Jigsaw Company",
					"id": "JigsawCompanyId",
					"type": "String"
				},
				{
					"name": "Account Data.com Key",
					"id": "Jigsaw",
					"type": "String"
				},
				{
					"name": "Account Last Activity Date",
					"id": "LastActivityDate",
					"type": "String"
				},
				{
					"name": "Account Last Modified By",
					"id": "LastModifiedById",
					"type": "String"
				},
				{
					"name": "Account Last Modify Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Account Master Record Id",
					"id": "MasterRecordId",
					"description": "If this object was deleted as the result of a merge, this field contains the ID of the record that was kept. If this object was deleted for any other reason, or has not been deleted, the value is null.",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Master Account Details"
				},
				{
					"name": "Account Employees Number",
					"id": "NumberOfEmployees",
					"type": "String"
				},
				{
					"name": "Account Shipping Country",
					"id": "ShippingCountry",
					"type": "String"
				},
				{
					"name": "Account Shipping ZIP/Postal Code",
					"id": "ShippingPostalCode",
					"type": "String"
				},
				{
					"name": "Account Shipping State",
					"id": "ShippingState",
					"type": "String"
				},
				{
					"name": "Account Shipping Street",
					"id": "ShippingStreet",
					"type": "String"
				},
				{
					"name": "Account System Modstamp",
					"id": "SystemModstamp",
					"type": "String"
				},
				{
					"name": "Account URL",
					"id": "Site",
					"type": "String"
				},
				{
					"name": "Account Billing City",
					"id": "BillingCity",
					"type": "String"
				},
				{
					"name": "Account Billing State",
					"id": "BillingState",
					"type": "String"
				},
				{
					"name": "Account Clean Status",
					"id": "CleanStatus",
					"type": "String"
				},
				{
					"name": "Account D-U-N-S Number",
					"id": "DunsNumber",
					"type": "String"
				},
				{
					"name": "Account Industry",
					"id": "Industry",
					"type": "String"
				},
				{
					"name": "Account Account Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Account NAICS Code",
					"id": "NaicsCode",
					"type": "String"
				},
				{
					"name": "Account NAICS Description",
					"id": "NaicsDesc",
					"type": "String"
				},
				{
					"name": "Account Owner",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Owner User Details"
				},
				{
					"name": "Account Ownership",
					"id": "Ownership",
					"type": "String"
				},
				{
					"name": "Parent Account Id",
					"id": "ParentId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Parent Account Details"
				},
				{
					"name": "Account Shipping City",
					"id": "ShippingCity",
					"type": "String"
				},
				{
					"name": "Account SIC Description",
					"id": "SicDesc",
					"type": "String"
				},
				{
					"name": "Account Ticker Symbol",
					"id": "TickerSymbol",
					"type": "String"
				},
				{
					"name": "Account Tradestyle",
					"id": "Tradestyle",
					"type": "String"
				},
				{
					"name": "Account Website",
					"id": "Website",
					"type": "String"
				},
				{
					"name": "Account Year Started",
					"id": "YearStarted",
					"type": "String"
				},
				{
					"name": "Account Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Account\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var errorMsg;\n    var response;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Account/gmi.test(el.label) ? el.label : `Account ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdca9",
			"name": "Get Opportunities of a Contact",
			"id": "get-contact-opportunity",
			"priority": 3,
			"entity": "deal",
			"beta": true,
			"description": "Get Opportunity for Contact",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var moment;\n    var GET_ID_STEP = \"GET_OPPORTUNITY\";\n    var FETCH_OBJECT_BY_ID = \"FETCH_COMPLETE_OBJECT\";\n    var url = \"/query/?q=SELECT+OpportunityId+FROM+OpportunityContactRole+WHERE+\";\n\n    // if the step data is not there set it to default \n    if (!params['step'])\n        params['step'] = { value: GET_ID_STEP }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var userInput = params['params'];\n        let searchField = 'ContactId';\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        // checking for utils\n        if (!moment) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        // checking if the user input is present or not\n        if (!userInput['contactId']) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj);\n        }\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n        var stepVal = params['step'] && params['step']['value'] ? params['step']['value'] : null;\n        let matchfieldSplit;\n        let matchFieldType;\n\n        url += searchField + \"='\" + encodeURIComponent(userInput['contactId'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n        // common request object\n        var options = {\n\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (stepVal && stepVal === GET_ID_STEP) {\n\n            // searching for the opportunities for selected contact\n            options['url'] = url;\n            retObj['step'] = { value: GET_ID_STEP };\n\n        } else if (stepVal && stepVal === FETCH_OBJECT_BY_ID && params['step']['OpportunityId']) {\n\n            // fetching complete object for the given id\n            options['url'] = `/sobjects/Opportunity/${params.step.OpportunityId}`;\n            retObj['step'] = { value: FETCH_OBJECT_BY_ID, others: params.step.others || '' };\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Unknown error while creating request\";\n            return callback(retObj);\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var GET_ID_STEP = \"GET_OPPORTUNITY\";\n    var FETCH_OBJECT_BY_ID = \"FETCH_COMPLETE_OBJECT\";\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n        var step = params['step'];\n        var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n        if (!libDate) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n\n            if (step && step.value && step.value === GET_ID_STEP) {\n\n                body = response['body'].records ? response['body'].records : [];\n\n                if (body && body.length && body[0] && body[0]['OpportunityId'])\n                    // using step to fetch complete data for the object\n                    retObj['step'] = { value: FETCH_OBJECT_BY_ID, OpportunityId: body[0]['OpportunityId'], others: body.length > 1 ?  body.slice(1, body.length).map(op => op.OpportunityId).join() : [] }\n                else\n                    retObj['data'] = { parsedValues: { found: \"No\" } }\n\n            } else if (step && step.value && step.value === FETCH_OBJECT_BY_ID && body) {\n\n                let responseObject = { found: \"Yes\" };\n                Object.keys(body).forEach(field => {\n\n                    if (typeof body[field] != \"object\" && field != \"attributes\") {\n                        if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                            responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                        else\n                            responseObject[field] = body[field];\n                    }\n                }, this);\n\n                if (step.others) {\n                    responseObject['otherOpportunities'] = step.others\n                }\n\n                retObj['data'] = { parsedValues: responseObject }\n\n            } else {\n\n                retObj['status'] = \"ERROR\";\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Error: Unknown error while creating request\";\n                return callback(retObj);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Contact Id",
					"id": "contactId",
					"inputType": "input",
					"type": "String",
					"required": true,
					"searchAction": "search-contact",
					"searchID": "Id"
				}
			],
			"responseFields": [
				{
					"name": "Opportunity Found",
					"id": "found",
					"description": "Yes if an Opportunity is found",
					"type": "String"
				},
				{
					"name": "Opportunity Name",
					"id": "Name",
					"type": "String"
				},
				{
					"name": "Opportunity ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Opportunity Forecast Category",
					"id": "ForecastCategory",
					"type": "String"
				},
				{
					"name": "Opportunity Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Opportunity Stage Name",
					"id": "StageName",
					"type": "String"
				},
				{
					"name": "Opportunity Amount",
					"id": "Amount",
					"type": "String"
				},
				{
					"name": "Opportunity Type",
					"id": "Type",
					"type": "String"
				},
				{
					"name": "Opportunity Iq Score",
					"id": "IqScore",
					"type": "String"
				},
				{
					"name": "Opportunity Contract",
					"id": "ContractId",
					"type": "String"
				},
				{
					"name": "Opportunity Fiscal Period",
					"id": "Fiscal",
					"type": "String"
				},
				{
					"name": "Opportunity Won?",
					"id": "Won",
					"type": "String"
				},
				{
					"name": "Opportunity Account ID",
					"id": "AccountId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Associated Account's Details"
				},
				{
					"name": "Opportunity Campaign ID",
					"id": "CampaignId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-campaign",
					"searchLabel": "Get Associated Campaign's Details"
				},
				{
					"name": "Opportunity Created By",
					"id": "CreatedById",
					"type": "String"
				},
				{
					"name": "Opportunity Expected Revenue",
					"id": "ExpectedRevenue",
					"type": "String"
				},
				{
					"name": "Opportunity Fiscal Quarter",
					"id": "FiscalQuarter",
					"type": "String"
				},
				{
					"name": "Opportunity Forecast Category Name",
					"id": "ForecastCategoryName",
					"type": "String"
				},
				{
					"name": "Opportunity Line Item?",
					"id": "HasOpportunityLineItem",
					"type": "String"
				},
				{
					"name": "Opportunity Last Activity Date",
					"id": "LastActivityDate",
					"type": "String"
				},
				{
					"name": "Opportunity Last Modified By",
					"id": "LastModifiedById",
					"type": "String"
				},
				{
					"name": "Opportunity Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Opportunity Pricebook 2 Id",
					"id": "Pricebook2Id",
					"type": "String"
				},
				{
					"name": "Opportunity System Modstamp",
					"id": "SystemModstamp",
					"type": "String"
				},
				{
					"name": "Total Opportunity Quantity",
					"id": "TotalOpportunityQuantity",
					"type": "String"
				},
				{
					"name": "Opportunity Close Date",
					"id": "CloseDate",
					"type": "String"
				},
				{
					"name": "Opportunity Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Opportunity Fiscal Year",
					"id": "FiscalYear",
					"type": "String"
				},
				{
					"name": "Is Opportunity Closed?",
					"id": "IsClosed",
					"type": "String"
				},
				{
					"name": "Is Opportunity Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Is Opportunity Private?",
					"id": "IsPrivate",
					"type": "String"
				},
				{
					"name": "Lead Source",
					"id": "LeadSource",
					"type": "String"
				},
				{
					"name": "Opportunity Next Step",
					"id": "NextStep",
					"type": "String"
				},
				{
					"name": "Opportunity Owner ID",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Owner User's Details"
				},
				{
					"name": "Opportunity Probability",
					"id": "Probability",
					"type": "String"
				},
				{
					"name": "Opportunity Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				},
				{
					"name": "Other Opportunity Ids",
					"id": "otherOpportunities",
					"type": "String",
					"description": "If there are more than one opportunity for the given Contact, csv of those id's"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Opportunity\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var errorMsg;\n    var response;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Opportunity/gmi.test(el.label) ? el.label : `Opportunity ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdca8",
			"name": "Get Contacts for a Opportunity",
			"id": "get-opportunity-contact",
			"priority": 3,
			"entity": "person",
			"beta": true,
			"description": "Get Contacts for Opportunity",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var moment;\n    var GET_ID_STEP = \"GET_CONTACT\";\n    var FETCH_OBJECT_BY_ID = \"FETCH_COMPLETE_OBJECT\";\n    var url = \"/query/?q=SELECT+ContactId+FROM+OpportunityContactRole+WHERE+\";\n\n    // if the step data is not there set it to default \n    if (!params['step'])\n        params['step'] = { value: GET_ID_STEP }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var userInput = params['params'];\n        let searchField = 'opportunityId';\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        // checking for utils\n        if (!moment) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        // checking if the user input is present or not\n        if (!userInput['opportunityId']) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj);\n        }\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n        var stepVal = params['step'] && params['step']['value'] ? params['step']['value'] : null;\n        let matchfieldSplit;\n        let matchFieldType;\n\n        url += searchField + \"='\" + encodeURIComponent(userInput['opportunityId'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n        // common request object\n        var options = {\n\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (stepVal && stepVal === GET_ID_STEP) {\n\n            // searching for the contacts for selected opportunities\n            options['url'] = url;\n            retObj['step'] = { value: GET_ID_STEP };\n\n        } else if (stepVal && stepVal === FETCH_OBJECT_BY_ID && params['step']['ContactId']) {\n\n            // fetching complete object for the given id\n            options['url'] = `/sobjects/Contact/${params.step.ContactId}`;\n            retObj['step'] = { value: FETCH_OBJECT_BY_ID, others: params.step.others || '' };\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Unknown error while creating request\";\n            return callback(retObj);\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var GET_ID_STEP = \"GET_CONTACT\";\n    var FETCH_OBJECT_BY_ID = \"FETCH_COMPLETE_OBJECT\";\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n        var step = params['step'];\n        var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n        if (!libDate) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n\n            if (step && step.value && step.value === GET_ID_STEP) {\n\n                body = response['body'].records ? response['body'].records : [];\n\n                if (body && body.length && body[0] && body[0]['ContactId'])\n                    // using step to fetch complete data for the object\n                    retObj['step'] = { value: FETCH_OBJECT_BY_ID, ContactId: body[0]['ContactId'], others: body.length > 1 ?  body.slice(1, body.length).map(op => op.ContactId).join() : [] }\n                else\n                    retObj['data'] = { parsedValues: { found: \"No\" } }\n\n            } else if (step && step.value && step.value === FETCH_OBJECT_BY_ID && body) {\n\n                let responseObject = { found: \"Yes\" };\n                Object.keys(body).forEach(field => {\n\n                    if (typeof body[field] != \"object\" && field != \"attributes\") {\n                        if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                            responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                        else\n                            responseObject[field] = body[field];\n                    }\n                }, this);\n\n                if (step.others) {\n                    responseObject['otherContacts'] = step.others\n                }\n\n                retObj['data'] = { parsedValues: responseObject }\n\n            } else {\n\n                retObj['status'] = \"ERROR\";\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Error: Unknown error while creating request\";\n                return callback(retObj);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Opportunity Id",
					"id": "opportunityId",
					"inputType": "input",
					"type": "String",
					"required": true,
					"searchAction": "search-opportunity",
					"searchID": "Id"
				}
			],
			"responseFields": [
				{
					"name": "Contact Found",
					"id": "found",
					"description": "Yes if a Contact is found",
					"type": "String"
				},
				{
					"name": "Contact ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Contact Email",
					"id": "Email",
					"type": "String"
				},
				{
					"name": "Contact Name",
					"id": "Name",
					"type": "String"
				},
				{
					"name": "Contact Phone",
					"id": "Phone",
					"type": "String"
				},
				{
					"name": "Contact Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Contact First Name",
					"id": "FirstName",
					"type": "String"
				},
				{
					"name": "Contact Last Name",
					"id": "LastName",
					"type": "String"
				},
				{
					"name": "Contact Account ID",
					"id": "AccountId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Account Details"
				},
				{
					"name": "Contact Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Contact Title",
					"id": "Title",
					"type": "String"
				},
				{
					"name": "Contact Owner Id",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Contact Owner Details"
				},
				{
					"name": "Contact Assistant Name",
					"id": "AssistantName",
					"type": "String"
				},
				{
					"name": "Contact Fax",
					"id": "Fax",
					"type": "String"
				},
				{
					"name": "Contact Assistant Phone",
					"id": "AssistantPhone",
					"type": "String"
				},
				{
					"name": "Contact Department",
					"id": "Department",
					"type": "String"
				},
				{
					"name": "Contact Created By Id",
					"id": "CreatedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Contact Email Bounced Date",
					"id": "EmailBouncedDate",
					"type": "String"
				},
				{
					"name": "Contact Email Bounced Reason",
					"id": "EmailBouncedReason",
					"type": "String"
				},
				{
					"name": "Contact Email Opt Out",
					"id": "HasOptedOutOfEmail",
					"type": "String"
				},
				{
					"name": "Contact Do Not Call",
					"id": "DoNotCall",
					"type": "String"
				},
				{
					"name": "Contact Jigsaw Contact ID",
					"id": "JigsawContactId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-contact",
					"searchLabel": "Get Contact Details"
				},
				{
					"name": "Contact Last Activity",
					"id": "LastActivityDate",
					"type": "String"
				},
				{
					"name": "Contact Last Stay-In-Touch Request Date",
					"id": "LastCURequestDate",
					"type": "String"
				},
				{
					"name": "Contact Last Stay-In-Touch Save Date",
					"id": "LastCUUpdateDate",
					"type": "String"
				},
				{
					"name": "Contact Last Modified By",
					"id": "LastModifiedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Contact Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Contact Home Phone",
					"id": "HomePhone",
					"type": "String"
				},
				{
					"name": "Contact Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Contact Lead Source",
					"id": "LeadSource",
					"type": "String"
				},
				{
					"name": "Contact Mailing Street",
					"id": "MailingStreet",
					"type": "String"
				},
				{
					"name": "Contact Mailing City",
					"id": "MailingCity",
					"type": "String"
				},
				{
					"name": "Contact Mailing State",
					"id": "MailingState",
					"type": "String"
				},
				{
					"name": "Contact Mailing Postal Code",
					"id": "MailingPostalCode",
					"type": "String"
				},
				{
					"name": "Contact Mailing Country",
					"id": "MailingCountry",
					"type": "String"
				},
				{
					"name": "Contact Mailing State Code",
					"id": "MailingStateCode",
					"type": "String"
				},
				{
					"name": "Contact Mailing Country Code",
					"id": "MailingCountryCode",
					"type": "String"
				},
				{
					"name": "Contact Mailing Latitude",
					"id": "MailingLatitude",
					"type": "String"
				},
				{
					"name": "Contact Mailing Longitude",
					"id": "MailingLongitude",
					"type": "String"
				},
				{
					"name": "Contact Mailing Geo Code Accuracy",
					"id": "MailingGeocodeAccuracy",
					"type": "String"
				},
				{
					"name": "Contact Mobile Phone",
					"id": "MobilePhone",
					"type": "String"
				},
				{
					"name": "Contact Other Street",
					"id": "OtherStreet",
					"type": "String"
				},
				{
					"name": "Contact Other City",
					"id": "OtherCity",
					"type": "String"
				},
				{
					"name": "Contact Other State",
					"id": "OtherState",
					"type": "String"
				},
				{
					"name": "Contact Other Postal Code",
					"id": "OtherPostalCode",
					"type": "String"
				},
				{
					"name": "Contact Other Country",
					"id": "OtherCountry",
					"type": "String"
				},
				{
					"name": "Contact Other State Code",
					"id": "OtherStateCode",
					"type": "String"
				},
				{
					"name": "Contact Other Country Code",
					"id": "OtherCountryCode",
					"type": "String"
				},
				{
					"name": "Contact Other Latitude",
					"id": "OtherLatitude",
					"type": "String"
				},
				{
					"name": "Contact Other Longitude",
					"id": "OtherLongitude",
					"type": "String"
				},
				{
					"name": "Contact Other Geo Code Accuracy",
					"id": "OtherGeocodeAccuracy",
					"type": "String"
				},
				{
					"name": "Contact Other Phone",
					"id": "OtherPhone",
					"type": "String"
				},
				{
					"name": "Contact Salutation",
					"id": "Salutation",
					"type": "String"
				},
				{
					"name": "Contact Birthdate",
					"id": "Birthdate",
					"type": "String"
				},
				{
					"name": "Contact Clean Status",
					"id": "CleanStatus",
					"type": "String"
				},
				{
					"name": "Contact Data.com Key",
					"id": "Jigsaw",
					"type": "String"
				},
				{
					"name": "Contact Fax Opt Out",
					"id": "HasOptedOutOfFax",
					"type": "String"
				},
				{
					"name": "Master Record Id",
					"id": "MasterRecordId",
					"type": "String",
					"description": "If this record was deleted as the result of a merge, this field contains the ID of the record that remains. If this record was deleted for any other reason, or has not been deleted, the value is null.",
					"searchID": "value",
					"searchAction": "search-contact",
					"searchLabel": "Get Master Contact Details"
				},
				{
					"name": "Contact Reports To",
					"id": "ReportsToId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-contact",
					"searchLabel": "Get Contact Details"
				},
				{
					"name": "Contact Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Contact\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var errorMsg;\n    var response;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Contact/gmi.test(el.label) ? el.label : `Contact ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdca7",
			"name": "Search an Account",
			"id": "search-account",
			"priority": 3,
			"entity": "company",
			"description": "Search Accounts",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var moment;\n    var searchStep = \"SEARCH\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var url = \"/query/?q=SELECT+id+FROM+Account+WHERE+\";\n\n    // if the step data is not there set it to default \n    if (!params['step'])\n        params['step'] = { value: searchStep }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var userInput = params['params'];\n        var searchField = userInput['field'];\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        // checking for utils\n        if (!moment) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n\n        // checking if the user input is present or not\n        if (!searchField || !userInput['value']) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj);\n        }\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n        var stepVal = params['step'] && params['step']['value'] ? params['step']['value'] : null;\n\n        let matchfieldSplit;\n        let matchFieldType;\n\n        // if the selected matching field is custom field, extract its data type from name\n        if (searchField.split('@').length > 1) {\n\n            matchfieldSplit = searchField.split('@');\n            matchFieldType = matchfieldSplit.pop();\n            searchField = matchfieldSplit.join('');\n        }\n\n        // format the query according to the coming field Type\n        if (searchField.includes(\"Date\") || searchField.includes(\"date\") || searchField === \"SystemModstamp\" || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n            if (moment(userInput['value']).isValid())\n                userInput['value'] = moment(userInput['value']).toISOString();\n            url += searchField + \"=\" + userInput['value'];\n        }\n        else\n            url += searchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n        // common request object\n        var options = {\n\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (stepVal && stepVal === searchStep) {\n\n            // searching for the given field and corresponding value\n            options['url'] = url;\n            retObj['step'] = { value: searchStep }\n\n        } else if (stepVal && stepVal === fetchObjectStep && params['step']['id']) {\n\n            // fetching complete object for the given id\n            options['url'] = `/sobjects/Account/${params.step.id}`;\n            retObj['step'] = { value: fetchObjectStep };\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Unknown error while creating request\";\n            return callback(retObj);\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var searchStep = \"SEARCH\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n        var step = params['step'];\n        var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n        if (!libDate) {\n\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n\n            if (step && step.value && step.value === searchStep) {\n\n                body = response['body'].records ? response['body'].records : [];\n\n                if (body && body.length && body[0] && body[0]['Id'])\n                    // using step to fetch complete data for the object\n                    retObj['step'] = { value: fetchObjectStep, id: body[0]['Id'] }\n                else\n                    retObj['data'] = { parsedValues: { found: \"No\" } }\n\n            } else if (step && step.value && step.value === fetchObjectStep && body) {\n\n                let responseObject = { found: \"Yes\" };\n                Object.keys(body).forEach(field => {\n\n                    if (typeof body[field] != \"object\" && field != \"attributes\") {\n                        if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                            responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                        else\n                            responseObject[field] = body[field];\n                    }\n                }, this);\n\n                retObj['data'] = { parsedValues: responseObject }\n\n            } else {\n\n                retObj['status'] = \"ERROR\";\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Error: Unknown error while creating request\";\n                return callback(retObj);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Search by",
					"id": "field",
					"description": "Select the account property to search",
					"inputType": "select",
					"defaultValue": "Name",
					"type": "String",
					"required": true,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Account/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var body;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value",
					"id": "value",
					"description": "Enter the value of the property selected above.",
					"inputType": "input",
					"type": "String",
					"required": true
				}
			],
			"responseFields": [
				{
					"name": "Account Found",
					"id": "found",
					"description": "Yes, if an Account is found",
					"type": "String"
				},
				{
					"name": "Account Name",
					"id": "Name",
					"type": "String"
				},
				{
					"name": "Account ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Account Source",
					"id": "AccountSource",
					"type": "String"
				},
				{
					"name": "Account Phone",
					"id": "Phone",
					"type": "String"
				},
				{
					"name": "Account Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Account Fax",
					"id": "Fax",
					"type": "String"
				},
				{
					"name": "Account Rating",
					"id": "Rating",
					"type": "String"
				},
				{
					"name": "Account SIC",
					"id": "Sic",
					"type": "String"
				},
				{
					"name": "Account Type",
					"id": "Type",
					"type": "String"
				},
				{
					"name": "Account Number",
					"id": "AccountNumber",
					"type": "String"
				},
				{
					"name": "Account Annual Revnue",
					"id": "AnnualRevenue",
					"type": "String"
				},
				{
					"name": "Account Billing Country",
					"id": "BillingCountry",
					"type": "String"
				},
				{
					"name": "Account Billing ZIP/Postal Code",
					"id": "BillingPostal",
					"type": "String"
				},
				{
					"name": "Account Billing Street",
					"id": "BillingStreet",
					"type": "String"
				},
				{
					"name": "Account Billing State Code",
					"id": "BillingStateCode",
					"type": "String"
				},
				{
					"name": "Account Billing Country Code",
					"id": "BillingCountryCode",
					"type": "String"
				},
				{
					"name": "Account Created By",
					"id": "CreatedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Master User Details"
				},
				{
					"name": "Account D and B Company",
					"id": "DandbCompanyId",
					"type": "String"
				},
				{
					"name": "Account Jigsaw Company",
					"id": "JigsawCompanyId",
					"type": "String"
				},
				{
					"name": "Account Data.com Key",
					"id": "Jigsaw",
					"type": "String"
				},
				{
					"name": "Account Last Activity Date",
					"id": "LastActivityDate",
					"type": "String"
				},
				{
					"name": "Account Last Modified By Id",
					"id": "LastModifiedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Master User Details"
				},
				{
					"name": "Account Last Modify Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Account Master Record Id",
					"id": "MasterRecordId",
					"description": "If this object was deleted as the result of a merge, this field contains the ID of the record that was kept. If this object was deleted for any other reason, or has not been deleted, the value is null.",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Master Account Details"
				},
				{
					"name": "Account Employees",
					"id": "NumberOfEmployees",
					"type": "String"
				},
				{
					"name": "Account Shipping Country",
					"id": "ShippingCountry",
					"type": "String"
				},
				{
					"name": "Account Shipping ZIP/Postal Code",
					"id": "ShippingPostalCode",
					"type": "String"
				},
				{
					"name": "Account Shipping State",
					"id": "ShippingState",
					"type": "String"
				},
				{
					"name": "Account Shipping Street",
					"id": "ShippingStreet",
					"type": "String"
				},
				{
					"name": "Account System Modstamp",
					"id": "SystemModstamp",
					"type": "String"
				},
				{
					"name": "Account URL",
					"id": "Site",
					"type": "String"
				},
				{
					"name": "Account Billing City",
					"id": "BillingCity",
					"type": "String"
				},
				{
					"name": "Account Billing State",
					"id": "BillingState",
					"type": "String"
				},
				{
					"name": "Account Clean Status",
					"id": "CleanStatus",
					"type": "String"
				},
				{
					"name": "Account D-U-N-S Number",
					"id": "DunsNumber",
					"type": "String"
				},
				{
					"name": "Account Industry",
					"id": "Industry",
					"type": "String"
				},
				{
					"name": "Account Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Account NAICS Code",
					"id": "NaicsCode",
					"type": "String"
				},
				{
					"name": "Account NAICS Description",
					"id": "NaicsDesc",
					"type": "String"
				},
				{
					"name": "Account Owner Id",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Owner User Details"
				},
				{
					"name": "Account Ownership",
					"id": "Ownership",
					"type": "String"
				},
				{
					"name": "Account Parent Id",
					"id": "ParentId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Parent Account Details"
				},
				{
					"name": "Account Shipping City",
					"id": "ShippingCity",
					"type": "String"
				},
				{
					"name": "Account Shipping State Code",
					"id": "ShippingStateCode",
					"type": "String"
				},
				{
					"name": "Account Shipping Country Code",
					"id": "ShippingCountryCode",
					"type": "String"
				},
				{
					"name": "Account SIC Description",
					"id": "SicDesc",
					"type": "String"
				},
				{
					"name": "Account Ticker Symbol",
					"id": "TickerSymbol",
					"type": "String"
				},
				{
					"name": "Account Tradestyle",
					"id": "Tradestyle",
					"type": "String"
				},
				{
					"name": "Account Website",
					"id": "Website",
					"type": "String"
				},
				{
					"name": "Account Year Started",
					"id": "YearStarted",
					"type": "String"
				},
				{
					"name": "Account Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Account\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n\n            method: 'GET',\n            url: \"/sobjects/\" + entity + \"/describe/\",\n\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var errorMsg;\n    var response;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_PARSE\";\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Account/gmi.test(el.label) ? el.label : `Account ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdca6",
			"name": "Search a Campaign",
			"id": "search-campaign",
			"priority": 4,
			"entity": "",
			"beta": true,
			"description": "Search Campaigns",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var moment;\n    var searchStep = \"SEARCH_CAMPAIGN\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var url = \"/query/?q=SELECT+id+FROM+Campaign+WHERE+\";\n\n    // if the step data is not there set it to default \n    if (!params['step'])\n        params['step'] = { value: searchStep }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var userInput = params['params'];\n        var searchField = userInput['field'];\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        // checking for utils\n        if (!moment) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        // checking if the user input is present or not\n        if (!searchField || !userInput['value']) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj);\n        }\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n        var stepVal = params['step'] && params['step']['value'] ? params['step']['value'] : null;\n        let matchfieldSplit;\n        let matchFieldType;\n\n        // if the selected matching field is custom field, extract its data type from name\n        if (searchField.split('@').length > 1) {\n\n            matchfieldSplit = searchField.split('@');\n            matchFieldType = matchfieldSplit.pop();\n            searchField = matchfieldSplit.join('');\n        }\n\n        // format the query according to the coming field Type\n        if (searchField.includes(\"Date\") || searchField.includes(\"date\") || searchField === \"SystemModstamp\" || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n            if (moment(userInput['value']).isValid())\n                userInput['value'] = moment(userInput['value']).toISOString();\n            url += searchField + \"=\" + userInput['value'];\n        }\n        else\n            url += searchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n        // common request object\n        var options = {\n\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (stepVal && stepVal === searchStep) {\n\n            // searching for the given field and corresponding value\n            options['url'] = url;\n            retObj['step'] = { value: searchStep };\n\n        } else if (stepVal && stepVal === fetchObjectStep && params['step']['id']) {\n\n            // fetching complete object for the given id\n            options['url'] = `/sobjects/Campaign/${params.step.id}`;\n            retObj['step'] = { value: fetchObjectStep };\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Unknown error while creating request\";\n            return callback(retObj);\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var searchStep = \"SEARCH_CAMPAIGN\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n        var step = params['step'];\n        var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n        if (!libDate) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n\n            if (step && step.value && step.value === searchStep) {\n\n                body = response['body'].records ? response['body'].records : [];\n\n                if (body && body.length && body[0] && body[0]['Id'])\n                    // using step to fetch complete data for the object\n                    retObj['step'] = { value: fetchObjectStep, id: body[0]['Id'] }\n                else\n                    retObj['data'] = { parsedValues: { found: \"No\" } }\n\n            } else if (step && step.value && step.value === fetchObjectStep && body) {\n\n                let responseObject = { found: \"Yes\" };\n\n                Object.keys(body).forEach(field => {\n                    if (typeof body[field] != \"object\" && field != \"attributes\") {\n                        if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                            responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                        else\n                            responseObject[field] = body[field];\n                    }\n                }, this);\n\n                retObj['data'] = { parsedValues: responseObject }\n\n            } else {\n\n                retObj['status'] = \"ERROR\";\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Error: Unknown error while creating request\";\n                return callback(retObj);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Search by",
					"id": "field",
					"description": "Select the campaign property to search",
					"inputType": "select",
					"type": "String",
					"defaultValue": "Name",
					"required": true,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Campaign/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable && el.name != 'IsDeleted' && el.name != 'IsActive') {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value",
					"id": "value",
					"description": "Enter the value of the property selected above.",
					"inputType": "input",
					"type": "String",
					"required": true
				}
			],
			"responseFields": [
				{
					"name": "Campaign Found?",
					"id": "found",
					"description": "Yes, if a Campaign is found",
					"type": "String"
				},
				{
					"name": "Campaign ID",
					"id": "Id",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Campaign\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                let responseField = {\n                    \"name\": /^Campaign/gmi.test(el.label) ? el.label : `Campaign ${el.label}`,\n                    \"id\": el.name,\n                    \"type\": \"string\",\n                    \"defaultValue\": el.defaultValue || undefined,\n                    \"description\": el.inlineHelpText || undefined\n                }\n\n                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0] && el.name !== 'Id') {\n\n                    // lookup / reference fields\n                    switch (el.referenceTo[0]) {\n                        case \"Contact\":\n                            responseField['searchAction'] = \"search-contact\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= `Get Contact Details`;\n                            break;\n                        case \"Account\":\n                            responseField['searchAction'] = \"search-account\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Account Details\";\n                            break;\n                        case \"Lead\":\n                            responseField['searchAction'] = \"search-lead\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Lead Details\";\n                            break;\n                        case \"Opportunity\":\n                            responseField['searchAction'] = \"search-opportunity\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Opportunity Details\";\n                            break;\n                        case \"Task\":\n                            responseField['searchAction'] = \"search-task\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Task Details\";\n                            break;\n                        case \"Case\":\n                            responseField['searchAction'] = \"search-case\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Case Details\";\n                            break;\n                        case \"Event\":\n                            responseField['searchAction'] = \"search-event\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Event Details\";\n                            break;\n                        case \"User\":\n                            responseField['searchAction'] = \"search-user\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get User Details\";\n                            break;\n                        case \"Campaign\":\n                            responseField['searchAction'] = \"search-campaign\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Campaign Details\";\n                    }\n                }\n\n                if (responseField.id !== 'Id')\n                    retObj['data'].push(responseField);\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdca5",
			"name": "Search a Case",
			"id": "search-case",
			"priority": 4,
			"entity": "ticket",
			"description": "Search Cases",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var moment;\n    var searchStep = \"SEARCH_CASE\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var url = \"/query/?q=SELECT+id+FROM+Case+WHERE+\";\n\n    // if the step data is not there set it to default \n    if (!params['step'])\n        params['step'] = { value: searchStep }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var userInput = params['params'];\n        var searchField = userInput['field'];\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        // checking for utils\n        if (!moment) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        // checking if the user input is present or not\n        if (!searchField || !userInput['value']) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj);\n        }\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n        var stepVal = params['step'] && params['step']['value'] ? params['step']['value'] : null;\n        let matchfieldSplit;\n        let matchFieldType;\n\n        // if the selected matching field is custom field, extract its data type from name\n        if (searchField.split('@').length > 1) {\n\n            matchfieldSplit = searchField.split('@');\n            matchFieldType = matchfieldSplit.pop();\n            searchField = matchfieldSplit.join('');\n        }\n\n        // format the query according to the coming field Type\n        if (searchField.includes(\"Date\") || searchField.includes(\"date\") || searchField === \"SystemModstamp\" || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n            if (moment(userInput['value']).isValid())\n                userInput['value'] = moment(userInput['value']).toISOString();\n            url += searchField + \"=\" + userInput['value'];\n        }\n        else\n            url += searchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n        // common request object\n        var options = {\n\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (stepVal && stepVal === searchStep) {\n\n            // searching for the given field and corresponding value\n            options['url'] = url;\n            retObj['step'] = { value: searchStep };\n\n        } else if (stepVal && stepVal === fetchObjectStep && params['step']['id']) {\n\n            // fetching complete object for the given id\n            options['url'] = `/sobjects/Case/${params.step.id}`;\n            retObj['step'] = { value: fetchObjectStep };\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Unknown error while creating request\";\n            return callback(retObj);\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var searchStep = \"SEARCH_CASE\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n        var step = params['step'];\n        var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n        if (!libDate) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n\n            if (step && step.value && step.value === searchStep) {\n\n                body = response['body'].records ? response['body'].records : [];\n\n                if (body && body.length && body[0] && body[0]['Id'])\n                    // using step to fetch complete data for the object\n                    retObj['step'] = { value: fetchObjectStep, id: body[0]['Id'] }\n                else\n                    retObj['data'] = { parsedValues: { found: \"No\" } }\n\n            } else if (step && step.value && step.value === fetchObjectStep && body) {\n\n                let responseObject = { found: \"Yes\" };\n\n                Object.keys(body).forEach(field => {\n                    if (typeof body[field] != \"object\" && field != \"attributes\") {\n                        if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                            responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                        else\n                            responseObject[field] = body[field];\n                    }\n                }, this);\n\n                retObj['data'] = { parsedValues: responseObject }\n\n            } else {\n\n                retObj['status'] = \"ERROR\";\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Error: Unknown error while creating request\";\n                return callback(retObj);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Search by",
					"id": "field",
					"description": "Select the case property to search",
					"inputType": "select",
					"type": "String",
					"defaultValue": "Subject",
					"required": true,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Case/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value",
					"id": "value",
					"description": "Enter the value of the property selected above.",
					"inputType": "input",
					"type": "String",
					"required": true
				}
			],
			"responseFields": [
				{
					"name": "Case Found?",
					"id": "found",
					"description": "Yes if a Case is found",
					"type": "String"
				},
				{
					"name": "Case ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Case Number",
					"id": "CaseNumber",
					"type": "String"
				},
				{
					"name": "Case Owner Id",
					"id": "OwnerId",
					"type": "String",
					"searchAction": "search-owner",
					"searchID": "value",
					"searchLabel": "Get Owner User Details"
				},
				{
					"name": "Case Contact Id",
					"id": "ContactId",
					"type": "String",
					"searchAction": "search-contact",
					"searchID": "value",
					"searchLabel": "Get Contact Details"
				},
				{
					"name": "Case Contact Mobile",
					"id": "ContactMobile",
					"type": "String"
				},
				{
					"name": "Case Contact Email",
					"id": "ContactEmail",
					"type": "String"
				},
				{
					"name": "Case Contact Fax",
					"id": "ContactFax",
					"type": "String"
				},
				{
					"name": "Case Contact Phone",
					"id": "ContactPhone",
					"type": "String"
				},
				{
					"name": "Case Account ID",
					"id": "AccountId",
					"type": "String",
					"searchAction": "search-account",
					"searchID": "value",
					"searchLabel": "Get Account Details"
				},
				{
					"name": "Case Asset ID",
					"id": "AssetId",
					"type": "String"
				},
				{
					"name": "Case Business Hours",
					"id": "BusinessHoursId",
					"type": "String"
				},
				{
					"name": "Case Closed When Created",
					"id": "IsClosedOnCreate",
					"type": "String"
				},
				{
					"name": "Case Escalated?",
					"id": "IsEscalated",
					"type": "String"
				},
				{
					"name": "Case Internal Comments",
					"id": "Comments",
					"type": "String"
				},
				{
					"name": "Case Type",
					"id": "Type",
					"type": "String"
				},
				{
					"name": "Case Reason",
					"id": "Reason",
					"type": "String"
				},
				{
					"name": "Case Status",
					"id": "Status",
					"type": "String"
				},
				{
					"name": "Case Priority",
					"id": "Priority",
					"type": "String"
				},
				{
					"name": "Case Origin",
					"id": "Origin",
					"type": "String"
				},
				{
					"name": "Parent Case Id",
					"id": "ParentId",
					"type": "String",
					"searchAction": "search-case",
					"searchID": "value",
					"searchLabel": "Get Case Details"
				},
				{
					"name": "Case Subject",
					"id": "Subject",
					"type": "String"
				},
				{
					"name": "Case Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Case Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Case Created By",
					"id": "CreatedById",
					"type": "String"
				},
				{
					"name": "Case Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Case Last Modified By",
					"id": "LastModifiedById",
					"type": "String"
				},
				{
					"name": "Case Closed Date",
					"id": "ClosedDate",
					"type": "String"
				},
				{
					"name": "Case System Mod stamp",
					"id": "SystemModstamp",
					"type": "String"
				},
				{
					"name": "Case Last Viewed Date",
					"id": "LastViewedDate",
					"type": "String"
				},
				{
					"name": "Case Last Referenced Date",
					"id": "LastReferencedDate",
					"type": "String"
				},
				{
					"name": "Case Web Company",
					"id": "SuppliedCompany",
					"type": "String"
				},
				{
					"name": "Case Web Email",
					"id": "SuppliedEmail",
					"type": "String"
				},
				{
					"name": "Case Web Name",
					"id": "SuppliedName",
					"type": "String"
				},
				{
					"name": "Case Web Phone",
					"id": "SuppliedPhone",
					"type": "String"
				},
				{
					"name": "Case Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Case\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Case/gmi.test(el.label) ? el.label : `Case ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdca4",
			"name": "Search a Contact",
			"id": "search-contact",
			"priority": 3,
			"entity": "person",
			"description": "Search Contacts",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var moment;\n    var searchStep = \"SEARCH_CONTACT\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var url = \"/query/?q=SELECT+id+FROM+Contact+WHERE+\";\n\n    // if the step data is not there set it to default \n    if (!params['step'])\n        params['step'] = { value: searchStep }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var userInput = params['params'];\n        var searchField = userInput['field'];\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        // checking for utils\n        if (!moment) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        // checking if the user input is present or not\n        if (!searchField || !userInput['value']) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj);\n        }\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n        var stepVal = params['step'] && params['step']['value'] ? params['step']['value'] : null;\n        let matchfieldSplit;\n        let matchFieldType;\n\n        // if the selected matching field is custom field, extract its data type from name\n        if (searchField.split('@').length > 1) {\n\n            matchfieldSplit = searchField.split('@');\n            matchFieldType = matchfieldSplit.pop();\n            searchField = matchfieldSplit.join('');\n        }\n\n        // format the query according to the coming field Type\n        if (searchField.includes(\"Date\") || searchField.includes(\"date\") || searchField === \"SystemModstamp\" || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n            if (moment(userInput['value']).isValid())\n                userInput['value'] = moment(userInput['value']).toISOString();\n            url += searchField + \"=\" + userInput['value'];\n        }\n        else\n            url += searchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n        // common request object\n        var options = {\n\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (stepVal && stepVal === searchStep) {\n\n            // searching for the given field and corresponding value\n            options['url'] = url;\n            retObj['step'] = { value: searchStep };\n\n        } else if (stepVal && stepVal === fetchObjectStep && params['step']['id']) {\n\n            // fetching complete object for the given id\n            options['url'] = `/sobjects/Contact/${params.step.id}`;\n            retObj['step'] = { value: fetchObjectStep };\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Unknown error while creating request\";\n            return callback(retObj);\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var searchStep = \"SEARCH_CONTACT\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n        var step = params['step'];\n        var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n        if (!libDate) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n\n            if (step && step.value && step.value === searchStep) {\n\n                body = response['body'].records ? response['body'].records : [];\n\n                if (body && body.length && body[0] && body[0]['Id'])\n                    // using step to fetch complete data for the object\n                    retObj['step'] = { value: fetchObjectStep, id: body[0]['Id'] }\n                else\n                    retObj['data'] = { parsedValues: { found: \"No\" } }\n\n            } else if (step && step.value && step.value === fetchObjectStep && body) {\n\n                let responseObject = { found: \"Yes\" };\n\n                Object.keys(body).forEach(field => {\n                    if (typeof body[field] != \"object\" && field != \"attributes\") {\n                        if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                            responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                        else\n                            responseObject[field] = body[field];\n                    }\n                }, this);\n\n                retObj['data'] = { parsedValues: responseObject }\n\n            } else {\n\n                retObj['status'] = \"ERROR\";\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Error: Unknown error while creating request\";\n                return callback(retObj);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Search by",
					"id": "field",
					"description": "Select the contact property to search",
					"inputType": "select",
					"type": "String",
					"defaultValue": "Email",
					"required": true,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Contact/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value",
					"id": "value",
					"description": "Enter the value of the property selected above.",
					"inputType": "input",
					"type": "String",
					"required": true
				}
			],
			"responseFields": [
				{
					"name": "Contact Found?",
					"id": "found",
					"description": "Yes if a Contact is found",
					"type": "String"
				},
				{
					"name": "Contact Email",
					"id": "Email",
					"type": "String"
				},
				{
					"name": "Contact Salutation",
					"id": "Salutation",
					"type": "String"
				},
				{
					"name": "Contact Name",
					"id": "Name",
					"type": "String"
				},
				{
					"name": "Contact Phone Number",
					"id": "Phone",
					"type": "String"
				},
				{
					"name": "Contact ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Contact Birthdate",
					"id": "Birthdate",
					"type": "String"
				},
				{
					"name": "Contact Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Contact First Name",
					"id": "FirstName",
					"type": "String"
				},
				{
					"name": "Contact Last Name",
					"id": "LastName",
					"type": "String"
				},
				{
					"name": "Contact Account ID",
					"id": "AccountId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Parent Account Details"
				},
				{
					"name": "Contact Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Contact Title",
					"id": "Title",
					"type": "String"
				},
				{
					"name": "Contact Owner Id",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Contact Owner Details"
				},
				{
					"name": "Contact Assistant Name",
					"id": "AssistantName",
					"type": "String"
				},
				{
					"name": "Contact Fax",
					"id": "Fax",
					"type": "String"
				},
				{
					"name": "Contact Assistant Phone",
					"id": "AssistantPhone",
					"type": "String"
				},
				{
					"name": "Contact Contact Created By",
					"id": "CreatedById",
					"type": "String"
				},
				{
					"name": "Contact Email Bounced Date",
					"id": "EmailBouncedDate",
					"type": "String"
				},
				{
					"name": "Contact Email Bounced Reason",
					"id": "EmailBouncedReason",
					"type": "String"
				},
				{
					"name": "Contact Jigsaw Contact ID",
					"id": "JigsawContactId",
					"type": "String"
				},
				{
					"name": "Contact Last Activity",
					"id": "LastActivityDate",
					"type": "String"
				},
				{
					"name": "Contact Last Stay-In-Touch Request Date",
					"id": "LastCURequestDate",
					"type": "String"
				},
				{
					"name": "Contact Last Stay-In-Touch Save Date",
					"id": "LastCUUpdateDate",
					"type": "String"
				},
				{
					"name": "Contact Last Modified By",
					"id": "LastModifiedById",
					"type": "String"
				},
				{
					"name": "Contact Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Contact Home Phone",
					"id": "HomePhone",
					"type": "String"
				},
				{
					"name": "Contact Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Contact Lead Source",
					"id": "LeadSource",
					"type": "String"
				},
				{
					"name": "Contact Mailing Street",
					"id": "MailingStreet",
					"type": "String"
				},
				{
					"name": "Contact Mailing City",
					"id": "MailingCity",
					"type": "String"
				},
				{
					"name": "Contact Mailing State",
					"id": "MailingState",
					"type": "String"
				},
				{
					"name": "Contact Mailing Postal Code",
					"id": "MailingPostalCode",
					"type": "String"
				},
				{
					"name": "Contact Mailing Country",
					"id": "MailingCountry",
					"type": "String"
				},
				{
					"name": "Contact Mailing State Code",
					"id": "MailingStateCode",
					"type": "String"
				},
				{
					"name": "Contact Mailing Country Code",
					"id": "MailingCountryCode",
					"type": "String"
				},
				{
					"name": "Contact Mailing Latitude",
					"id": "MailingLatitude",
					"type": "String"
				},
				{
					"name": "Contact Mailing Longitude",
					"id": "MailingLongitude",
					"type": "String"
				},
				{
					"name": "Contact Mailing Geo Code Accuracy",
					"id": "MailingGeocodeAccuracy",
					"type": "String"
				},
				{
					"name": "Contact Contact Mobile Phone",
					"id": "MobilePhone",
					"type": "String"
				},
				{
					"name": "Contact Other Street",
					"id": "OtherStreet",
					"type": "String"
				},
				{
					"name": "Contact Other City",
					"id": "OtherCity",
					"type": "String"
				},
				{
					"name": "Contact Other State",
					"id": "OtherState",
					"type": "String"
				},
				{
					"name": "Contact Other Postal Code",
					"id": "OtherPostalCode",
					"type": "String"
				},
				{
					"name": "Contact Other Country",
					"id": "OtherCountry",
					"type": "String"
				},
				{
					"name": "Contact Other State Code",
					"id": "OtherStateCode",
					"type": "String"
				},
				{
					"name": "Contact Other Country Code",
					"id": "OtherCountryCode",
					"type": "String"
				},
				{
					"name": "Contact Other Latitude",
					"id": "OtherLatitude",
					"type": "String"
				},
				{
					"name": "Contact Other Longitude",
					"id": "OtherLongitude",
					"type": "String"
				},
				{
					"name": "Contact Other Geo Code Accuracy",
					"id": "OtherGeocodeAccuracy",
					"type": "String"
				},
				{
					"name": "Contact Other Phone",
					"id": "OtherPhone",
					"type": "String"
				},
				{
					"name": "Contact Other State",
					"id": "OtherState",
					"type": "String"
				},
				{
					"name": "Contact Other Street",
					"id": "OtherStreet",
					"type": "String"
				},
				{
					"name": "Contact Clean Status",
					"id": "CleanStatus",
					"type": "String"
				},
				{
					"name": "Contact Data.com Key",
					"id": "Jigsaw",
					"type": "String"
				},
				{
					"name": "Contact Department",
					"id": "Department",
					"type": "String"
				},
				{
					"name": "Contact Do Not Call",
					"id": "DoNotCall",
					"type": "String"
				},
				{
					"name": "Contact Email Opt Out",
					"id": "HasOptedOutOfEmail",
					"type": "String"
				},
				{
					"name": "Contact Fax Opt Out",
					"id": "HasOptedOutOfFax",
					"type": "String"
				},
				{
					"name": "Master Record Id",
					"id": "MasterRecordId",
					"type": "String",
					"description": "If this record was deleted as the result of a merge, this field contains the ID of the record that remains. If this record was deleted for any other reason, or has not been deleted, the value is null.",
					"searchID": "value",
					"searchAction": "search-contact",
					"searchLabel": "Get Master Contact Details"
				},
				{
					"name": "Contact Reports To",
					"id": "ReportsToId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-contact",
					"searchLabel": "Get Contact Details"
				},
				{
					"name": "Contact Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Contact\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Contact/gmi.test(el.label) ? el.label : `Contact ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [
				"customType"
			],
			"_id": "5fa91f464c9b80aa636fdca3",
			"name": "Search a Custom object",
			"id": "search-custom-object",
			"priority": 3,
			"entity": "dataEntry",
			"description": "Search Custom Objects",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var moment;\n    var searchStep = \"SEARCH_CASE\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var url\n\n\n    // if the step data is not there set it to default \n    if (!params['step'])\n        params['step'] = { value: searchStep }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let userInput = params['params'];\n        let searchField = userInput['field'];\n        let fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        // fetch the selected type of entity\n        let entity = userInput['customType']\n        url = `/query/?q=SELECT+id+FROM+${entity}+WHERE+`;\n\n        // checking for utils\n        if (!moment || !entity) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util Or missing required user input\";\n            return callback(retObj);\n        }\n\n        // checking if the user input is present or not\n        if (!searchField || !userInput['value']) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj);\n        }\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n        var stepVal = params['step'] && params['step']['value'] ? params['step']['value'] : null;\n        let matchfieldSplit;\n        let matchFieldType;\n\n        // if the selected matching field is custom field, extract its data type from name\n        if (searchField.split('@').length > 1) {\n\n            matchfieldSplit = searchField.split('@');\n            matchFieldType = matchfieldSplit.pop();\n            searchField = matchfieldSplit.join('');\n        }\n\n        // format the query according to the coming field Type\n        if (searchField.includes(\"Date\") || searchField.includes(\"date\") || searchField === \"SystemModstamp\" || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n            if (moment(userInput['value']).isValid())\n                userInput['value'] = moment(userInput['value']).toISOString();\n            url += searchField + \"=\" + userInput['value'];\n        }\n        else\n            url += searchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n        // common request object\n        var options = {\n\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (stepVal && stepVal === searchStep) {\n\n            // searching for the given field and corresponding value\n            options['url'] = url;\n            retObj['step'] = { value: searchStep };\n\n        } else if (stepVal && stepVal === fetchObjectStep && params['step']['id']) {\n\n            // fetching complete object for the given id\n            options['url'] = `/sobjects/${entity}/${params.step.id}`;\n            retObj['step'] = { value: fetchObjectStep };\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Unknown error while creating request\";\n            return callback(retObj);\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var searchStep = \"SEARCH_CASE\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n        var step = params['step'];\n        var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n        if (!libDate) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n\n            if (step && step.value && step.value === searchStep) {\n\n                body = response['body'].records ? response['body'].records : [];\n\n                if (body && body.length && body[0] && body[0]['Id'])\n                    // using step to fetch complete data for the object\n                    retObj['step'] = { value: fetchObjectStep, id: body[0]['Id'] }\n                else\n                    retObj['data'] = { parsedValues: { found: \"No\" } }\n\n            } else if (step && step.value && step.value === fetchObjectStep && body) {\n\n                let responseObject = { found: \"Yes\" };\n\n                Object.keys(body).forEach(field => {\n                    if (typeof body[field] != \"object\" && field != \"attributes\") {\n                        if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                            responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                        else\n                            responseObject[field] = body[field];\n                    }\n                }, this);\n\n                retObj['data'] = { parsedValues: responseObject }\n\n            } else {\n\n                retObj['status'] = \"ERROR\";\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Error: Unknown error while creating request\";\n                return callback(retObj);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Custom Type",
					"id": "customType",
					"description": "Select the type of Custom object to trigger for",
					"inputType": "select",
					"type": "String",
					"required": true,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/sobjects?limit=5',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let response = params['response'];\n        let body = response['body'];\n        let responseObjArray = []\n\n        if (response['statusCode'] == 200 && response['body'] && response['body'].sobjects) {\n\n            response['body'].sobjects.filter(obj => obj.label && obj.name)\n            .sort(function(x, y) { return y.custom - x.custom })\n            .forEach(obj => {\n                responseObjArray.push({\n                    \"id\": obj.name,\n                    \"name\": obj.label\n                })\n            })\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Search by",
					"id": "field",
					"description": "Select the Custom object property to search",
					"inputType": "select",
					"type": "String",
					"required": true,
					"dependsOn": "customType",
					"groupName": "Search",
					"groupType": "COLLECTION",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {}\n\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let entity = params['params']['customType']\n\n        if (!entity) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj)\n        }\n\n        // Generate HTTP Request body\n\n        var fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: `/sobjects/${entity}/describe/`,\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value",
					"id": "value",
					"groupName": "Search",
					"groupType": "COLLECTION",
					"description": "Enter the value of the property selected above.",
					"inputType": "input",
					"type": "String",
					"required": true
				}
			],
			"responseFields": [
				{
					"name": "Found",
					"id": "found",
					"description": "Yes if a Object is found",
					"type": "String"
				},
				{
					"name": "Object ID",
					"id": "Id",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {}\n    var entity\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let inputParams = params.params && params.params ? params.params : []\n        entity = inputParams.find(p => p.id === \"customType\") || {}\n\n        if (!entity || !entity.value) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj)\n        }\n\n        // Generate HTTP Request body\n\n        var fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity.value+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                let responseField = {\n                    \"name\": el.label,\n                    \"id\": el.name,\n                    \"type\": \"string\",\n                    \"description\": el.inlineHelpText || undefined\n                }\n\n                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0] && el.name !== 'Id') {\n\n                    // lookup / reference fields\n                    switch (el.referenceTo[0]) {\n                        case \"Contact\":\n                            responseField['searchAction'] = \"search-contact\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= `Get Contact Details`;\n                            break;\n                        case \"Account\":\n                            responseField['searchAction'] = \"search-account\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Account Details\";\n                            break;\n                        case \"Lead\":\n                            responseField['searchAction'] = \"search-lead\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Lead Details\";\n                            break;\n                        case \"Opportunity\":\n                            responseField['searchAction'] = \"search-opportunity\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Opportunity Details\";\n                            break;\n                        case \"Task\":\n                            responseField['searchAction'] = \"search-task\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Task Details\";\n                            break;\n                        case \"Case\":\n                            responseField['searchAction'] = \"search-case\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Case Details\";\n                            break;\n                        case \"Event\":\n                            responseField['searchAction'] = \"search-event\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Event Details\";\n                            break;\n                        case \"User\":\n                            responseField['searchAction'] = \"search-user\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get User Details\";\n                            break;\n                        case \"Campaign\":\n                            responseField['searchAction'] = \"search-campaign\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Campaign Details\";\n                    }\n                }\n\n                if (responseField.id !== 'Id')\n                    retObj['data'].push(responseField);\n\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdca2",
			"name": "Search an Event",
			"id": "search-event",
			"priority": 3,
			"entity": "activity",
			"description": "Search Events",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var moment;\n    var searchStep = \"SEARCH_EVENT\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var url = \"/query/?q=SELECT+id+FROM+Event+WHERE+\";\n\n    // if the step data is not there set it to default \n    if (!params['step'])\n        params['step'] = { value: searchStep }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var userInput = params['params'];\n        var searchField = userInput['field'];\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        // checking for utils\n        if (!moment) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        // checking if the user input is present or not\n        if (!searchField || !userInput['value']) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj);\n        }\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n        var stepVal = params['step'] && params['step']['value'] ? params['step']['value'] : null;\n        let matchfieldSplit;\n        let matchFieldType;\n\n        // if the selected matching field is custom field, extract its data type from name\n        if (searchField.split('@').length > 1) {\n\n            matchfieldSplit = searchField.split('@');\n            matchFieldType = matchfieldSplit.pop();\n            searchField = matchfieldSplit.join('');\n        }\n\n        // format the query according to the coming field Type\n        if (searchField.includes(\"Date\") || searchField.includes(\"date\") || searchField === \"SystemModstamp\" || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n            if (moment(userInput['value']).isValid())\n                userInput['value'] = moment(userInput['value']).toISOString();\n            url += searchField + \"=\" + userInput['value'];\n        }\n        else\n            url += searchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n        // common request object\n        var options = {\n\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (stepVal && stepVal === searchStep) {\n\n            // searching for the given field and corresponding value\n            options['url'] = url;\n            retObj['step'] = { value: searchStep };\n\n        } else if (stepVal && stepVal === fetchObjectStep && params['step']['id']) {\n\n            // fetching complete object for the given id\n            options['url'] = `/sobjects/Event/${params.step.id}`;\n            retObj['step'] = { value: fetchObjectStep };\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Unknown error while creating request\";\n            return callback(retObj);\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var searchStep = \"SEARCH_EVENT\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n        var step = params['step'];\n        var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n        if (!libDate) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n\n            if (step && step.value && step.value === searchStep) {\n\n                body = response['body'].records ? response['body'].records : [];\n\n                if (body && body.length && body[0] && body[0]['Id'])\n                    // using step to fetch complete data for the object\n                    retObj['step'] = { value: fetchObjectStep, id: body[0]['Id'] }\n                else\n                    retObj['data'] = { parsedValues: { found: \"No\" } }\n\n            } else if (step && step.value && step.value === fetchObjectStep && body) {\n\n                let responseObject = { found: \"Yes\" };\n\n                Object.keys(body).forEach(field => {\n                    if (typeof body[field] != \"object\" && field != \"attributes\") {\n                        if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                            responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                        else\n                            responseObject[field] = body[field];\n                    }\n                }, this);\n\n                retObj['data'] = { parsedValues: responseObject }\n\n            } else {\n\n                retObj['status'] = \"ERROR\";\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Error: Unknown error while creating request\";\n                return callback(retObj);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Search by",
					"id": "field",
					"description": "Select the Event property to search",
					"inputType": "select",
					"type": "String",
					"defaultValue": "Subject",
					"required": true,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Event/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value",
					"id": "value",
					"description": "Enter the value of the property selected above.",
					"inputType": "input",
					"type": "String",
					"required": true
				}
			],
			"responseFields": [
				{
					"name": "Event Found?",
					"id": "found",
					"description": "Yes if a Event is found",
					"type": "String"
				},
				{
					"name": "Event ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Event Type",
					"id": "Type",
					"type": "String"
				},
				{
					"name": "Event Assigned To",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Assigned User Details"
				},
				{
					"name": "Event Name",
					"id": "WhoId",
					"type": "String"
				},
				{
					"name": "Event Account ID",
					"id": "AccountId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Account Details"
				},
				{
					"name": "Event What ID",
					"id": "WhatId",
					"type": "String"
				},
				{
					"name": "Event Subject",
					"id": "Subject",
					"type": "String"
				},
				{
					"name": "Event Location",
					"id": "location",
					"type": "String"
				},
				{
					"name": "Event Email",
					"id": "Email",
					"type": "String"
				},
				{
					"name": "Event Activity Date",
					"id": "ActivityDate",
					"type": "String"
				},
				{
					"name": "Event Reminder DateTime",
					"id": "ReminderDateTime",
					"type": "String"
				},
				{
					"name": "Event Start Date Time",
					"id": "StartDateTime",
					"type": "String"
				},
				{
					"name": "Event End Date Time",
					"id": "EndDateTime",
					"type": "String"
				},
				{
					"name": "Event Activity Date Time",
					"id": "ActivityDateTime",
					"type": "String"
				},
				{
					"name": "Event Duration In Minutes",
					"id": "DurationInMinutes",
					"type": "String"
				},
				{
					"name": "Event All-Day Event",
					"id": "IsAllDayEvent",
					"type": "String"
				},
				{
					"name": "Event Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Event IsPrivate",
					"id": "IsPrivate",
					"type": "String"
				},
				{
					"name": "Event Phone",
					"id": "Phone",
					"type": "String"
				},
				{
					"name": "Event ShowAs",
					"id": "ShowAs",
					"type": "String"
				},
				{
					"name": "Is Event Deleted",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Is Child",
					"id": "IsChild",
					"type": "String"
				},
				{
					"name": "GroupEvent",
					"id": "IsGroupEvent",
					"type": "String"
				},
				{
					"name": "Event Created By Id",
					"id": "CreatedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Event Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Event Last Modified By Id",
					"id": "LastModifiedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Event Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Event System Mod stamp",
					"id": "SystemModstamp",
					"type": "String"
				},
				{
					"name": "Is Event Archived",
					"id": "IsArchived",
					"type": "String"
				},
				{
					"name": "Is Recurrence",
					"id": "IsRecurrence",
					"type": "String"
				},
				{
					"name": "Is Event Reminder Set",
					"id": "IsReminderSet",
					"type": "String"
				},
				{
					"name": "Event Subtype",
					"id": "EventSubtype",
					"type": "String"
				},
				{
					"name": "Event Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Event\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Event/gmi.test(el.label) ? el.label : `Event ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdca1",
			"name": "Search a Folder",
			"id": "search-folder",
			"priority": 4,
			"entity": "collection.file",
			"beta": true,
			"description": "Search Folders",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var moment;\n    var searchStep = \"SEARCH_FOLDER\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var url = \"/query/?q=SELECT+id+FROM+Folder+WHERE+\";\n\n    // if the step data is not there set it to default \n    if (!params['step'])\n        params['step'] = { value: searchStep }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var userInput = params['params'];\n        var searchField = userInput['field'];\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        // checking for utils\n        if (!moment) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        // checking if the user input is present or not\n        if (!searchField || !userInput['value']) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj);\n        }\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n        var stepVal = params['step'] && params['step']['value'] ? params['step']['value'] : null;\n        let matchfieldSplit;\n        let matchFieldType;\n\n        // if the selected matching field is custom field, extract its data type from name\n        if (searchField.split('@').length > 1) {\n\n            matchfieldSplit = searchField.split('@');\n            matchFieldType = matchfieldSplit.pop();\n            searchField = matchfieldSplit.join('');\n        }\n\n        // format the query according to the coming field Type\n        if (searchField.includes(\"Date\") || searchField.includes(\"date\") || searchField === \"SystemModstamp\" || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n            if (moment(userInput['value']).isValid())\n                userInput['value'] = moment(userInput['value']).toISOString();\n            url += searchField + \"=\" + userInput['value'];\n        }\n        else\n            url += searchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n        // common request object\n        var options = {\n\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (stepVal && stepVal === searchStep) {\n\n            // searching for the given field and corresponding value\n            options['url'] = url;\n            retObj['step'] = { value: searchStep };\n\n        } else if (stepVal && stepVal === fetchObjectStep && params['step']['id']) {\n\n            // fetching complete object for the given id\n            options['url'] = `/sobjects/Folder/${params.step.id}`;\n            retObj['step'] = { value: fetchObjectStep };\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Unknown error while creating request\";\n            return callback(retObj);\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var searchStep = \"SEARCH_FOLDER\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n        var step = params['step'];\n        var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n        if (!libDate) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n\n            if (step && step.value && step.value === searchStep) {\n\n                body = response['body'].records ? response['body'].records : [];\n\n                if (body && body.length && body[0] && body[0]['Id'])\n                    // using step to fetch complete data for the object\n                    retObj['step'] = { value: fetchObjectStep, id: body[0]['Id'] }\n                else\n                    retObj['data'] = { parsedValues: { found: \"No\" } }\n\n            } else if (step && step.value && step.value === fetchObjectStep && body) {\n\n                let responseObject = { found: \"Yes\" };\n\n                Object.keys(body).forEach(field => {\n                    if (typeof body[field] != \"object\" && field != \"attributes\") {\n                        if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                            responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                        else\n                            responseObject[field] = body[field];\n                    }\n                }, this);\n\n                retObj['data'] = { parsedValues: responseObject }\n\n            } else {\n\n                retObj['status'] = \"ERROR\";\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Error: Unknown error while creating request\";\n                return callback(retObj);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Search by",
					"id": "field",
					"description": "Select the folder property to search",
					"inputType": "select",
					"type": "String",
					"defaultValue": "Name",
					"required": true,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Folder/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value",
					"id": "value",
					"description": "Enter the value of the property selected above.",
					"inputType": "input",
					"type": "String",
					"required": true
				}
			],
			"responseFields": [
				{
					"name": "Folder Found?",
					"id": "found",
					"description": "Yes if a Folder is found",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Folder\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                let responseField = {\n                    \"name\": /^Folder/gmi.test(el.label) ? el.label : `Folder ${el.label}`,\n                    \"id\": el.name,\n                    \"type\": \"string\",\n                    \"defaultValue\": el.defaultValue || undefined,\n                    \"description\": el.inlineHelpText || undefined\n                }\n\n                if (el.name === 'ParentId') {\n                    responseField.name = 'Folder Parent Id'\n                }\n\n                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0] && el.name !== 'Id') {\n\n                    // lookup / reference fields\n                    switch (el.referenceTo[0]) {\n                        case \"Contact\":\n                            responseField['searchAction'] = \"search-contact\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= `Get Contact Details`;\n                            break;\n                        case \"Account\":\n                            responseField['searchAction'] = \"search-account\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Account Details\";\n                            break;\n                        case \"Lead\":\n                            responseField['searchAction'] = \"search-lead\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Lead Details\";\n                            break;\n                        case \"Opportunity\":\n                            responseField['searchAction'] = \"search-opportunity\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Opportunity Details\";\n                            break;\n                        case \"Task\":\n                            responseField['searchAction'] = \"search-task\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Task Details\";\n                            break;\n                        case \"Case\":\n                            responseField['searchAction'] = \"search-case\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Case Details\";\n                            break;\n                        case \"Event\":\n                            responseField['searchAction'] = \"search-event\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Event Details\";\n                            break;\n                        case \"User\":\n                            responseField['searchAction'] = \"search-user\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get User Details\";\n                            break;\n                        case \"Campaign\":\n                            responseField['searchAction'] = \"search-campaign\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Campaign Details\";\n                    }\n                }\n                retObj['data'].push(responseField);\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdca0",
			"name": "Search a Lead",
			"id": "search-lead",
			"priority": 3,
			"entity": "person",
			"description": "Search Leads",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var moment;\n    var searchStep = \"SEARCH\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var url = \"/query/?q=SELECT+id+FROM+Lead+WHERE+\";\n\n    // if the step data is not there set it to default \n    if (!params['step'])\n        params['step'] = { value: searchStep }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var userInput = params['params'];\n        var searchField = userInput['field'];\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        // checking for utils\n        if (!moment) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        // checking if the user input is present or not\n        if (!searchField || !userInput['value']) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj);\n        }\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n        var stepVal = params['step'] && params['step']['value'] ? params['step']['value'] : null;\n        let matchfieldSplit;\n        let matchFieldType;\n\n        // if the selected matching field is custom field, extract its data type from name\n        if (searchField.split('@').length > 1) {\n\n            matchfieldSplit = searchField.split('@');\n            matchFieldType = matchfieldSplit.pop();\n            searchField = matchfieldSplit.join('');\n        }\n\n        // format the query according to the coming field Type\n        if (searchField.includes(\"Date\") || searchField.includes(\"date\") || searchField === \"SystemModstamp\" || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n            if (moment(userInput['value']).isValid())\n                userInput['value'] = moment(userInput['value']).toISOString();\n            url += searchField + \"=\" + userInput['value'];\n        }\n        else\n            url += searchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n        // common request object\n        var options = {\n\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (stepVal && stepVal === searchStep) {\n\n            // searching for the given field and corresponding value\n            options['url'] = url;\n            retObj['step'] = { value: searchStep };\n\n        } else if (stepVal && stepVal === fetchObjectStep && params['step']['id']) {\n\n            // fetching complete object for the given id\n            options['url'] = `/sobjects/Lead/${params.step.id}`;\n            retObj['step'] = { value: fetchObjectStep };\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Unknown error while creating request\";\n            return callback(retObj);\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var searchStep = \"SEARCH\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n        var step = params['step'];\n        var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n        if (!libDate) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n\n            if (step && step.value && step.value === searchStep) {\n\n                body = response['body'].records ? response['body'].records : [];\n\n                if (body && body.length && body[0] && body[0]['Id'])\n                    // using step to fetch complete data for the object\n                    retObj['step'] = { value: fetchObjectStep, id: body[0]['Id'] }\n                else\n                    retObj['data'] = { parsedValues: { found: \"No\" } }\n\n            } else if (step && step.value && step.value === fetchObjectStep && body) {\n\n                let responseObject = { found: \"Yes\" };\n                Object.keys(body).forEach(field => {\n\n                    if (typeof body[field] != \"object\" && field != \"attributes\") {\n                        if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                            responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                        else\n                            responseObject[field] = body[field];\n                    }\n                }, this);\n\n                retObj['data'] = { parsedValues: responseObject }\n\n            } else {\n\n                retObj['status'] = \"ERROR\";\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Error: Unknown error while creating request\";\n                return callback(retObj);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Search by",
					"id": "field",
					"description": "Select the lead property to search",
					"inputType": "select",
					"defaultValue": "Email",
					"type": "String",
					"required": true,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Lead/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value",
					"id": "value",
					"inputType": "input",
					"description": "Enter the value of the property selected above.",
					"type": "String",
					"required": true
				}
			],
			"responseFields": [
				{
					"name": "Lead Found?",
					"id": "found",
					"description": "Yes if a Lead is found",
					"type": "String"
				},
				{
					"name": "Lead Email",
					"id": "Email",
					"type": "String"
				},
				{
					"name": "Lead Phone",
					"id": "Phone",
					"type": "String"
				},
				{
					"name": "Lead Name",
					"id": "Name",
					"type": "String"
				},
				{
					"name": "Lead City",
					"id": "City",
					"type": "String"
				},
				{
					"name": "Lead Company",
					"id": "Company",
					"type": "String"
				},
				{
					"name": "Lead State",
					"id": "State",
					"type": "String"
				},
				{
					"name": "Lead Title",
					"id": "Title",
					"type": "String"
				},
				{
					"name": "Lead Last Name",
					"id": "LastName",
					"type": "String"
				},
				{
					"name": "Lead First Name",
					"id": "FirstName",
					"type": "String"
				},
				{
					"name": "Lead Country",
					"id": "Country",
					"type": "String"
				},
				{
					"name": "Lead State/Province Code",
					"id": "StateCode",
					"type": "String"
				},
				{
					"name": "Lead Country Code",
					"id": "CountryCode",
					"type": "String"
				},
				{
					"name": "Lead Latitude",
					"id": "Latitude",
					"type": "String"
				},
				{
					"name": "Lead Longitude",
					"id": "Longitude",
					"type": "String"
				},
				{
					"name": "Lead GeocodeAccuracy",
					"id": "GeocodeAccuracy",
					"type": "String"
				},
				{
					"name": "Lead Street",
					"id": "Street",
					"type": "String"
				},
				{
					"name": "Lead Industry",
					"id": "Industry",
					"type": "String"
				},
				{
					"name": "Lead Rating",
					"id": "Rating",
					"type": "String"
				},
				{
					"name": "Lead Website",
					"id": "Website",
					"type": "String"
				},
				{
					"name": "LeadSource",
					"id": "LeadSource",
					"type": "String"
				},
				{
					"name": "Lead Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Lead Status",
					"id": "Status",
					"type": "String"
				},
				{
					"name": "Lead Postal Code",
					"id": "PostalCode",
					"type": "String"
				},
				{
					"name": "Lead Fax",
					"id": "Fax",
					"type": "String"
				},
				{
					"name": "Do Not Call",
					"id": "DoNotCall",
					"type": "String"
				},
				{
					"name": "Has Opted Out Of Fax",
					"id": "HasOptedOutOfFax",
					"type": "String"
				},
				{
					"name": "Has Opted Out Of Email",
					"id": "HasOptedOutOfEmail",
					"type": "String"
				},
				{
					"name": "Lead Mobile Phone",
					"id": "MobilePhone",
					"type": "String"
				},
				{
					"name": "Lead ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Lead Annual Revenue",
					"id": "AnnualRevenue",
					"type": "String"
				},
				{
					"name": "Lead Company D-U-N-S Number",
					"id": "CompanyDunsNumber",
					"type": "String"
				},
				{
					"name": "Lead Converted Account",
					"id": "ConvertedAccountId",
					"type": "String"
				},
				{
					"name": "Lead Converted Date",
					"id": "ConvertedDate",
					"type": "String"
				},
				{
					"name": "Lead Converted Opportunity",
					"id": "ConvertedOpportunityId",
					"type": "String"
				},
				{
					"name": "Lead Created By",
					"id": "CreatedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Lead D & B Company ID",
					"id": "DandbCompanyId",
					"type": "String"
				},
				{
					"name": "Lead Email Bounced Date",
					"id": "EmailBouncedDate",
					"type": "String"
				},
				{
					"name": "Lead Email Bounced Reason",
					"id": "EmailBouncedReason",
					"type": "String"
				},
				{
					"name": "Is Lead Unread By Owner",
					"id": "IsUnreadByOwner",
					"type": "String"
				},
				{
					"name": "Lead Jigsaw Contact",
					"id": "JigsawContactId",
					"type": "String"
				},
				{
					"name": "Lead Jigsaw",
					"id": "Jigsaw",
					"type": "String"
				},
				{
					"name": "Lead Last Activity Date",
					"id": "LastActivityDate",
					"type": "String"
				},
				{
					"name": "Lead Last Modified By Id",
					"id": "LastModifiedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Lead Last Transfer Date",
					"id": "LastTransferDate",
					"type": "String"
				},
				{
					"name": "Lead Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Lead Master Record ID",
					"id": "MasterRecordId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-lead",
					"searchLabel": "Get Lead Details"
				},
				{
					"name": "Lead Number Of Employees",
					"id": "NumberOfEmployees",
					"type": "String"
				},
				{
					"name": "Lead System Modstamp",
					"id": "SystemModstamp",
					"type": "String"
				},
				{
					"name": "Lead Clean Status",
					"id": "CleanStatus",
					"type": "String"
				},
				{
					"name": "Lead Campaign Id",
					"id": "CampaignId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-campaign",
					"searchLabel": "Get Campaign Details"
				},
				{
					"name": "Lead Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Lead Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Lead OwnerId",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Lead Salutation",
					"id": "Salutation",
					"type": "String"
				},
				{
					"name": "Lead Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Lead\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var errorMsg;\n    var response;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Lead/gmi.test(el.label) ? el.label : `Lead ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdc9f",
			"name": "Search an Opportunity",
			"id": "search-opportunity",
			"priority": 3,
			"entity": "deal",
			"description": "Search Opportunities",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var moment;\n    var searchStep = \"SEARCH\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var url = \"/query/?q=SELECT+id+FROM+Opportunity+WHERE+\";\n\n    // if the step data is not there set it to default \n    if (!params['step'])\n        params['step'] = { value: searchStep }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var userInput = params['params'];\n        var searchField = userInput['field'];\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        // checking for utils\n        if (!moment) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        // checking if the user input is present or not\n        if (!searchField || !userInput['value']) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj);\n        }\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n        var stepVal = params['step'] && params['step']['value'] ? params['step']['value'] : null;\n        let matchfieldSplit;\n        let matchFieldType;\n\n        // if the selected matching field is custom field, extract its data type from name\n        if (searchField.split('@').length > 1) {\n\n            matchfieldSplit = searchField.split('@');\n            matchFieldType = matchfieldSplit.pop();\n            searchField = matchfieldSplit.join('');\n        }\n\n        // format the query according to the coming field Type\n        if (searchField.includes(\"Date\") || searchField.includes(\"date\") || searchField === \"SystemModstamp\" || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n            if (moment(userInput['value']).isValid())\n                userInput['value'] = moment(userInput['value']).toISOString();\n            url += searchField + \"=\" + userInput['value'];\n        }\n        else\n            url += searchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n        // common request object\n        var options = {\n\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (stepVal && stepVal === searchStep) {\n\n            // searching for the given field and corresponding value\n            options['url'] = url;\n            retObj['step'] = { value: searchStep };\n\n        } else if (stepVal && stepVal === fetchObjectStep && params['step']['id']) {\n\n            // fetching complete object for the given id\n            options['url'] = `/sobjects/Opportunity/${params.step.id}`;\n            retObj['step'] = { value: fetchObjectStep };\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Unknown error while creating request\";\n            return callback(retObj);\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var searchStep = \"SEARCH\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n        var step = params['step'];\n        var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n        if (!libDate) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n\n            if (step && step.value && step.value === searchStep) {\n\n                body = response['body'].records ? response['body'].records : [];\n\n                if (body && body.length && body[0] && body[0]['Id'])\n                    // using step to fetch complete data for the object\n                    retObj['step'] = { value: fetchObjectStep, id: body[0]['Id'] }\n                else\n                    retObj['data'] = { parsedValues: { found: \"No\" } }\n\n            } else if (step && step.value && step.value === fetchObjectStep && body) {\n\n                let responseObject = { found: \"Yes\" };\n                Object.keys(body).forEach(field => {\n\n                    if (typeof body[field] != \"object\" && field != \"attributes\") {\n                        if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                            responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                        else\n                            responseObject[field] = body[field];\n                    }\n                }, this);\n\n                retObj['data'] = { parsedValues: responseObject }\n\n            } else {\n\n                retObj['status'] = \"ERROR\";\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Error: Unknown error while creating request\";\n                return callback(retObj);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Search by",
					"id": "field",
					"description": "Select the opportunity property to search",
					"inputType": "select",
					"type": "String",
					"defaultValue": "Name",
					"required": true,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Opportunity/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var body;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value",
					"id": "value",
					"inputType": "input",
					"description": "Enter the value of the property selected above.",
					"type": "String",
					"required": true
				}
			],
			"responseFields": [
				{
					"name": "Opportunity Found",
					"id": "found",
					"description": "Yes if an Opportunity is found",
					"type": "String"
				},
				{
					"name": "Opportunity Name",
					"id": "Name",
					"type": "String"
				},
				{
					"name": "Opportunity ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Opportunity Forecast Category",
					"id": "ForecastCategory",
					"type": "String"
				},
				{
					"name": "Opportunity Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Opportunity Stage Name",
					"id": "StageName",
					"type": "String"
				},
				{
					"name": "Opportunity Amount",
					"id": "Amount",
					"type": "String"
				},
				{
					"name": "Opportunity Type",
					"id": "Type",
					"type": "String"
				},
				{
					"name": "Opportunity Iq Score",
					"id": "IqScore",
					"type": "String"
				},
				{
					"name": "Opportunity Contract",
					"id": "ContractId",
					"type": "String"
				},
				{
					"name": "Opportunity Fiscal Period",
					"id": "Fiscal",
					"type": "String"
				},
				{
					"name": "Opportunity Won?",
					"id": "Won",
					"type": "String"
				},
				{
					"name": "Opportunity Account ID",
					"id": "AccountId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Account Details"
				},
				{
					"name": "Opportunity Campaign ID",
					"id": "CampaignId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-campaign",
					"searchLabel": "Get Campaign Details"
				},
				{
					"name": "Opportunity Created By ID",
					"id": "CreatedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Opportunity Expected Revenue",
					"id": "ExpectedRevenue",
					"type": "String"
				},
				{
					"name": "Opportunity Fiscal Quarter",
					"id": "FiscalQuarter",
					"type": "String"
				},
				{
					"name": "Opportunity Forecast Category Name",
					"id": "ForecastCategoryName",
					"type": "String"
				},
				{
					"name": "Opportunity Line Item?",
					"id": "HasOpportunityLineItem",
					"type": "String"
				},
				{
					"name": "Opportunity Last Activity Date",
					"id": "LastActivityDate",
					"type": "String"
				},
				{
					"name": "Opportunity Last Modified By ID",
					"id": "LastModifiedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Opportunity Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Opportunity Pricebook 2 Id",
					"id": "Pricebook2Id",
					"type": "String"
				},
				{
					"name": "Opportunity System Modstamp",
					"id": "SystemModstamp",
					"type": "String"
				},
				{
					"name": "Total Opportunity Quantity",
					"id": "TotalOpportunityQuantity",
					"type": "String"
				},
				{
					"name": "Opportunity Close Date",
					"id": "CloseDate",
					"type": "String"
				},
				{
					"name": "Opportunity Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Opportunity Fiscal Year",
					"id": "FiscalYear",
					"type": "String"
				},
				{
					"name": "Is Opportunity Closed?",
					"id": "IsClosed",
					"type": "String"
				},
				{
					"name": "Is Opportunity Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Is Opportunity Private?",
					"id": "IsPrivate",
					"type": "String"
				},
				{
					"name": "Opportunity Lead Source",
					"id": "LeadSource",
					"type": "String"
				},
				{
					"name": "Opportunity Next Step",
					"id": "NextStep",
					"type": "String"
				},
				{
					"name": "Opportunity Owner Id",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Owner User Details"
				},
				{
					"name": "Opportunity Probability",
					"id": "Probability",
					"type": "String"
				},
				{
					"name": "Opportunity Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Opportunity\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var errorMsg;\n    var response;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Opportunity/gmi.test(el.label) ? el.label : `Opportunity ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdc9e",
			"name": "Search a Task",
			"id": "search-task",
			"priority": 3,
			"entity": "activity",
			"description": "Search Tasks",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {};\n    var moment;\n    var searchStep = \"SEARCH\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var url = \"/query/?q=SELECT+id+FROM+Task+WHERE+\";\n\n    // if the step data is not there set it to default \n    if (!params['step'])\n        params['step'] = { value: searchStep }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var userInput = params['params'];\n        var searchField = userInput['field'];\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        // checking for utils\n        if (!moment) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        // checking if the user input is present or not\n        if (!searchField || !userInput['value']) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj);\n        }\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n        var stepVal = params['step'] && params['step']['value'] ? params['step']['value'] : null;\n        let matchfieldSplit;\n        let matchFieldType;\n\n        // if the selected matching field is custom field, extract its data type from name\n        if (searchField.split('@').length > 1) {\n\n            matchfieldSplit = searchField.split('@');\n            matchFieldType = matchfieldSplit.pop();\n            searchField = matchfieldSplit.join('');\n        }\n\n        // format the query according to the coming field Type\n        if (searchField.includes(\"Date\") || searchField.includes(\"date\") || searchField === \"SystemModstamp\" || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n            if (moment(userInput['value']).isValid())\n                userInput['value'] = moment(userInput['value']).toISOString();\n            url += searchField + \"=\" + userInput['value'];\n        }\n        else\n            url += searchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\";\n\n        // common request object\n        var options = {\n\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (stepVal && stepVal === searchStep) {\n\n            // searching for the given field and corresponding value\n            options['url'] = url;\n            retObj['step'] = { value: searchStep };\n\n        } else if (stepVal && stepVal === fetchObjectStep && params['step']['id']) {\n\n            // fetching complete object for the given id\n            options['url'] = `/sobjects/Task/${params.step.id}`;\n            retObj['step'] = { value: fetchObjectStep };\n\n        } else {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Unknown error while creating request\";\n            return callback(retObj);\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var searchStep = \"SEARCH\";\n    var fetchObjectStep = \"FETCH_COMPLETE_OBJECT\";\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n        var step = params['step'];\n        var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n        if (!libDate) {\n\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n\n            if (step && step.value && step.value === searchStep) {\n\n                body = response['body'].records ? response['body'].records : [];\n\n                if (body && body.length && body[0] && body[0]['Id'])\n                    // using step to fetch complete data for the object\n                    retObj['step'] = { value: fetchObjectStep, id: body[0]['Id'] }\n                else\n                    retObj['data'] = { parsedValues: { found: \"No\" } }\n\n            } else if (step && step.value && step.value === fetchObjectStep && body) {\n\n                let responseObject = { found: \"Yes\" };\n                Object.keys(body).forEach(field => {\n\n                    if (typeof body[field] != \"object\" && field != \"attributes\") {\n                        if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                            responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                        else\n                            responseObject[field] = body[field];\n                    }\n                }, this);\n\n                retObj['data'] = { parsedValues: responseObject }\n\n            } else {\n\n                retObj['status'] = \"ERROR\";\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Error: Unknown error while creating request\";\n                return callback(retObj);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                   // Hide actual query from user if malformed query\n                   if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [],
					"name": "Search by",
					"id": "field",
					"description": "Select the task property to search",
					"inputType": "select",
					"type": "String",
					"defaultValue": "Subject",
					"required": true,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Task/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var body;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.filterable) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.custom && el.custom === true && el.type ? el.name + '@' + el.type : el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				},
				{
					"fixedValueSource": [],
					"name": "Value",
					"id": "value",
					"inputType": "input",
					"description": "Enter the value of the property selected above.",
					"type": "String",
					"required": true
				}
			],
			"responseFields": [
				{
					"name": "Task Found",
					"id": "found",
					"description": "Yes if a Task is found",
					"type": "String"
				},
				{
					"name": "Task Id",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Task Subject",
					"id": "Subject",
					"type": "String"
				},
				{
					"name": "Task Account Id",
					"id": "AccountId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-task",
					"searchLabel": "Get Task Details"
				},
				{
					"name": "Task Due Date",
					"id": "ActivityDate",
					"type": "String"
				},
				{
					"name": "Task Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Task Created By Id",
					"id": "CreatedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Task Status",
					"id": "Status",
					"type": "String"
				},
				{
					"name": "Task Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Task Name Id",
					"id": "WhoId",
					"type": "String"
				},
				{
					"name": "Task Priority",
					"id": "Priority",
					"type": "String"
				},
				{
					"name": "Task Call Result",
					"id": "CallDisposition",
					"type": "String"
				},
				{
					"name": "Task Last Modified By ID",
					"id": "LastModifiedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Task Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Task Related To Id",
					"id": "WhatId",
					"type": "String"
				},
				{
					"name": "Task Call Duration",
					"id": "CallDurationInSeconds",
					"type": "String"
				},
				{
					"name": "Task Reminder Date/Time",
					"id": "ReminderDateTime",
					"type": "String"
				},
				{
					"name": "Is Task Reminder Set?",
					"id": "IsReminderSet",
					"type": "String"
				},
				{
					"name": "Task Recurrence Activity",
					"id": "RecurrenceActivityId",
					"type": "String"
				},
				{
					"name": "Task Recurrence Day Of Month",
					"id": "RecurrenceDayOfMonth",
					"type": "String"
				},
				{
					"name": "Task Recurrence Day Of Week Mask",
					"id": "RecurrenceDayOfWeekMask",
					"type": "String"
				},
				{
					"name": "Task Recurrence End Date Only",
					"id": "RecurrenceEndDateOnly",
					"type": "String"
				},
				{
					"name": "Task Recurrence Instance",
					"id": "RecurrenceInstance",
					"type": "String"
				},
				{
					"name": "Task Recurrence Interval",
					"id": "RecurrenceInterval",
					"type": "String"
				},
				{
					"name": "Task Recurrence Month of Year",
					"id": "RecurrenceMonthOfYear",
					"type": "String"
				},
				{
					"name": "Task Recurrence Start Date Only",
					"id": "RecurrenceStartDateOnly",
					"type": "String"
				},
				{
					"name": "Task Recurrence Time Zone",
					"id": "RecurrenceTimeZoneSidKey",
					"type": "String"
				},
				{
					"name": "Task Recurrence Type",
					"id": "RecurrenceType",
					"type": "String"
				},
				{
					"name": "Task Recurrence Regenerated Type",
					"id": "RecurrenceRegeneratedType",
					"type": "String"
				},
				{
					"name": "Task System Modstamp",
					"id": "SystemModstamp",
					"type": "String"
				},
				{
					"name": "Task Call Object",
					"id": "CallObject",
					"type": "String"
				},
				{
					"name": "Task Call Type",
					"id": "CallType",
					"type": "String"
				},
				{
					"name": "Task Type",
					"id": "Type",
					"type": "String"
				},
				{
					"name": "Task Subtype",
					"id": "TaskSubtype",
					"type": "String"
				},
				{
					"name": "Task Phone",
					"id": "Phone",
					"type": "String"
				},
				{
					"name": "Task Email",
					"id": "Email",
					"type": "String"
				},
				{
					"name": "Is Recurrence Task?",
					"id": "IsRecurrence",
					"type": "String"
				},
				{
					"name": "Is Task Archived",
					"id": "IsArchived",
					"type": "String"
				},
				{
					"name": "Is Task Closed?",
					"id": "IsClosed",
					"type": "String"
				},
				{
					"name": "Is Task Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Task Owner ID",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Owner User Details"
				},
				{
					"name": "Task Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Task\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Task/gmi.test(el.label) ? el.label : `Task ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"dynamicInputFieldsDependsOn": [],
			"dynamicResponseFieldsDependsOn": [],
			"_id": "5fa91f464c9b80aa636fdc9d",
			"name": "Search a User",
			"id": "search-user",
			"priority": 3,
			"entity": "person",
			"description": "Search Users",
			"important": true,
			"actionRequest": "function actionRequest(params, utils, callback) {\n\n    var retObj = {}\n    var moment\n    const searchStep = \"SEARCH_USER\"\n    const fetchObjectStep = \"FETCH_COMPLETE_OBJECT\"\n    var url = \"/query/?q=SELECT+id+FROM+User+WHERE+\"\n\n    // if the step data is not there set it to default \n    if (!params['step'])\n        params['step'] = { value: searchStep }\n\n    if (!params || !params['appinfo'] || !params['userapp'] || !params['params'] || !utils['moment']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        let userInput = params['params']\n        let searchField = userInput['field']\n        let fetchedParams = params['userapp'].fetchAuthParams(params['appinfo'])\n        moment =  utils['moment']\n\n        // checking if the user input is present or not\n        if (!searchField || !userInput['value']) {\n\n            retObj['status'] = \"ERROR\"\n            retObj['error'] = {}\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n            retObj['error']['message'] = \"Missing input for 'Value' to search for.\"\n            return callback(retObj)\n        }\n\n        var loginInstanceUrl = fetchedParams['instance_url']\n        var REST_ENDPOINT = \"/services/data\"\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n        var stepVal = params['step'] && params['step']['value'] ? params['step']['value'] : null\n        let matchfieldSplit\n        let matchFieldType\n\n        // if the selected matching field is custom field, extract its data type from name\n        if (searchField.split('@').length > 1) {\n\n            matchfieldSplit = searchField.split('@')\n            matchFieldType = matchfieldSplit.pop()\n            searchField = matchfieldSplit.join('')\n        }\n\n        // format the query according to the coming field Type\n        if (searchField.includes(\"Date\") || searchField.includes(\"date\") || searchField === \"SystemModstamp\" || (matchFieldType && (matchFieldType === \"date\" || matchFieldType === \"datetime\"))) {\n\n            if (moment(userInput['value']).isValid())\n                userInput['value'] = moment(userInput['value']).toISOString()\n            url += searchField + \"=\" + userInput['value']\n        }\n        else\n            url += searchField + \"='\" + encodeURIComponent(userInput['value'].replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'')) + \"'\"\n\n        // common request object\n        var options = {\n\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        if (stepVal && stepVal === searchStep) {\n\n            // searching for the given field and corresponding value\n            options['url'] = url\n            retObj['step'] = { value: searchStep }\n\n        } else if (stepVal && stepVal === fetchObjectStep && params['step']['id']) {\n\n            // fetching complete object for the given id\n            options['url'] = `/sobjects/User/${params.step.id}`\n            retObj['step'] = { value: fetchObjectStep }\n\n        } else {\n\n            retObj['status'] = \"ERROR\"\n            retObj['error'] = {}\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n            retObj['error']['message'] = \"Error: Unknown error while creating request\"\n            return callback(retObj)\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\"\n        retObj['data'] = {\n            options: options\n        }\n    }\n\n    callback(retObj)\n\n}",
			"actionParse": "function actionParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" }\n    var errorMsg\n    const searchStep = \"SEARCH_USER\"\n    const fetchObjectStep = \"FETCH_COMPLETE_OBJECT\"\n\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let response = params['response'];\n        let body = response['body'];\n        let step = params['step'];\n        let libDate = utils['libDate'] ? utils['libDate'] : null;\n\n        if (!libDate) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n\n            if (step && step.value && step.value === searchStep) {\n\n                body = response['body'].records ? response['body'].records : [];\n\n                if (body && body.length && body[0] && body[0]['Id'])\n                    // using step to fetch complete data for the object\n                    retObj['step'] = { value: fetchObjectStep, id: body[0]['Id'] }\n                else\n                    retObj['data'] = { parsedValues: { found: \"No\" } }\n\n            } else if (step && step.value && step.value === fetchObjectStep && body) {\n\n                let responseObject = { found: \"Yes\" };\n\n                Object.keys(body).forEach(field => {\n                    if (typeof body[field] != \"object\" && field != \"attributes\") {\n                        if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                            responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                        else\n                            responseObject[field] = body[field];\n                    }\n                }, this);\n\n                retObj['data'] = { parsedValues: responseObject }\n\n            } else {\n\n                retObj['status'] = \"ERROR\";\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n                retObj['error']['message'] = \"Error: Unknown error while creating request\";\n                return callback(retObj);\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly check the search criterion.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
			"params": [
				{
					"fixedValueSource": [
						{
							"id": "Id",
							"name": "ID"
						},
						{
							"id": "Username",
							"name": "Username"
						},
						{
							"id": "Email",
							"name": "Email"
						}
					],
					"name": "Search by",
					"id": "field",
					"description": "Select the User property to search",
					"inputType": "select",
					"type": "String",
					"defaultValue": "Email",
					"required": true
				},
				{
					"fixedValueSource": [],
					"name": "Value",
					"id": "value",
					"description": "Enter the value of the property selected above.",
					"inputType": "input",
					"type": "String",
					"required": true
				}
			],
			"responseFields": [
				{
					"name": "User Found",
					"id": "found",
					"description": "Yes if a User is found",
					"type": "String"
				},
				{
					"name": "User Id",
					"id": "Id",
					"description": "User Id",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"User\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0';\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n               \n                if (el.name !== 'Id') {\n\n                    retObj['data'].push({\n                        \"name\": /^User/gmi.test(el.label) ? el.label : `User ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		}
	],
	"appId": "salesforce",
	"app_url": "http://www.salesforce.com/",
	"auth": {
		"type": "OAuth2",
		"authParams": {
			"clientID": "3MVG91ftikjGaMd8N5dTfkjxhxMAE17N7RTMlUTv1kf4i2Dm0eWuWfdTnIvLko5_CnmpPmSi6sURr_OiCWdv0",
			"clientSecret": "8111760723605294920",
			"site": "https://login.salesforce.com",
			"sandboxSite": "https://test.salesforce.com",
			"tokenPath": "/services/oauth2/token",
			"authorizationPath": "/services/oauth2/authorize",
			"redirect_uri": "https://api-dev.automate.io/auth/salesforce/callback",
			"loadMoreLimit": 10,
			"apiVersion": "/v43.0"
		},
		"authStrategy": "function authStrategy(hashedParams, hashedUtils, callback) {\n\n  var retObj = {};\n  var appInfo = hashedParams.appInfo;\n\n  // Input Params Valdation\n  if (!appInfo || !appInfo.auth || !appInfo.auth.authParams || !appInfo.auth.authParams.salesforceEnv) {\n    retObj['status'] = \"ERROR\";\n    retObj['error'] = {};\n    retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n    retObj['error']['message'] = \"Error: Missing required Environment parameter.\";\n    return callback(retObj)\n  }\n\n  let environment = appInfo.auth.authParams.salesforceEnv\n  let site = environment && (environment === \"sandbox\") ? appInfo.auth.authParams.sandboxSite : appInfo.auth.authParams.site\n\n  var oauth2 = hashedUtils.oauth2({\n    clientID: appInfo.auth.authParams.clientID,\n    clientSecret: appInfo.auth.authParams.clientSecret,\n    scope: ['full', 'refresh_token'],\n    prompt: ['login', 'consent'],\n    grant_type: \"authorization_code\",\n    site: site,\n    tokenPath: appInfo.auth.authParams.tokenPath,\n    authorizationPath: appInfo.auth.authParams.authorizationPath\n  });\n\n  if (!(hashedUtils || {}).oauth2) {\n    retObj.status = 'ERROR';\n    retObj.error = { message: 'doesNot have simple-oauth2 object while requesting in authCallback function' };\n    callback(retObj);\n    return;\n  }\n  //var oauth2 = hashedUtils.oauth2;\n  var authorization_uri = oauth2.authCode.authorizeURL({\n    redirect_uri: appInfo.auth.authParams.redirect_uri,\n    'access_type': 'offline',\n    prompt: \"login,consent\",\n    state: environment && (environment === \"sandbox\") ? \"sandbox\" : \"production\"\n  });\n  retObj.status = 'SUCCESS';\n  retObj.data = { authorization_uri: authorization_uri };\n  callback(retObj);\n}\n",
		"authCallBack": "function authCallBack(hashedParams, hashedUtils, callback) {\n    var retObj = {}\n    var params = []\n\n    if (!((hashedParams || {})).queryObj) {\n        retObj.status = 'ERROR'\n        retObj.error = { message: 'There was an error while connecting to Salesforce. Please try reconnecting the app to fix this issue. If the issue persists, you can reach out to Salesforce support' }\n        callback(retObj)\n        return\n    }\n    var queryObj = hashedParams.queryObj\n    if (!(hashedUtils || {}).oauth2) {\n        retObj.status = 'ERROR'\n        retObj.error = { message: 'There was an error while connecting with Salesforce. Please get in touch with us and we\\'ll help you set it up' }\n        return callback(retObj)\n    }\n\n    if (!hashedParams.queryObj.code) {\n        retObj.status = 'ERROR'\n        retObj.error = { message: 'There was an error while connecting to Salesforce. Please try reconnecting the app to fix this issue. If the issue persists, you can reach out to Salesforce support' }\n        return callback(retObj)\n    }\n\n    var appInfo = hashedParams.appInfo\n    let environment = hashedParams.queryObj.state ? hashedParams.queryObj.state : 'production'\n    let site = environment && (environment === 'sandbox') ? appInfo.auth.authParams.sandboxSite : appInfo.auth.authParams.site\n\n    var oauth2 = hashedUtils.oauth2({\n        clientID: appInfo.auth.authParams.clientID,\n        clientSecret: appInfo.auth.authParams.clientSecret,\n        site: site,\n        tokenPath: appInfo.auth.authParams.tokenPath,\n        authorizationPath: appInfo.auth.authParams.authorizationPath\n    })\n\n    var code = queryObj.code\n    oauth2.authCode.getToken({\n        code: code,\n        redirect_uri: appInfo.auth.authParams.redirect_uri\n    }, saveToken)\n\n    function saveToken(ERROR, result) {\n        if (ERROR) {\n            retObj.status = 'ERROR'\n            retObj.error = { message: 'Access Token ERROR' + ERROR }\n            return callback(retObj)\n        } else {\n            if (result && result['access_token'] && result['refresh_token'] && result['instance_url'] && result['id']) {\n\n                // extract orgId from identityUrl\n                let identityUrl = result['id']\n                let identityUrlParts = identityUrl && identityUrl.split('/') ? identityUrl.split('/') : []\n                let orgID = identityUrlParts.length > 2 && identityUrlParts[identityUrlParts.length - 2] ? identityUrlParts[identityUrlParts.length - 2] : null\n                \n                params.push({ 'id': 'access_token', value: result['access_token'] })\n                params.push({ 'id': 'instance_url', value: result['instance_url'] })\n                params.push({ 'id': 'refresh_token', value: result['refresh_token'] })\n                params.push({ 'id': 'environment', value: environment })\n                params.push({ 'id': 'identity_url', value: result['id'] })\n                params.push({ 'id': 'orgId', value: orgID })\n                retObj.status = 'SUCCESS'\n                retObj.data = { oauth2Info: result, params: params }\n                return callback(retObj)\n            } else {\n                retObj.status = 'ERROR'\n                retObj.error = { message: 'Cannot retrieve all the required tokens' }\n                return callback(retObj)\n            }\n        }\n    }\n}\n",
		"authRefreshRequest": "function authRefreshRequest(hashedParams, hashedUtils, callback) {\n    var retObj = {}\n    if (!(hashedParams || {}).userapp || !(hashedParams || {}).appinfo) {\n        retObj.status = 'ERROR'\n        retObj.error = {message: 'Userapp or appinfo is missing while requesting in dynamicValueSourceRequest'}\n        callback(retObj)\n        return\n    }\n    if (!(hashedUtils || {})._) {\n        retObj.status = 'ERROR'\n        retObj.error = {message: 'hashedUtils doesnot contain underscore module'}\n        callback(retObj)\n        return\n    }\n    var _ = hashedUtils._\n    var fetchedParams = hashedParams.userapp.fetchAuthParams(hashedParams.appinfo)\n    if ((!fetchedParams || {}).access_token) {\n        retObj.status = 'ERROR'\n        retObj.error = {message: 'cannot fetch access_token from fetchAuthParams'}\n        callback(retObj)\n        return\n    }\n    if (!((((hashedParams || {}).appinfo || {}).auth || {}).authParams || {}).clientID) {\n        retObj.status = 'ERROR'\n        retObj.error = {message: 'appInfo is missing clientId'}\n        callback(retObj)\n        return\n    }\n    if (!((((hashedParams || {}).appinfo || {}).auth || {}).authParams || {}).clientSecret) {\n        retObj.status = 'ERROR'\n        retObj.error = {message: 'appInfo is missing clientSecret'}\n        callback(retObj)\n        return\n    }\n    if (!((((hashedParams || {}).appinfo || {}).auth || {}).authParams || {}).sandboxSite) {\n        retObj.status = 'ERROR'\n        retObj.error = {message: 'appInfo is missing sandboxsite'}\n        callback(retObj)\n        return\n    }\n    var refresh_token = _.findWhere(hashedParams.userapp.params, {id: 'refresh_token'})\n    var environment = _.findWhere(hashedParams.userapp.params, {id: 'environment'})\n    if (!refresh_token || !refresh_token.value) {\n        retObj.status = 'ERROR'\n        retObj.error = {message: 'refresh token is missing in userApp'}\n        callback(retObj)\n        return\n    }\n\n    const url = environment && (environment.value === 'sandbox') ? hashedParams.appinfo.auth.authParams.sandboxSite : hashedParams.appinfo.auth.authParams.site\n    var options = {\n        url: `${url}/services/oauth2/token`,\n        method: 'POST',\n        form: {\n            client_id: hashedParams.appinfo.auth.authParams['clientID'],\n            client_secret: hashedParams.appinfo.auth.authParams['clientSecret'],\n            refresh_token: refresh_token.value,\n            grant_type: 'refresh_token'\n        }\n    }\n    retObj.status = 'SUCCESS'\n    retObj.data = {options: options}\n    callback(retObj)\n}\n",
		"authRefreshParse": "function authRefreshParse(hashedParams, hashedUtils, callback) {\n  var retObj = {};\n  if(!(hashedParams || {}).response || !(hashedParams || {}).body){\n    retObj.status = \"ERROR\";\n    retObj.message = \"response or body to parse is missing while requesting in dynamicValueSourceParse\";\n    callback(retObj);\n    return;\n  }\n  if ((hashedParams.response.statusCode || {}) == 200) {\n    hashedParams.body= JSON.parse(hashedParams.body);\n    if(!hashedParams.body || !hashedParams.body.access_token){\n      retObj.status = \"ERROR\";\n      retObj.message = \"Failed to refresh the access_token\";\n      callback(retObj);\n      return;\n    }else{\n      retObj.status = \"SUCCESS\";\n      retObj.access_token = hashedParams.body.access_token;\n      retObj.message = \"successfully refreshed access_token\";\n      callback(retObj);\n      return;\n    }\n  } else {\n    retObj.status = \"ERROR\";\n    retObj.message = \"error while refreshing the token\";\n    callback(retObj);\n    return;\n  }\n}",
		"authDeleteRequest": "function authDeleteRequest(hashedParams, hashedUtils, callback) {\n    var retObj = {}\n    var sandboxsite\n\n    if (!(hashedParams || {}).userApp || !(hashedParams || {}).appInfo) {\n        retObj.status = 'ERROR'\n        retObj.error = { message: 'Userapp or appinfo is missing' }\n        callback(retObj)\n        return\n    }\n    // extract sandboxsite if value exists\n    if (((((hashedParams || {}).appInfo || {}).auth || {}).authParams || {}).sandboxSite) {\n        sandboxsite = hashedParams.appInfo.auth.authParams.sandboxSite\n    }\n\n    var fetchedParams = hashedParams.userApp.fetchAuthParams(hashedParams.appInfo)\n\n    if ((!fetchedParams || {}).refresh_token || !(fetchedParams || {}).environment) {\n        retObj.status = 'ERROR'\n        retObj.error = { message: 'cannot fetch refresh_token from fetchAuthParams' }\n        callback(retObj)\n        return\n    }\n\n    const baseUrl = fetchedParams.environment === 'sandbox' ? sandboxsite : 'https://login.salesforce.com'\n\n    var options = {\n        method: 'GET',\n        url: `${baseUrl}/services/oauth2/revoke?token=${fetchedParams.refresh_token}`,\n        json: true\n    }\n\n    retObj.status = 'SUCCESS'\n    retObj.data = { options: options }\n    callback(retObj)\n}\nmodule.exports = authDeleteRequest\n",
		"authDeleteParse": "function authDeleteParse(hashedParams, hashedUtils, callback) {\n    var retObj = {}\n\n    if (hashedParams.response && hashedParams.response.statusCode === 400) {\n        let errorMsg\n        if (hashedParams.response) {\n            let result = hashedParams.response.body\n            let errorArray = result && result.split('error_description=') ? result.split('error_description=') : null\n            errorMsg = errorArray && errorArray.length > 1 ? errorArray.pop() : ''\n        }\n        retObj.status = 'ERROR'\n        retObj.errorCode = 'ERROR_UNKNOWN'\n        retObj.message = errorMsg || 'Error while revoking the token'\n        callback(retObj)\n    } else {\n        retObj.status = 'SUCCESS'\n        return callback(retObj)\n    }\n}\nmodule.exports = authDeleteParse\n",
		"authObjectRequest": "function authObjectRequest(params, utils, callback) {\n    let retObj = {}\n    const REST_ENDPOINT = '/services/data'\n    const API_VERSION = '/v39.0'\n\n    let authData = params['authCallbackData']\n    let accessToken =\n      authData.params && authData.params.find(p => p.id === 'access_token')\n        ? authData.params.find(p => p.id === 'access_token')\n        : null\n    let instanceUrl =\n      authData.params && authData.params.find(p => p.id === 'instance_url')\n        ? authData.params.find(p => p.id === 'instance_url')\n        : null\n    let orgId =\n      authData.params && authData.params.find(p => p.id === 'orgId')\n        ? authData.params.find(p => p.id === 'orgId')\n        : null\n\n    accessToken = accessToken && accessToken.value ? accessToken.value : null\n    instanceUrl = instanceUrl && instanceUrl.value ? instanceUrl.value : null\n    orgId = orgId && orgId.value ? orgId.value : null\n\n    if (!authData || !accessToken || !instanceUrl || !orgId) {\n        retObj['status'] = 'ERROR'\n        retObj['error'] = {}\n        retObj['error']['code'] = 'ERROR_MISSING_PARAM'\n        retObj['error']['message'] = 'Error: Missing auth data'\n    } else {\n        let url = `${instanceUrl}${REST_ENDPOINT}${API_VERSION}/sobjects/Organization/${orgId}?fields=Name,Id,Address,PrimaryContact,OrganizationType`\n        console.log(JSON.stringify(url))\n        // Request the metaData endpoint to get dc\n        const options = {\n            url,\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + accessToken\n            },\n            json: true\n        }\n\n        retObj['status'] = 'SUCCESS'\n        retObj['data'] = { options }\n    }\n    return callback(retObj)\n}\n\nmodule.exports = authObjectRequest\n",
		"authObjectParse": "function authObjectParse(params, utils, callback) {\n    let retObj = {}\n    let response = params['response']\n    let authData = params['authCallbackData']\n    let oauthParams = []\n    let body\n\n    // Validate User params\n    if (!response || !response.body) {\n        retObj['status'] = 'ERROR'\n        retObj['error'] = {}\n        retObj['error']['code'] = 'ERROR_MISSING_PARAM'\n        retObj['error']['message'] = 'Error: Missing body.'\n    } else {\n        body = response.body\n        if (body && body.Id) {\n            const identifierObj = { 'id': 'identifier', 'value': body.Name }\n            const address = {'id': 'address', 'value': JSON.stringify(body.Address)}\n            const OrganizationType = {'id': 'OrganizationType', 'value': body.OrganizationType}\n            const primaryContact = {'id': 'primary_contact_name', 'value': body.PrimaryContact}\n            oauthParams = [...authData.params, identifierObj, address, primaryContact, OrganizationType]\n            retObj.status = 'SUCCESS'\n            retObj.data = { oauth2Info: authData.oauth2Info, params: oauthParams }\n        } else {\n            oauthParams = [...authData.params]\n            retObj.status = 'SUCCESS'\n            retObj.data = { oauth2Info: authData.oauth2Info, params: oauthParams }\n        }\n    }\n\n    return callback(retObj)\n}\nmodule.exports = authObjectParse\n",
		"params": [
			{
				"fixedValueSource": [
					{
						"name": "Production",
						"id": "production"
					},
					{
						"name": "Sandbox",
						"id": "sandbox"
					}
				],
				"inputType": "select",
				"name": "Environment",
				"id": "salesforceEnv",
				"type": "String",
				"defaultValue": "production",
				"description": "Use ‘Sandbox’ if you wish to Test your Bots in your Sandbox account instead of production account.",
				"required": true,
				"input": true,
				"persist": true
			}
		],
		"response": [
			{
				"id": "access_token"
			},
			{
				"id": "instance_url"
			},
			{
				"id": "refresh_token"
			},
			{
				"id": "environment"
			},
			{
				"id": "identity_url"
			},
			{
				"id": "identifier"
			},
			{
				"id": "orgId"
			},
			{
				"id": "address"
			},
			{
				"id": "primary_contact_name"
			},
			{
				"id": "OrganizationType"
			}
		]
	},
	"beta": false,
	"category": "crm",
	"description": "Salesforce is a leading cloud sales platform with diverse CRM functionality on multiple devices and robust app marketplace.",
	"draft": false,
	"logo": "assets/images/logos/salesforce.png",
	"name": "Salesforce",
	"premium": true,
	"priority": 1,
	"slug": "salesforce",
	"triggers": [
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "New Account",
			"id": "new-account",
			"priority": 2,
			"entity": "company",
			"description": "Triggers when there is a new Account",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity = \"Account\"\n    var resources = \"Id, CreatedDate\"\n    var orderBy = \"CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var workflow = params['workflow']\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate\n        lastPolledDate = new Date(lastPolledDate).toISOString();\n        \n        var fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+CreatedDate+>+${lastPolledDate}+ORDER+BY+CreatedDate+ASC+LIMIT+${LIMIT}`,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n    var moment;\n\n    if (!params || !params['response'] || !params['body'] || !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj)\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Account\";\n    var resources = \"CreatedDate\";\n    var orderBy = \"CreatedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/query/?q=SELECT+'+resources+'+FROM+'+entity+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20',\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var formattedDate;\n    var lastDate;\n    var response;\n    var errorMsg;\n    var moment;\n    var body;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].CreatedDate ? moment(body.records[0].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.Id)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/Account/${p.Id}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n        \n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field];\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [],
			"responseFields": [
				{
					"name": "Account Name",
					"id": "Name",
					"type": "String"
				},
				{
					"name": "Account ID",
					"id": "Id",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Account Details"
				},
				{
					"name": "Account Phone",
					"id": "Phone",
					"type": "String"
				},
				{
					"name": "Account Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Account Source",
					"id": "AccountSource",
					"type": "String"
				},
				{
					"name": "Account Fax",
					"id": "Fax",
					"type": "String"
				},
				{
					"name": "Account Rating",
					"id": "Rating",
					"type": "String"
				},
				{
					"name": "Account SIC",
					"id": "Sic",
					"type": "String"
				},
				{
					"name": "Account Type",
					"id": "Type",
					"type": "String"
				},
				{
					"name": "Account Number",
					"id": "AccountNumber",
					"type": "String"
				},
				{
					"name": "Account Annual Revnue",
					"id": "AnnualRevenue",
					"type": "String"
				},
				{
					"name": "Account Billing Country",
					"id": "BillingCountry",
					"type": "String"
				},
				{
					"name": "Account Billing ZIP/Postal Code",
					"id": "BillingPostal",
					"type": "String"
				},
				{
					"name": "Account Billing Street",
					"id": "BillingStreet",
					"type": "String"
				},
				{
					"name": "Account Billing State Code",
					"id": "BillingStateCode",
					"type": "String"
				},
				{
					"name": "Account Billing Country Code",
					"id": "BillingCountryCode",
					"type": "String"
				},
				{
					"name": "Account Created By Id",
					"id": "CreatedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Account D and B Company",
					"id": "DandbCompanyId",
					"type": "String"
				},
				{
					"name": "Account Jigsaw Company",
					"id": "JigsawCompanyId",
					"type": "String"
				},
				{
					"name": "Account Data.com Key",
					"id": "Jigsaw",
					"type": "String"
				},
				{
					"name": "Account Last Activity Date",
					"id": "LastActivityDate",
					"type": "String"
				},
				{
					"name": "Account Last Modified By Id",
					"id": "LastModifiedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Account Last Modify Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Account Master Record Id",
					"id": "MasterRecordId",
					"type": "String",
					"searchID": "value",
					"description": "If this object was deleted as the result of a merge, this field contains the ID of the record that was kept. If this object was deleted for any other reason, or has not been deleted, the value is null.",
					"searchAction": "search-account",
					"searchLabel": "Get Account Details"
				},
				{
					"name": "Account Employees",
					"id": "NumberOfEmployees",
					"type": "String"
				},
				{
					"name": "Account Shipping Country",
					"id": "ShippingCountry",
					"type": "String"
				},
				{
					"name": "Account Shipping ZIP/Postal Code",
					"id": "ShippingPostalCode",
					"type": "String"
				},
				{
					"name": "Account Shipping State",
					"id": "ShippingState",
					"type": "String"
				},
				{
					"name": "Account Shipping Street",
					"id": "ShippingStreet",
					"type": "String"
				},
				{
					"name": "Account Shipping State Code",
					"id": "ShippingStateCode",
					"type": "String"
				},
				{
					"name": "Account Shipping Country Code",
					"id": "ShippingCountryCode",
					"type": "String"
				},
				{
					"name": "Account System Modstamp",
					"id": "SystemModstamp",
					"type": "String"
				},
				{
					"name": "Account Account URL",
					"id": "Site",
					"type": "String"
				},
				{
					"name": "AccountBilling City",
					"id": "BillingCity",
					"type": "String"
				},
				{
					"name": "Account Billing State",
					"id": "BillingState",
					"type": "String"
				},
				{
					"name": "Account Clean Status",
					"id": "CleanStatus",
					"type": "String"
				},
				{
					"name": "Account D-U-N-S Number",
					"id": "DunsNumber",
					"type": "String"
				},
				{
					"name": "Account Industry",
					"id": "Industry",
					"type": "String"
				},
				{
					"name": "Is Account Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Account NAICS Code",
					"id": "NaicsCode",
					"type": "String"
				},
				{
					"name": "Account NAICS Description",
					"id": "NaicsDesc",
					"type": "String"
				},
				{
					"name": "Account Account Owner Id",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Account Account Ownership",
					"id": "Ownership",
					"type": "String"
				},
				{
					"name": "Account Parent Id",
					"id": "ParentId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Parent Account Details"
				},
				{
					"name": "Account Shipping City",
					"id": "ShippingCity",
					"type": "String"
				},
				{
					"name": "Account SIC Description",
					"id": "SicDesc",
					"type": "String"
				},
				{
					"name": "Account Ticker Symbol",
					"id": "TickerSymbol",
					"type": "String"
				},
				{
					"name": "Account Tradestyle",
					"id": "Tradestyle",
					"type": "String"
				},
				{
					"name": "Account Website",
					"id": "Website",
					"type": "String"
				},
				{
					"name": "Account Year Started",
					"id": "YearStarted",
					"type": "String"
				},
				{
					"name": "Account Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Account\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Account/gmi.test(el.label) ? el.label : `Account ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "New Case",
			"id": "new-case",
			"priority": 3,
			"entity": "ticket",
			"description": "Triggers when there is a new Case",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity = \"Case\"\n    var resources = \"Id, CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        var workflow = params['workflow']\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate\n        lastPolledDate = new Date(lastPolledDate).toISOString()\n\n        var fetchedParams = params['userapp'].fetchAuthParams(params['appinfo'])\n        var loginInstanceUrl = fetchedParams['instance_url']\n        var REST_ENDPOINT = \"/services/data\"\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+CreatedDate+>+${lastPolledDate}+ORDER+BY+CreatedDate+ASC+LIMIT+${LIMIT}`,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] ||\n        !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n            console.log(JSON.stringify(body))\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Case\";\n    var resources = \"CreatedDate\";\n    var orderBy = \"CreatedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/query/?q=SELECT+'+resources+'+FROM+'+entity+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20',\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var lastDate;\n    var response;\n    var errorMsg;\n    var body;\n    var formattedDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['message'] = \"Missing response or body to process\"\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].CreatedDate ? moment(body.records[0].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n            \n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.Id)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/Case/${p.Id}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field] ? body[field] : \"\";\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [],
			"responseFields": [],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Case\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                let responseField = {\n                    \"name\": /^Case/gmi.test(el.label) ? el.label : `Case ${el.label}`,\n                    \"id\": el.name,\n                    \"type\": \"string\",\n                    \"defaultValue\": el.defaultValue || undefined,\n                    \"description\": el.inlineHelpText || undefined\n                }\n\n                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0] && el.name !== 'Id') {\n\n                    // lookup / reference fields\n                    switch (el.referenceTo[0]) {\n                        case \"Contact\":\n                            responseField['searchAction'] = \"search-contact\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= `Get Contact Details`;\n                            break;\n                        case \"Account\":\n                            responseField['searchAction'] = \"search-account\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Account Details\";\n                            break;\n                        case \"Lead\":\n                            responseField['searchAction'] = \"search-lead\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Lead Details\";\n                            break;\n                        case \"Opportunity\":\n                            responseField['searchAction'] = \"search-opportunity\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Opportunity Details\";\n                            break;\n                        case \"Task\":\n                            responseField['searchAction'] = \"search-task\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Task Details\";\n                            break;\n                        case \"Case\":\n                            responseField['searchAction'] = \"search-case\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Case Details\";\n                            break;\n                        case \"Event\":\n                            responseField['searchAction'] = \"search-event\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Event Details\";\n                            break;\n                        case \"User\":\n                            responseField['searchAction'] = \"search-user\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get User Details\";\n                            break;\n                        case \"Campaign\":\n                            responseField['searchAction'] = \"search-campaign\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Campaign Details\";\n                    }\n                }\n\n                retObj['data'].push(responseField);\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "New Case Comment",
			"id": "new-case-comment",
			"priority": 4,
			"entity": "message",
			"beta": true,
			"description": "Triggers when there is a new Comment on a Case",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity = \"CaseComment\"\n    var resources = \"Id, CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        var workflow = params['workflow']\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate\n        lastPolledDate = new Date(lastPolledDate).toISOString()\n\n        var fetchedParams = params['userapp'].fetchAuthParams(params['appinfo'])\n        var loginInstanceUrl = fetchedParams['instance_url']\n        var REST_ENDPOINT = \"/services/data\"\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        \n        // fetch the selected type of note\n        let inputParams = workflow && workflow.trigger && workflow.trigger.params && workflow.trigger.params.length ? workflow.trigger.params : []\n        let caseID = inputParams.find(obj => obj.id === \"case\" && obj.value) || {}\n        let caseToTrack = caseID || ''\n        let url = caseToTrack && caseToTrack.value? `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+ParentId+='${caseToTrack.value}'+AND+CreatedDate+>+${lastPolledDate}+ORDER+BY+CreatedDate+DESC+LIMIT+20` : `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+CreatedDate+>+${lastPolledDate}+ORDER+BY+CreatedDate+ASC+LIMIT+${LIMIT}`\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] ||\n        !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n            console.log(JSON.stringify(body))\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"CaseComment\";\n    var resources = \"CreatedDate\";\n    var orderBy = \"CreatedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        let caseToTrack = params.params && params.params.case ? params.params.case : ''\n        let url = caseToTrack && caseToTrack.value ? `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+ParentId+=+${caseToTrack}+ORDER+BY+${orderBy}+DESC+LIMIT+20` : '/query/?q=SELECT+'+resources+'+FROM+'+entity+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20'\n        \n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: url,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var lastDate;\n    var response;\n    var errorMsg;\n    var body;\n    var formattedDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['message'] = \"Missing response or body to process\"\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].CreatedDate ? moment(body.records[0].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n            \n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.Id)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/CaseComment/${p.Id}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field] ? body[field] : \"\";\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [
				{
					"fixedValueSource": [],
					"name": "Case",
					"id": "case",
					"inputType": "select",
					"type": "String",
					"description": "If none selected, will trigger for all",
					"required": false,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        const LIMIT = fetchedParams['loadMoreLimit'] && parseInt(fetchedParams['loadMoreLimit']) || 10\n        let offset = 0\n\n        if (params.query && params.query.offset) {\n            offset = params.query.offset\n            retObj.meta = {\n                nextPage: {\n                  offset: parseInt(offset)\n                }\n            }\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+id, Subject+FROM+Case+LIMIT+${LIMIT}+OFFSET+${offset}`,\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        retObj.step = { limit: LIMIT }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n\n        if (response['statusCode'] == 200) {\n\n            var parsed = response['body'];\n            var arr = parsed.records;\n\n            var responseObjArray = [];\n            for (var index in arr) {\n                responseObjArray.push({\n                    id: arr[index]['Id'],\n                    name: arr[index]['Subject'] || \"\"\n                });\n            }\n\n            if (arr.length) {\n                let offset = 0\n                const { limit } = params.step\n                if (params.meta && params.meta.nextPage && params.meta.nextPage.offset) {\n                    offset = params.meta.nextPage.offset\n                }\n\n                if (arr.length >= limit) {\n                    retObj.meta = {\n                        nextPage: {\n                            offset: (offset + arr.length).toString()\n                        }\n                    }\n                }\n            }\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				}
			],
			"responseFields": [],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"CaseComment\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                let responseField = {\n                    \"name\": /^Case Comment/gmi.test(el.label) ? el.label : `Case Comment ${el.label}`,\n                    \"id\": el.name,\n                    \"type\": \"string\",\n                    \"defaultValue\": el.defaultValue || undefined,\n                    \"description\": el.inlineHelpText || undefined\n                }\n\n                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0] && el.name !== 'Id') {\n\n                    // lookup / reference fields\n                    switch (el.referenceTo[0]) {\n                        case \"Contact\":\n                            responseField['searchAction'] = \"search-contact\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= `Get Contact Details`;\n                            break;\n                        case \"Account\":\n                            responseField['searchAction'] = \"search-account\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Account Details\";\n                            break;\n                        case \"Lead\":\n                            responseField['searchAction'] = \"search-lead\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Lead Details\";\n                            break;\n                        case \"Opportunity\":\n                            responseField['searchAction'] = \"search-opportunity\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Opportunity Details\";\n                            break;\n                        case \"Task\":\n                            responseField['searchAction'] = \"search-task\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Task Details\";\n                            break;\n                        case \"Case\":\n                            responseField['searchAction'] = \"search-case\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Case Details\";\n                            break;\n                        case \"Event\":\n                            responseField['searchAction'] = \"search-event\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Event Details\";\n                            break;\n                        case \"User\":\n                            responseField['searchAction'] = \"search-user\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get User Details\";\n                            break;\n                        case \"Campaign\":\n                            responseField['searchAction'] = \"search-campaign\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Campaign Details\";\n                    }\n                }\n\n                retObj['data'].push(responseField);\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "New Contact",
			"id": "new-contact",
			"priority": 1,
			"entity": "person",
			"description": "Triggers when there is a new Contact",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity = \"Contact\"\n    var resources = \"Id, CreatedDate\"\n    var orderBy = \"CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var workflow = params['workflow'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        lastPolledDate = new Date(lastPolledDate).toISOString();\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+CreatedDate+>+${lastPolledDate}+ORDER+BY+CreatedDate+ASC+LIMIT+${LIMIT}`,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] ||\n        !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Contact\";\n    var resources = \"CreatedDate\";\n    var orderBy = \"CreatedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/query/?q=SELECT+'+resources+'+FROM+'+entity+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20',\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var lastDate;\n    var response;\n    var errorMsg;\n    var body;\n    var formattedDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['message'] = \"Missing response or body to process\"\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].CreatedDate ? moment(body.records[0].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n            \n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.Id)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/Contact/${p.Id}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field] ? body[field] : \"\";\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [],
			"responseFields": [
				{
					"name": "Contact Email",
					"id": "Email",
					"type": "String"
				},
				{
					"name": "Contact Name",
					"id": "Name",
					"type": "String"
				},
				{
					"name": "Contact Phone",
					"id": "Phone",
					"type": "String"
				},
				{
					"name": "Contact ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Contact Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Contact First Name",
					"id": "FirstName",
					"type": "String"
				},
				{
					"name": "Contact Last Name",
					"id": "LastName",
					"type": "String"
				},
				{
					"name": "Contact Account ID",
					"id": "AccountId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Account Details"
				},
				{
					"name": "Contact Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Contact Title",
					"id": "Title",
					"type": "String"
				},
				{
					"name": "Contact Owner Id",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Contact Owner Details"
				},
				{
					"name": "Contact Assistant Name",
					"id": "AssistantName",
					"type": "String"
				},
				{
					"name": "Contact Fax",
					"id": "Fax",
					"type": "String"
				},
				{
					"name": "Contact Assistant Phone",
					"id": "AssistantPhone",
					"type": "String"
				},
				{
					"name": "Contact Department",
					"id": "Department",
					"type": "String"
				},
				{
					"name": "Contact Created By Id",
					"id": "CreatedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Contact Email Bounced Date",
					"id": "EmailBouncedDate",
					"type": "String"
				},
				{
					"name": "Contact Email Bounced Reason",
					"id": "EmailBouncedReason",
					"type": "String"
				},
				{
					"name": "Contact Email Opt Out",
					"id": "HasOptedOutOfEmail",
					"type": "String"
				},
				{
					"name": "Contact Do Not Call",
					"id": "DoNotCall",
					"type": "String"
				},
				{
					"name": "Jigsaw Contact ID",
					"id": "JigsawContactId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-contact",
					"searchLabel": "Get Contact Details"
				},
				{
					"name": "Contact Last Activity",
					"id": "LastActivityDate",
					"type": "String"
				},
				{
					"name": "Contact Last Stay-In-Touch Request Date",
					"id": "LastCURequestDate",
					"type": "String"
				},
				{
					"name": "Contact Last Stay-In-Touch Save Date",
					"id": "LastCUUpdateDate",
					"type": "String"
				},
				{
					"name": "Contact Last Modified By Id",
					"id": "LastModifiedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Contact Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Contact Home Phone",
					"id": "HomePhone",
					"type": "String"
				},
				{
					"name": "Contact Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Contact Lead Source",
					"id": "LeadSource",
					"type": "String"
				},
				{
					"name": "Contact Mailing Street",
					"id": "MailingStreet",
					"type": "String"
				},
				{
					"name": "Contact Mailing City",
					"id": "MailingCity",
					"type": "String"
				},
				{
					"name": "Contact Mailing State",
					"id": "MailingState",
					"type": "String"
				},
				{
					"name": "Contact Mailing Postal Code",
					"id": "MailingPostalCode",
					"type": "String"
				},
				{
					"name": "Contact Mailing Country",
					"id": "MailingCountry",
					"type": "String"
				},
				{
					"name": "Contact Mailing State Code",
					"id": "MailingStateCode",
					"type": "String"
				},
				{
					"name": "Contact Mailing Country Code",
					"id": "MailingCountryCode",
					"type": "String"
				},
				{
					"name": "Contact Mailing Latitude",
					"id": "MailingLatitude",
					"type": "String"
				},
				{
					"name": "Contact Mailing Longitude",
					"id": "MailingLongitude",
					"type": "String"
				},
				{
					"name": "Contact Mailing Geo Code Accuracy",
					"id": "MailingGeocodeAccuracy",
					"type": "String"
				},
				{
					"name": "Contact Mobile Phone",
					"id": "MobilePhone",
					"type": "String"
				},
				{
					"name": "Contact Other Street",
					"id": "OtherStreet",
					"type": "String"
				},
				{
					"name": "Contact Other City",
					"id": "OtherCity",
					"type": "String"
				},
				{
					"name": "Contact Other State",
					"id": "OtherState",
					"type": "String"
				},
				{
					"name": "Contact Other Postal Code",
					"id": "OtherPostalCode",
					"type": "String"
				},
				{
					"name": "Contact Other Country",
					"id": "OtherCountry",
					"type": "String"
				},
				{
					"name": "Contact Other State Code",
					"id": "OtherStateCode",
					"type": "String"
				},
				{
					"name": "Contact Other Country Code",
					"id": "OtherCountryCode",
					"type": "String"
				},
				{
					"name": "Contact Other Latitude",
					"id": "OtherLatitude",
					"type": "String"
				},
				{
					"name": "Contact Other Longitude",
					"id": "OtherLongitude",
					"type": "String"
				},
				{
					"name": "Contact Other Geo Code Accuracy",
					"id": "OtherGeocodeAccuracy",
					"type": "String"
				},
				{
					"name": "Contact Other Phone",
					"id": "OtherPhone",
					"type": "String"
				},
				{
					"name": "Contact Salutation",
					"id": "Salutation",
					"type": "String"
				},
				{
					"name": "Contact Birthdate",
					"id": "Birthdate",
					"type": "String"
				},
				{
					"name": "Contact Clean Status",
					"id": "CleanStatus",
					"type": "String"
				},
				{
					"name": "Contact Data.com Key",
					"id": "Jigsaw",
					"type": "String"
				},
				{
					"name": "Contact Fax Opt Out",
					"id": "HasOptedOutOfFax",
					"type": "String"
				},
				{
					"name": "Master Record Id",
					"id": "MasterRecordId",
					"type": "String",
					"description": "If this record was deleted as the result of a merge, this field contains the ID of the record that remains. If this record was deleted for any other reason, or has not been deleted, the value is null.",
					"searchID": "value",
					"searchAction": "search-contact",
					"searchLabel": "Get Master Contact Details"
				},
				{
					"name": "Contact Reports To ID",
					"id": "ReportsTo",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-contact",
					"searchLabel": "Get Contact Details"
				},
				{
					"name": "Contact Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Contact\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Contact/gmi.test(el.label) ? el.label : `Contact ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [
				"customType"
			],
			"name": "New Custom Object",
			"id": "new-custom-object",
			"priority": 1,
			"entity": "dataEntry",
			"description": "Triggers when there is a new Custom Object (of the type selected) is created",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity\n    var resources = \"Id, CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        let workflow = params['workflow']\n        let lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate\n        lastPolledDate = new Date(lastPolledDate).toISOString()\n\n        // fetch the selected type of entity\n        let inputParams = workflow && workflow.trigger && workflow.trigger.params && workflow.trigger.params.length ? workflow.trigger.params : []\n        entity = inputParams.find(obj => obj.id === \"customType\" && obj.value) || {}\n\n        if (!entity || !entity.value) {\n\n            retObj['status'] = \"ERROR\"\n            retObj['error'] = {}\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n            retObj['error']['message'] = \"Error: Missing required user input\"\n\n        }\n\n        let fetchedParams = params['userapp'].fetchAuthParams(params['appinfo'])\n        let loginInstanceUrl = fetchedParams['instance_url']\n        let REST_ENDPOINT = \"/services/data\"\n        let API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+${resources}+FROM+${entity.value}+WHERE+CreatedDate+>+${lastPolledDate}+ORDER+BY+CreatedDate+ASC+LIMIT+${LIMIT}`,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] ||\n        !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // Hide actual query from user if malformed query\n                    if (err.errorCode && err.errorCode === 'MALFORMED_QUERY')\n                        errorMsg += \"Kindly make sure that the selected custom object in not deleted/inactive in salesforce org.\"\n                    else \n                        errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity\n    var resources = \"CreatedDate\"\n    var orderBy = \"CreatedDate\"\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        let workflow = params['workflow']\n        let inputParams = workflow && workflow.trigger && workflow.trigger.params && workflow.trigger.params.length ? workflow.trigger.params : []\n        entity = inputParams.find(obj => obj.id === \"customType\" && obj.value) || {}\n\n        if (!entity || !entity.value) {\n\n            retObj['status'] = \"ERROR\"\n            retObj['error'] = {}\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n            retObj['error']['message'] = \"Error: Missing required user input\"\n            return callback(retObj)\n        }\n\n        // Generate HTTP Request body\n        var fetchedParams = params['userapp'].fetchAuthParams(params['appinfo'])\n\n        var loginInstanceUrl = fetchedParams['instance_url']\n        var REST_ENDPOINT = \"/services/data\"\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        console.log(inputParams['customType']);\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/query/?q=SELECT+'+resources+'+FROM+'+entity.value+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20',\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\"\n        retObj['data'] = {\n            options: options\n        }\n    }\n\n    callback(retObj)\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var lastDate;\n    var response;\n    var errorMsg;\n    var body;\n    var formattedDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['message'] = \"Missing response or body to process\"\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].CreatedDate ? moment(body.records[0].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n            \n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.Id)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/${p.attributes.type}/${p.Id}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field] ? body[field] : \"\";\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [
				{
					"fixedValueSource": [],
					"name": "Custom Object Type",
					"id": "customType",
					"description": "Select the type of Custom object to trigger for",
					"inputType": "select",
					"type": "String",
					"required": true,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/sobjects?limit=5',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let response = params['response'];\n        let body = response['body'];\n        let responseObjArray = []\n\n        if (response['statusCode'] == 200 && response['body'] && response['body'].sobjects) {\n\n            response['body'].sobjects.filter(obj => obj.label && obj.name)\n            .sort(function(x, y) { return y.custom - x.custom })\n            .forEach(obj => {\n                responseObjArray.push({\n                    \"id\": obj.name,\n                    \"name\": obj.label\n                })\n            })\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				}
			],
			"responseFields": [],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {}\n    var entity\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let inputParams = params.params && params.params ? params.params : []\n        entity = inputParams.find(p => p.id === \"customType\") || {}\n\n        if (!entity || !entity.value) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj)\n        }\n\n        // Generate HTTP Request body\n        let fetchedParams = params['userapp'].fetchAuthParams(params['appinfo'])\n        let loginInstanceUrl = fetchedParams['instance_url']\n        let REST_ENDPOINT = \"/services/data\"\n        let API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        let options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity.value+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n            fields.map(function (el) {\n                \n                let responseField = {\n                    \"name\": el.label,\n                    \"id\": el.name,\n                    \"type\": \"string\",\n                    \"description\": el.inlineHelpText || undefined\n                }\n                \n                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0] && el.name !== 'Id') {\n\n                    // lookup / reference fields\n                    switch (el.referenceTo[0]) {\n                        case \"Contact\":\n                            responseField['searchAction'] = \"search-contact\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= `Get Contact Details`;\n                            break;\n                        case \"Account\":\n                            responseField['searchAction'] = \"search-account\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Account Details\";\n                            break;\n                        case \"Lead\":\n                            responseField['searchAction'] = \"search-lead\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Lead Details\";\n                            break;\n                        case \"Opportunity\":\n                            responseField['searchAction'] = \"search-opportunity\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Opportunity Details\";\n                            break;\n                        case \"Task\":\n                            responseField['searchAction'] = \"search-task\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Task Details\";\n                            break;\n                        case \"Case\":\n                            responseField['searchAction'] = \"search-case\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Case Details\";\n                            break;\n                        case \"Event\":\n                            responseField['searchAction'] = \"search-event\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Event Details\";\n                            break;\n                        case \"User\":\n                            responseField['searchAction'] = \"search-user\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get User Details\";\n                            break;\n                        case \"Campaign\":\n                            responseField['searchAction'] = \"search-campaign\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Campaign Details\";\n                    }\n                }\n\n                retObj['data'].push(responseField);\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "New Event",
			"id": "new-event",
			"priority": 2,
			"entity": "activity",
			"description": "Triggers when there is a new Event",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity = \"Event\"\n    var resources = \"Id, CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        var workflow = params['workflow']\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate\n        lastPolledDate = new Date(lastPolledDate).toISOString()\n\n        var fetchedParams = params['userapp'].fetchAuthParams(params['appinfo'])\n        var loginInstanceUrl = fetchedParams['instance_url']\n        var REST_ENDPOINT = \"/services/data\"\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+CreatedDate+>+${lastPolledDate}+ORDER+BY+CreatedDate+ASC+LIMIT+${LIMIT}`,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] ||\n        !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n            console.log(JSON.stringify(body))\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Event\";\n    var resources = \"CreatedDate\";\n    var orderBy = \"CreatedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/query/?q=SELECT+'+resources+'+FROM+'+entity+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20',\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var lastDate;\n    var response;\n    var errorMsg;\n    var body;\n    var formattedDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['message'] = \"Missing response or body to process\"\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].CreatedDate ? moment(body.records[0].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n            \n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.Id)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/Event/${p.Id}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field] ? body[field] : \"\";\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [],
			"responseFields": [
				{
					"name": "Event ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Event Assigned To ID",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Assigned User Details"
				},
				{
					"name": "Event Name",
					"id": "WhoId",
					"type": "String"
				},
				{
					"name": "Event Account ID",
					"id": "AccountId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Account Details"
				},
				{
					"name": "Event What ID",
					"id": "WhatId",
					"type": "String"
				},
				{
					"name": "Event Type",
					"id": "Type",
					"type": "String"
				},
				{
					"name": "Event Subject",
					"id": "Subject",
					"type": "String"
				},
				{
					"name": "Event Location",
					"id": "location",
					"type": "String"
				},
				{
					"name": "Event Activity Date",
					"id": "ActivityDate",
					"type": "String"
				},
				{
					"name": "Event Reminder DateTime",
					"id": "ReminderDateTime",
					"type": "String"
				},
				{
					"name": "Event Start Date Time",
					"id": "StartDateTime",
					"type": "String"
				},
				{
					"name": "Event Date Time",
					"id": "ActivityDateTime",
					"type": "String"
				},
				{
					"name": "Event End Date Time",
					"id": "EndDateTime",
					"type": "String"
				},
				{
					"name": "Event Duration In Minutes",
					"id": "DurationInMinutes",
					"type": "String"
				},
				{
					"name": "All-Day Event",
					"id": "IsAllDayEvent",
					"type": "String"
				},
				{
					"name": "Event Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Is Event Private?",
					"id": "IsPrivate",
					"type": "String"
				},
				{
					"name": "Event ShowAs",
					"id": "ShowAs",
					"type": "String"
				},
				{
					"name": "Is Event Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Is Event Child?",
					"id": "IsChild",
					"type": "String"
				},
				{
					"name": "Event Phone",
					"id": "Phone",
					"type": "String"
				},
				{
					"name": "Is GroupEvent?",
					"id": "IsGroupEvent",
					"type": "String"
				},
				{
					"name": "Event Created By Id",
					"id": "CreatedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Event Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Event Last Modified By Id",
					"id": "LastModifiedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Event Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Event System Mod stamp",
					"id": "SystemModstamp",
					"type": "String"
				},
				{
					"name": "Is Event Archived?",
					"id": "IsArchived",
					"type": "String"
				},
				{
					"name": "Is Recurrence?",
					"id": "IsRecurrence",
					"type": "String"
				},
				{
					"name": "Is Event Reminder Set?",
					"id": "IsReminderSet",
					"type": "String"
				},
				{
					"name": "Event Subtype",
					"id": "EventSubtype",
					"type": "String"
				},
				{
					"name": "Event Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Event\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Event/gmi.test(el.label) ? el.label : `Event ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "New Lead",
			"id": "new-lead",
			"priority": 1,
			"entity": "person",
			"description": "Triggers when there is a new Lead",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n\tvar retObj = {}\n    var entity = \"Lead\"\n    var resources = \"Id, CreatedDate\"\n    var orderBy = \"CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\"\n        retObj['error'] = {}\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n        retObj['error']['message'] = \"Error: Input parameters are missing.\"\n\n    } else {\n\n        var workflow = params['workflow']\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate\n        lastPolledDate = new Date(lastPolledDate).toISOString();\n\n        var fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+CreatedDate+>+${lastPolledDate}+ORDER+BY+CreatedDate+ASC+LIMIT+${LIMIT}`,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var newLastDate;\n    var formattedDate;\n    var errorMsg;\n    var moment;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] || !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        lastPolledDate = new Date(lastPolledDate);\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n\n        } else if (!lastPolledDate || !lastPolledDate.getTime()) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_PARSE\";\n            retObj['error']['message'] = \"Error: Missing last PolledDate\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Lead\";\n    var resources = \"CreatedDate\";\n    var orderBy = \"CreatedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/query/?q=SELECT+'+resources+'+FROM+'+entity+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20',\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var lastDate;\n    var moment;\n    var errorMsg;\n    var formattedDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].CreatedDate ? moment(body.records[0].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.Id)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/Lead/${p.Id}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field];\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [],
			"responseFields": [
				{
					"name": "Lead Email",
					"id": "Email",
					"type": "String"
				},
				{
					"name": "Lead Phone",
					"id": "Phone",
					"type": "String"
				},
				{
					"name": "Lead Name",
					"id": "Name",
					"type": "String"
				},
				{
					"name": "Lead City",
					"id": "City",
					"type": "String"
				},
				{
					"name": "Lead Company",
					"id": "Company",
					"type": "String"
				},
				{
					"name": "Lead State",
					"id": "State",
					"type": "String"
				},
				{
					"name": "Lead State/Province Code",
					"id": "StateCode",
					"type": "String"
				},
				{
					"name": "Lead Title",
					"id": "Title",
					"type": "String"
				},
				{
					"name": "Lead Country",
					"id": "Country",
					"type": "String"
				},
				{
					"name": "Lead Country Code",
					"id": "CountryCode",
					"type": "String"
				},
				{
					"name": "Lead Latitude",
					"id": "Latitude",
					"type": "String"
				},
				{
					"name": "Lead Longitude",
					"id": "Longitude",
					"type": "String"
				},
				{
					"name": "Lead GeocodeAccuracy",
					"id": "GeocodeAccuracy",
					"type": "String"
				},
				{
					"name": "Lead Last Name",
					"id": "LastName",
					"type": "String"
				},
				{
					"name": "Lead First Name",
					"id": "FirstName",
					"type": "String"
				},
				{
					"name": "Lead Street",
					"id": "Street",
					"type": "String"
				},
				{
					"name": "Lead Industry",
					"id": "Industry",
					"type": "String"
				},
				{
					"name": "Lead Rating",
					"id": "Rating",
					"type": "String"
				},
				{
					"name": "Lead Website",
					"id": "Website",
					"type": "String"
				},
				{
					"name": "LeadSource",
					"id": "LeadSource",
					"type": "String"
				},
				{
					"name": "Lead Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Lead Status",
					"id": "Status",
					"type": "String"
				},
				{
					"name": "Lead Postal Code",
					"id": "PostalCode",
					"type": "String"
				},
				{
					"name": "Lead Fax",
					"id": "Fax",
					"type": "String"
				},
				{
					"name": "Do Not Call",
					"id": "DoNotCall",
					"type": "String"
				},
				{
					"name": "Has Opted Out Of Fax",
					"id": "HasOptedOutOfFax",
					"type": "String"
				},
				{
					"name": "Has Opted Out Of Email",
					"id": "HasOptedOutOfEmail",
					"type": "String"
				},
				{
					"name": "Lead Mobile Phone",
					"id": "MobilePhone",
					"type": "String"
				},
				{
					"name": "Lead ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "LeadAnnual Revenue",
					"id": "AnnualRevenue",
					"type": "String"
				},
				{
					"name": "Lead Company D-U-N-S Number",
					"id": "CompanyDunsNumber",
					"type": "String"
				},
				{
					"name": "Lead Converted Account",
					"id": "ConvertedAccountId",
					"type": "String"
				},
				{
					"name": "Lead Converted Date",
					"id": "ConvertedDate",
					"type": "String"
				},
				{
					"name": "Lead ConvertedOpportunity",
					"id": "ConvertedOpportunityId",
					"type": "String"
				},
				{
					"name": "Lead Created By Id",
					"id": "CreatedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Lead D & B Company ID",
					"id": "DandbCompanyId",
					"type": "String"
				},
				{
					"name": "Lead Email Bounced Date",
					"id": "EmailBouncedDate",
					"type": "String"
				},
				{
					"name": "Lead Email Bounced Reason",
					"id": "EmailBouncedReason",
					"type": "String"
				},
				{
					"name": "Is Unread By Owner?",
					"id": "IsUnreadByOwner",
					"type": "String"
				},
				{
					"name": "Lead Jigsaw",
					"id": "Jigsaw",
					"type": "String"
				},
				{
					"name": "Lead Jigsaw Contact",
					"id": "JigsawContactId",
					"type": "String"
				},
				{
					"name": "Lead Last Activity Date",
					"id": "LastActivityDate",
					"type": "String"
				},
				{
					"name": "Lead Last Modified By Id",
					"id": "LastModifiedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Lead Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Lead Last Transfer Date",
					"id": "LastTransferDate",
					"type": "String"
				},
				{
					"name": "Lead Master Record ID",
					"id": "MasterRecordId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-lead",
					"searchLabel": "Get Lead Details"
				},
				{
					"name": "Lead Number Of Employees",
					"id": "NumberOfEmployees",
					"type": "String"
				},
				{
					"name": "Lead System Modstamp",
					"id": "SystemModstamp",
					"type": "String"
				},
				{
					"name": "Lead Clean Status",
					"id": "CleanStatus",
					"type": "String"
				},
				{
					"name": "Lead Campaign Id",
					"id": "CampaignId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-campaign",
					"searchLabel": "Get Campaign Details"
				},
				{
					"name": "Lead Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Is Lead Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Lead Owner Id",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Lead Salutation",
					"id": "Salutation",
					"type": "String"
				},
				{
					"name": "Lead Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Lead\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Lead/gmi.test(el.label) ? el.label : `Lead ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [
				"noteType"
			],
			"name": "New Note",
			"id": "new-note",
			"priority": 3,
			"entity": "message",
			"description": "Triggers when there is a new Note",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n\tvar retObj = {}\n    var entity = \"Note\"\n    var resources = \"Id, CreatedDate\"\n    var orderBy = \"CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var workflow = params['workflow']\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate\n        lastPolledDate = new Date(lastPolledDate).toISOString()\n\n        // fetch the selected type of note\n        let inputParams = workflow && workflow.trigger && workflow.trigger.params && workflow.trigger.params.length ? workflow.trigger.params : []\n        let noteType = inputParams.find(obj => obj.id === \"noteType\" && obj.value) || {}\n        noteType = noteType && noteType.value ? noteType.value : entity\n\n        var fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+${resources}+FROM+${noteType}+WHERE+CreatedDate+>+${lastPolledDate}+ORDER+BY+CreatedDate+ASC+LIMIT+${LIMIT}`,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var newLastDate;\n    var formattedDate;\n    var errorMsg;\n    var moment;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] || !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        lastPolledDate = new Date(lastPolledDate);\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n\n        } else if (!lastPolledDate || !lastPolledDate.getTime()) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_PARSE\";\n            retObj['error']['message'] = \"Error: Missing last PolledDate\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Note\";\n    var resources = \"CreatedDate\";\n    var orderBy = \"CreatedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n        let noteType = params.params && params.params.noteType ? params.params.noteType : entity\n        \n        if ( !(/^NOTE$/i.test(noteType)) && !(/^CONTENTNOTE$/i.test(noteType))) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Please select a valid Note Type from dropdown.\";\n            callback(retObj);\n\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/query/?q=SELECT+'+resources+'+FROM+'+noteType+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20',\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var lastDate;\n    var moment;\n    var errorMsg;\n    var formattedDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].CreatedDate ? moment(body.records[0].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.Id)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/${p.attributes.type}/${p.Id}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field];\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [
				{
					"fixedValueSource": [
						{
							"id": "ContentNote",
							"name": "Notes (Enhanced/Rich Notes)"
						},
						{
							"id": "Note",
							"name": "Notes and Attachment"
						}
					],
					"name": "Note Type",
					"id": "noteType",
					"inputType": "select",
					"type": "String",
					"defaultValue": "ContentNote",
					"description": "In case of Enhanced/Rich Notes, please make sure Notes are enabled in org settings (Go to your Salesforce org Setup -> Feature Settings -> Sales -> Notes Settings)",
					"required": true
				}
			],
			"responseFields": [],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Note\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        let noteType = (params.params || []).find(obj => obj.id === \"noteType\" && obj.value) || {}\n        noteType = noteType && noteType.value ? noteType.value : entity\n\n        if ( !(/^NOTE$/i.test(noteType)) && !(/^CONTENTNOTE$/i.test(noteType))) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Please select a valid Note Type from dropdown.\";\n            callback(retObj);\n\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+noteType+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n            fields.map(function (el) {\n\n                let responseField = {\n                    \"name\": /^Note/gmi.test(el.label) ? el.label : `Note ${el.label}`,\n                    \"id\": el.name,\n                    \"type\": \"string\",\n                    \"defaultValue\": el.defaultValue || undefined,\n                    \"description\": el.inlineHelpText || undefined\n                }\n\n                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0] && el.name !== 'Id') {\n\n                    // lookup / reference fields\n                    switch (el.referenceTo[0]) {\n                        case \"Contact\":\n                            responseField['searchAction'] = \"search-contact\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= `Get Contact Details`;\n                            break;\n                        case \"Account\":\n                            responseField['searchAction'] = \"search-account\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Account Details\";\n                            break;\n                        case \"Lead\":\n                            responseField['searchAction'] = \"search-lead\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Lead Details\";\n                            break;\n                        case \"Opportunity\":\n                            responseField['searchAction'] = \"search-opportunity\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Opportunity Details\";\n                            break;\n                        case \"Task\":\n                            responseField['searchAction'] = \"search-task\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Task Details\";\n                            break;\n                        case \"Case\":\n                            responseField['searchAction'] = \"search-case\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Case Details\";\n                            break;\n                        case \"Event\":\n                            responseField['searchAction'] = \"search-event\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Event Details\";\n                            break;\n                        case \"User\":\n                            responseField['searchAction'] = \"search-user\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get User Details\";\n                            break;\n                        case \"Campaign\":\n                            responseField['searchAction'] = \"search-campaign\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Campaign Details\";\n                    }\n                }\n\n                retObj['data'].push(responseField);\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 404) {\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\"\n                retObj['error']['message'] = \"Please make sure Notes are enabled in settings (Setup -> Feature Settings -> Sales -> Notes Settings)\"\n                return callback(retObj);\n                \n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "New Opportunity",
			"id": "new-opportunity",
			"priority": 1,
			"entity": "deal",
			"description": "Triggers when there is a new Opportunity",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity = \"Opportunity\"\n    var resources = \"Id, CreatedDate\"\n    var orderBy = \"CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var workflow = params['workflow'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        lastPolledDate = new Date(lastPolledDate).toISOString();\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+CreatedDate+>+${lastPolledDate}+ORDER+BY+CreatedDate+ASC+LIMIT+${LIMIT}`,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var formattedDate;\n    var newLastDate;\n    var errorMsg;\n    var moment;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] || !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        lastPolledDate = new Date(lastPolledDate);\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n\n        } else if (!lastPolledDate || !lastPolledDate.getTime()) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_PARSE\";\n            retObj['error']['message'] = \"Error: Missing last PolledDate\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Opportunity\";\n    var resources = \"CreatedDate\";\n    var orderBy = \"CreatedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/query/?q=SELECT+'+resources+'+FROM+'+entity+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20',\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var formattedDate;\n    var errorMsg;\n    var lastDate;\n    var moment;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].CreatedDate ? moment(body.records[0].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: { lastDate }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.Id)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/Opportunity/${p.Id}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field];\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [],
			"responseFields": [
				{
					"name": "Opportunity Name",
					"id": "Name",
					"type": "String"
				},
				{
					"name": "Opportunity ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Opportunity Forecast Category",
					"id": "ForecastCategory",
					"type": "String"
				},
				{
					"name": "Opportunity Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Opportunity Stage Name",
					"id": "StageName",
					"type": "String"
				},
				{
					"name": "Opportunity Amount",
					"id": "Amount",
					"type": "String"
				},
				{
					"name": "Opportunity Type",
					"id": "Type",
					"type": "String"
				},
				{
					"name": "Opportunity Iq Score",
					"id": "IqScore",
					"type": "String"
				},
				{
					"name": "Opportunity Contract ID",
					"id": "ContractId",
					"type": "String"
				},
				{
					"name": "Opportunity Fiscal Period",
					"id": "Fiscal",
					"type": "String"
				},
				{
					"name": "Is Opportunity Won?",
					"id": "Won",
					"type": "String"
				},
				{
					"name": "Opportunity Account ID",
					"id": "AccountId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Account Details"
				},
				{
					"name": "Opportunity Campaign ID",
					"id": "CampaignId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-campaign",
					"searchLabel": "Get Campaign Details"
				},
				{
					"name": "Opportunity Created By ID",
					"id": "CreatedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Opportunity Expected Revenue",
					"id": "ExpectedRevenue",
					"type": "String"
				},
				{
					"name": "Opportunity Fiscal Quarter",
					"id": "FiscalQuarter",
					"type": "String"
				},
				{
					"name": "Opportunity Forecast Category Name",
					"id": "ForecastCategoryName",
					"type": "String"
				},
				{
					"name": "Opportunity Line Item?",
					"id": "HasOpportunityLineItem",
					"type": "String"
				},
				{
					"name": "Opportunity Last Activity Date",
					"id": "LastActivityDate",
					"type": "String"
				},
				{
					"name": "Opportunity Last Modified By ID",
					"id": "LastModifiedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Opportunity Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Opportunity Pricebook 2 Id",
					"id": "Pricebook2Id",
					"type": "String"
				},
				{
					"name": "Opportunity System Modstamp",
					"id": "SystemModstamp",
					"type": "String"
				},
				{
					"name": "Total Opportunity Quantity",
					"id": "TotalOpportunityQuantity",
					"type": "String"
				},
				{
					"name": "Opportunity Close Date",
					"id": "CloseDate",
					"type": "String"
				},
				{
					"name": "Opportunity Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Opportunity Fiscal Year",
					"id": "FiscalYear",
					"type": "String"
				},
				{
					"name": "Is Opportunity Closed?",
					"id": "IsClosed",
					"type": "String"
				},
				{
					"name": "Is Opportunity Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Is Opportunity Private?",
					"id": "IsPrivate",
					"type": "String"
				},
				{
					"name": "Opportunity Lead Source",
					"id": "LeadSource",
					"type": "String"
				},
				{
					"name": "Opportunity Next Step",
					"id": "NextStep",
					"type": "String"
				},
				{
					"name": "Opportunity Owner ID",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Owner User Details"
				},
				{
					"name": "Opportunity Probability",
					"id": "Probability",
					"type": "String"
				},
				{
					"name": "Opportunity Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Opportunity\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var errorMsg;\n    var response;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Opportunity/gmi.test(el.label) ? el.label : `Opportunity ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n\n    }\n\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "New Task",
			"id": "new-task",
			"priority": 2,
			"entity": "activity",
			"description": "Triggers when there is a new Task",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity = \"Task\"\n    var resources = \"WhatId, CreatedDate\"\n    var orderBy = \"CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var workflow = params['workflow'];\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        lastPolledDate = new Date(lastPolledDate).toISOString();\n\n        var fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+CreatedDate+>+${lastPolledDate}+ORDER+BY+CreatedDate+ASC+LIMIT+${LIMIT}`,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var formattedDate;\n    var newLastDate;\n    var errorMsg;\n    var moment;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] || !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        lastPolledDate = new Date(lastPolledDate);\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n\n        } else if (!lastPolledDate || !lastPolledDate.getTime()) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_PARSE\";\n            retObj['error']['message'] = \"Error: Missing last PolledDate\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Task\";\n    var resources = \"CreatedDate\";\n    var orderBy = \"CreatedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/query/?q=SELECT+'+resources+'+FROM+'+entity+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20',\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var formattedDate;\n    var lastDate;\n    var errorMsg;\n    var moment;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].CreatedDate ? moment(body.records[0].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: { lastDate }\n            };\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.attributes && p.attributes.url)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/Task/${p.attributes.url.split('/').pop()}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field];\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [],
			"responseFields": [
				{
					"name": "Task Subject",
					"id": "Subject",
					"type": "String"
				},
				{
					"name": "Task Id",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Task Account Id",
					"id": "AccountId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-task",
					"searchLabel": "Get Task Details"
				},
				{
					"name": "Task Due Date",
					"id": "ActivityDate",
					"type": "String"
				},
				{
					"name": "Task Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Task Created By Id",
					"id": "CreatedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Task Status",
					"id": "Status",
					"type": "String"
				},
				{
					"name": "Task Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Task Who ID",
					"id": "WhoId",
					"type": "String"
				},
				{
					"name": "Task Priority",
					"id": "Priority",
					"type": "String"
				},
				{
					"name": "Task Call Result",
					"id": "CallDisposition",
					"type": "String"
				},
				{
					"name": "Task Last Modified By ID",
					"id": "LastModifiedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Task Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Task What ID",
					"id": "WhatId",
					"type": "String"
				},
				{
					"name": "Task Call Duration",
					"id": "CallDurationInSeconds",
					"type": "String"
				},
				{
					"name": "Task Reminder Date/Time",
					"id": "ReminderDateTime",
					"type": "String"
				},
				{
					"name": "Is Task Reminder Set?",
					"id": "IsReminderSet",
					"type": "String"
				},
				{
					"name": "Task Recurrence Activity Id",
					"id": "RecurrenceActivityId",
					"type": "String"
				},
				{
					"name": "Task Recurrence Day Of Month",
					"id": "RecurrenceDayOfMonth",
					"type": "String"
				},
				{
					"name": "Task Recurrence Day Of Week Mask",
					"id": "RecurrenceDayOfWeekMask",
					"type": "String"
				},
				{
					"name": "Task Recurrence End Date Only",
					"id": "RecurrenceEndDateOnly",
					"type": "String"
				},
				{
					"name": "Task Recurrence Instance",
					"id": "RecurrenceInstance",
					"type": "String"
				},
				{
					"name": "Task Recurrence Interval",
					"id": "RecurrenceInterval",
					"type": "String"
				},
				{
					"name": "Task Recurrence Month of Year",
					"id": "RecurrenceMonthOfYear",
					"type": "String"
				},
				{
					"name": "Task Recurrence Start Date Only",
					"id": "RecurrenceStartDateOnly",
					"type": "String"
				},
				{
					"name": "Task Recurrence Time Zone",
					"id": "RecurrenceTimeZoneSidKey",
					"type": "String"
				},
				{
					"name": "Task Recurrence Type",
					"id": "RecurrenceType",
					"type": "String"
				},
				{
					"name": "Task Recurrence Regenerated Type",
					"id": "RecurrenceRegeneratedType",
					"type": "String"
				},
				{
					"name": "Task System Modstamp",
					"id": "SystemModstamp",
					"type": "String"
				},
				{
					"name": "Task Call Object",
					"id": "CallObject",
					"type": "String"
				},
				{
					"name": "Call Type",
					"id": "CallType",
					"type": "String"
				},
				{
					"name": "Task Type",
					"id": "Type",
					"type": "String"
				},
				{
					"name": "Task Subtype",
					"id": "TaskSubtype",
					"type": "String"
				},
				{
					"name": "Task Phone",
					"id": "Phone",
					"type": "String"
				},
				{
					"name": "Task Email",
					"id": "Email",
					"type": "String"
				},
				{
					"name": "Is Task Recurrence?",
					"id": "IsRecurrence",
					"type": "String"
				},
				{
					"name": "Is Task Archived?",
					"id": "IsArchived",
					"type": "String"
				},
				{
					"name": "Is Task Closed?",
					"id": "IsClosed",
					"type": "String"
				},
				{
					"name": "Is Task Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Task Owner ID",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Owner User Details"
				},
				{
					"name": "Task Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Task\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var errorMsg;\n    var response;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Task/gmi.test(el.label) ? el.label : `Task ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "Updated Account",
			"id": "updated-account",
			"priority": 2,
			"entity": "company",
			"beta": true,
			"description": "Triggers when an existing Account is updated",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity = \"Account\"\n    var resources = \"Id, LastModifiedDate, CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var workflow = params['workflow'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        lastPolledDate = new Date(lastPolledDate).toISOString();\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+LastModifiedDate+>+${lastPolledDate}+ORDER+BY+LastModifiedDate+ASC+LIMIT+${200}`,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] ||\n        !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // skipping the newly created contacts\n            body = body.filter(el => {\n                \n                return (el.LastModifiedDate && el.CreatedDate && (new Date(el.LastModifiedDate).getTime() > new Date(el.CreatedDate).getTime()))  \n            })\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].LastModifiedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Account\";\n    var resources = \"LastModifiedDate\";\n    var orderBy = \"LastModifiedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/query/?q=SELECT+'+resources+'+FROM+'+entity+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20',\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var lastDate;\n    var response;\n    var errorMsg;\n    var body;\n    var formattedDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['message'] = \"Missing response or body to process\"\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].LastModifiedDate ? moment(body.records[0].LastModifiedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n            \n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.Id)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/Account/${p.Id}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field] ? body[field] : \"\";\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [],
			"responseFields": [],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Account\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                let responseField = {\n                    \"name\": /^Account/gmi.test(el.label) ? el.label : `Account ${el.label}`,\n                    \"id\": el.name,\n                    \"type\": \"string\",\n                    \"defaultValue\": el.defaultValue || undefined,\n                    \"description\": el.inlineHelpText || undefined\n                }\n\n                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0] && el.name !== 'Id') {\n\n                    // lookup / reference fields\n                    switch (el.referenceTo[0]) {\n                        case \"Contact\":\n                            responseField['searchAction'] = \"search-contact\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= `Get Contact Details`;\n                            break;\n                        case \"Account\":\n                            responseField['searchAction'] = \"search-account\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Account Details\";\n                            break;\n                        case \"Lead\":\n                            responseField['searchAction'] = \"search-lead\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Lead Details\";\n                            break;\n                        case \"Opportunity\":\n                            responseField['searchAction'] = \"search-opportunity\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Opportunity Details\";\n                            break;\n                        case \"Task\":\n                            responseField['searchAction'] = \"search-task\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Task Details\";\n                            break;\n                        case \"Case\":\n                            responseField['searchAction'] = \"search-case\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Case Details\";\n                            break;\n                        case \"Event\":\n                            responseField['searchAction'] = \"search-event\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Event Details\";\n                            break;\n                        case \"User\":\n                            responseField['searchAction'] = \"search-user\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get User Details\";\n                            break;\n                        case \"Campaign\":\n                            responseField['searchAction'] = \"search-campaign\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Campaign Details\";\n                    }\n                }\n\n                retObj['data'].push(responseField);\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "Updated Account Property",
			"id": "updated-account-property",
			"priority": 3,
			"entity": "company",
			"beta": true,
			"description": "Triggers when an existing Account's property is updated",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity = \"Account\"\n    var resources = \"Id, LastModifiedDate, CreatedDate\"\n    var orderBy = \"CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var workflow = params['workflow']\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate\n        lastPolledDate = new Date(lastPolledDate).toISOString();\n\n        let inputParams = workflow && workflow.trigger && workflow.trigger.params && workflow.trigger.params.length ? workflow.trigger.params : []\n        let propertyToTrack = inputParams.find(obj => obj.id === \"field\" && obj.value) || {}\n        let url = propertyToTrack  && propertyToTrack.value ? `/query/?q=SELECT+AccountId, CreatedDate, Field, NewValue, OldValue+FROM+AccountHistory+WHERE+Field='${propertyToTrack.value}'+AND+CreatedDate+>+${lastPolledDate}+ORDER+BY+CreatedDate+ASC+LIMIT+20` : ''\n        \n        var fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: url,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n        retObj['step'] = { trackingField : !!url }\n        console.log(JSON.stringify(options))\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n    var moment;\n\n    if (!params || !params['response'] || !params['body'] || !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj)\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Account\";\n    var resources = \"LastModifiedDate\";\n    var orderBy = \"LastModifiedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        let workflow = params['workflow']\n        let inputParams = workflow && workflow.trigger && workflow.trigger.params && workflow.trigger.params.length ? workflow.trigger.params : []\n        let propertyToTrack = inputParams.find(obj => obj.id === \"field\" && obj.value) || {}\n        let url = propertyToTrack && propertyToTrack.value ? `/query/?q=SELECT+CreatedDate+FROM+AccountHistory+WHERE+Field='${propertyToTrack.value}'+ORDER+BY+CreatedDate+DESC+LIMIT+20` : ''\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: url,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var formattedDate;\n    var lastDate;\n    var response;\n    var errorMsg;\n    var moment;\n    var body;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].CreatedDate ? moment(body.records[0].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && (p.Id || p.AccountId))\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/Account/${p.Id || p.AccountId}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options },\n        step: { historyObj: parsedData[0]}\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n    const historyObj = params.step && params.step.historyObj || {}\n\n    if (!libDate) {\n        \n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field];\n            }\n        }, this);\n\n        if (historyObj) {\n            responseObject['Field'] =  historyObj['Field']\n            responseObject['NewValue'] = historyObj['NewValue']\n            responseObject['OldValue'] = historyObj['OldValue']\n        }\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [
				{
					"fixedValueSource": [],
					"name": "Account Property",
					"id": "field",
					"description": "To track on a Property, please make sure Account Field History is enabled for Property (In your Salesforce org go to Setup -> Object Manager -> Account -> Fields & Relationships -> Set History Tracking -> Enable -> Select fields).",
					"inputType": "select",
					"type": "String",
					"required": true,
					"defaultValue": "TextName",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Account/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [\n                {\n                  \"name\": \"Account Name\",\n                  \"id\": \"TextName\"\n                },\n                {\n                  \"name\": \"Account Type\",\n                  \"id\": \"Type\"\n                },\n                {\n                  \"name\": \"Parent Account ID\",\n                  \"id\": \"ParentId\"\n                },\n                {\n                  \"name\": \"Account Billing Street\",\n                  \"id\": \"BillingStreet\"\n                }, \n                {\n                  \"name\": \"Account Billing City\",\n                  \"id\": \"BillingCity\"\n                }, \n                {\n                  \"name\": \"Account Billing Postal Code\",\n                  \"id\": \"BillingPostalCode\"\n                }, \n                {\n                  \"name\": \"Account Billing State Code\",\n                  \"id\": \"BillingStateCode\"\n                }, \n                {\n                  \"name\": \"Account Billing Country Code\",\n                  \"id\": \"BillingCountryCode\"\n                }, \n                {\n                  \"name\": \"Account Billing Latitude\",\n                  \"id\": \"BillingLatitude\"\n                }, \n                {\n                  \"name\": \"Account Billing Longitude\",\n                  \"id\": \"BillingLongitude\"\n                }, \n                {\n                  \"name\": \"Account Billing Geo Code Accuracy\",\n                  \"id\": \"BillingGeocodeAccuracy\"\n                },\n                {\n                  \"name\": \"Account Shipping Street\",\n                  \"id\": \"ShippingStreet\"\n                }, \n                {\n                  \"name\": \"Account Shipping City\",\n                  \"id\": \"ShippingCity\"\n                }, \n                {\n                  \"name\": \"Account Shipping Postal Code\",\n                  \"id\": \"ShippingPostalCode\"\n                }, \n                {\n                  \"name\": \"Account Shipping State Code\",\n                  \"id\": \"ShippingStateCode\"\n                }, \n                {\n                  \"name\": \"Account Shipping Country Code\",\n                  \"id\": \"ShippingCountryCode\"\n                }, \n                {\n                  \"name\": \"Account Shipping Latitude\",\n                  \"id\": \"ShippingLatitude\"\n                }, \n                {\n                  \"name\": \"Account Shipping Longitude\",\n                  \"id\": \"ShippingLongitude\"\n                }, \n                {\n                  \"name\": \"Shipping Geo Code Accuracy\",\n                  \"id\": \"ShippingGeocodeAccuracy\"\n                },\n                {\n                  \"name\": \"Account Phone\",\n                  \"id\": \"Phone\"\n                },\n                {\n                  \"name\": \"Account Fax\",\n                  \"id\": \"Fax\"\n                },\n                {\n                  \"name\": \"Account Number\",\n                  \"id\": \"AccountNumber\"\n                },\n                {\n                  \"name\": \"Website\",\n                  \"id\": \"Website\"\n                },\n                {\n                  \"name\": \"SIC Code\",\n                  \"id\": \"Sic\"\n                },\n                {\n                  \"name\": \"Industry\",\n                  \"id\": \"Industry\"\n                },\n                {\n                  \"name\": \"Annual Revenue\",\n                  \"id\": \"AnnualRevenue\"\n                },\n                {\n                  \"name\": \"Employees\",\n                  \"id\": \"NumberOfEmployees\"\n                },\n                {\n                  \"name\": \"Ownership\",\n                  \"id\": \"Ownership\"\n                },\n                {\n                  \"name\": \"Ticker Symbol\",\n                  \"id\": \"TickerSymbol\"\n                },\n                {\n                  \"name\": \"Account Description\",\n                  \"id\": \"Description\"\n                },\n                {\n                  \"name\": \"Account Rating\",\n                  \"id\": \"Rating\"\n                },\n                {\n                  \"name\": \"Account Site\",\n                  \"id\": \"Site\"\n                },\n                {\n                  \"name\": \"Account Owner\",\n                  \"id\": \"OwnerId\"\n                },\n                {\n                  \"name\": \"Data.com Key\",\n                  \"id\": \"Jigsaw\"\n                },\n                {\n                  \"name\": \"Clean Status\",\n                  \"id\": \"CleanStatus\"\n                },\n                {\n                  \"name\": \"Account Source\",\n                  \"id\": \"AccountSource\"\n                },\n                {\n                  \"name\": \"D-U-N-S Number\",\n                  \"id\": \"DunsNumber\"\n                },\n                {\n                  \"name\": \"Tradestyle\",\n                  \"id\": \"Tradestyle\"\n                },\n                {\n                  \"name\": \"NAICS Code\",\n                  \"id\": \"NaicsCode\"\n                },\n                {\n                  \"name\": \"NAICS Description\",\n                  \"id\": \"NaicsDesc\"\n                },\n                {\n                  \"name\": \"Year Started\",\n                  \"id\": \"YearStarted\"\n                },\n                {\n                  \"name\": \"SIC Description\",\n                  \"id\": \"SicDesc\"\n                },\n                {\n                  \"name\": \"D&B Company ID\",\n                  \"id\": \"DandbCompanyId\"\n                }\n            ];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.custom) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.name \n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				}
			],
			"responseFields": [
				{
					"name": "Account Name",
					"id": "Name",
					"type": "String"
				},
				{
					"name": "Account ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Account Field Updated",
					"id": "Field",
					"type": "String"
				},
				{
					"name": "New Value of updated field",
					"id": "NewValue",
					"type": "String"
				},
				{
					"name": "Old Value of updated field",
					"id": "OldValue",
					"type": "String"
				},
				{
					"name": "Account Phone",
					"id": "Phone",
					"type": "String"
				},
				{
					"name": "Account Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Account Source",
					"id": "AccountSource",
					"type": "String"
				},
				{
					"name": "Account Fax",
					"id": "Fax",
					"type": "String"
				},
				{
					"name": "Account Rating",
					"id": "Rating",
					"type": "String"
				},
				{
					"name": "Account SIC",
					"id": "Sic",
					"type": "String"
				},
				{
					"name": "Account Type",
					"id": "Type",
					"type": "String"
				},
				{
					"name": "Account Number",
					"id": "AccountNumber",
					"type": "String"
				},
				{
					"name": "Account Annual Revnue",
					"id": "AnnualRevenue",
					"type": "String"
				},
				{
					"name": "Account Billing Country",
					"id": "BillingCountry",
					"type": "String"
				},
				{
					"name": "Account Billing Country Code",
					"id": "BillingCountryCode",
					"type": "String"
				},
				{
					"name": "Account Billing ZIP/Postal Code",
					"id": "BillingPostal",
					"type": "String"
				},
				{
					"name": "Account Billing Street",
					"id": "BillingStreet",
					"type": "String"
				},
				{
					"name": "Account Billing State Code",
					"id": "BillingStateCode",
					"type": "String"
				},
				{
					"name": "Account Created By",
					"id": "CreatedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Account D and B Company",
					"id": "DandbCompanyId",
					"type": "String"
				},
				{
					"name": "Account Jigsaw Company ID",
					"id": "JigsawCompanyId",
					"type": "String"
				},
				{
					"name": "Account Data.com Key",
					"id": "Jigsaw",
					"type": "String"
				},
				{
					"name": "Account Last Activity Date",
					"id": "LastActivityDate",
					"type": "String"
				},
				{
					"name": "Account Last Modified By Id",
					"id": "LastModifiedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Master User Details"
				},
				{
					"name": "Account Last Modify Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Account Master Record ID",
					"id": "MasterRecordId",
					"description": "If this object was deleted as the result of a merge, this field contains the ID of the record that was kept. If this object was deleted for any other reason, or has not been deleted, the value is null.",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Master Account Details"
				},
				{
					"name": "Account Employees",
					"id": "NumberOfEmployees",
					"type": "String"
				},
				{
					"name": "Account Shipping Country",
					"id": "ShippingCountry",
					"type": "String"
				},
				{
					"name": "Account Shipping ZIP/Postal Code",
					"id": "ShippingPostalCode",
					"type": "String"
				},
				{
					"name": "Account Shipping State",
					"id": "ShippingState",
					"type": "String"
				},
				{
					"name": "Account Shipping Street",
					"id": "ShippingStreet",
					"type": "String"
				},
				{
					"name": "Account Shipping State Code",
					"id": "ShippingStateCode",
					"type": "String"
				},
				{
					"name": "Account Shipping Country Code",
					"id": "ShippingCountryCode",
					"type": "String"
				},
				{
					"name": "Account System Modstamp",
					"id": "SystemModstamp",
					"type": "String"
				},
				{
					"name": "Account URL",
					"id": "Site",
					"type": "String"
				},
				{
					"name": "Account Billing City",
					"id": "BillingCity",
					"type": "String"
				},
				{
					"name": "Account Billing State",
					"id": "BillingState",
					"type": "String"
				},
				{
					"name": "Account Clean Status",
					"id": "CleanStatus",
					"type": "String"
				},
				{
					"name": "Account D-U-N-S Number",
					"id": "DunsNumber",
					"type": "String"
				},
				{
					"name": "Account Industry",
					"id": "Industry",
					"type": "String"
				},
				{
					"name": "Is Account Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Account NAICS Code",
					"id": "NaicsCode",
					"type": "String"
				},
				{
					"name": "Account NAICS Description",
					"id": "NaicsDesc",
					"type": "String"
				},
				{
					"name": "Account Owner Id",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Account Ownership",
					"id": "Ownership",
					"type": "String"
				},
				{
					"name": "Account Parent Id",
					"id": "ParentId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Parent Account Details"
				},
				{
					"name": "Account Shipping City",
					"id": "ShippingCity",
					"type": "String"
				},
				{
					"name": "Account SIC Description",
					"id": "SicDesc",
					"type": "String"
				},
				{
					"name": "Account Ticker Symbol",
					"id": "TickerSymbol",
					"type": "String"
				},
				{
					"name": "Account Tradestyle",
					"id": "Tradestyle",
					"type": "String"
				},
				{
					"name": "Account Website",
					"id": "Website",
					"type": "String"
				},
				{
					"name": "Account Year Started",
					"id": "YearStarted",
					"type": "String"
				},
				{
					"name": "Account Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Account\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Account/gmi.test(el.label) ? el.label : `Account ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "Updated Contact",
			"id": "updated-contact",
			"priority": 2,
			"entity": "person",
			"description": "Triggers when an existing Contact is updated",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity = \"Contact\"\n    var resources = \"Id, LastModifiedDate, CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var workflow = params['workflow'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        lastPolledDate = new Date(lastPolledDate).toISOString();\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = \"/v39.0\";\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+LastModifiedDate+>+${lastPolledDate}+ORDER+BY+LastModifiedDate+ASC+LIMIT+${200}`,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] ||\n        !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // skipping the newly created contacts\n            body = body.filter(el => {\n                \n                return (el.LastModifiedDate && el.CreatedDate && (new Date(el.LastModifiedDate).getTime() > new Date(el.CreatedDate).getTime()))  \n            })\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].LastModifiedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Contact\";\n    var resources = \"LastModifiedDate\";\n    var orderBy = \"LastModifiedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = \"/v39.0\" ;\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/query/?q=SELECT+'+resources+'+FROM+'+entity+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20',\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var lastDate;\n    var response;\n    var errorMsg;\n    var body;\n    var formattedDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['message'] = \"Missing response or body to process\"\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].LastModifiedDate ? moment(body.records[0].LastModifiedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n            \n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = \"/v39.0\";\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.Id)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/Contact/${p.Id}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field] ? body[field] : \"\";\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [],
			"responseFields": [
				{
					"name": "Contact ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Contact Email",
					"id": "Email",
					"type": "String"
				},
				{
					"name": "Contact Name",
					"id": "Name",
					"type": "String"
				},
				{
					"name": "Contact Field Updated",
					"id": "Field",
					"type": "String"
				},
				{
					"name": "New Value of updated field",
					"id": "NewValue",
					"type": "String"
				},
				{
					"name": "Old Value of updated field",
					"id": "OldValue",
					"type": "String"
				},
				{
					"name": "Contact Phone",
					"id": "Phone",
					"type": "String"
				},
				{
					"name": "Contact Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Contact First Name",
					"id": "FirstName",
					"type": "String"
				},
				{
					"name": "Contact Last Name",
					"id": "LastName",
					"type": "String"
				},
				{
					"name": "Contact Account ID",
					"id": "AccountId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Account Details"
				},
				{
					"name": "Contact Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Contact Title",
					"id": "Title",
					"type": "String"
				},
				{
					"name": "Contact Owner Id",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Contact Owner Details"
				},
				{
					"name": "Contact Assistant Name",
					"id": "AssistantName",
					"type": "String"
				},
				{
					"name": "Contact Fax",
					"id": "Fax",
					"type": "String"
				},
				{
					"name": "Contact Assistant Phone",
					"id": "AssistantPhone",
					"type": "String"
				},
				{
					"name": "Contact Department",
					"id": "Department",
					"type": "String"
				},
				{
					"name": "Contact Created By Id",
					"id": "CreatedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Contact Email Bounced Date",
					"id": "EmailBouncedDate",
					"type": "String"
				},
				{
					"name": "Contact Email Bounced Reason",
					"id": "EmailBouncedReason",
					"type": "String"
				},
				{
					"name": "Contact Email Opt Out",
					"id": "HasOptedOutOfEmail",
					"type": "String"
				},
				{
					"name": "Do Not Call",
					"id": "DoNotCall",
					"type": "String"
				},
				{
					"name": "Jigsaw Contact ID",
					"id": "JigsawContactId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-contact",
					"searchLabel": "Get Contact Owner Details"
				},
				{
					"name": "Contact Last Activity",
					"id": "LastActivityDate",
					"type": "String"
				},
				{
					"name": "Contact Last Stay-In-Touch Request Date",
					"id": "LastCURequestDate",
					"type": "String"
				},
				{
					"name": "Contact Last Stay-In-Touch Save Date",
					"id": "LastCUUpdateDate",
					"type": "String"
				},
				{
					"name": "Contact Last Modified By Id",
					"id": "LastModifiedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Contact Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Contact Home Phone",
					"id": "HomePhone",
					"type": "String"
				},
				{
					"name": "Is Contact Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Contact Lead Source",
					"id": "LeadSource",
					"type": "String"
				},
				{
					"name": "Contact Mailing Street",
					"id": "MailingStreet",
					"type": "String"
				},
				{
					"name": "Contact Mailing City",
					"id": "MailingCity",
					"type": "String"
				},
				{
					"name": "Contact Mailing State",
					"id": "MailingState",
					"type": "String"
				},
				{
					"name": "Contact Mailing Postal Code",
					"id": "MailingPostalCode",
					"type": "String"
				},
				{
					"name": "Contact Mailing Country",
					"id": "MailingCountry",
					"type": "String"
				},
				{
					"name": "Contact Mailing State Code",
					"id": "MailingStateCode",
					"type": "String"
				},
				{
					"name": "Contact Mailing Country Code",
					"id": "MailingCountryCode",
					"type": "String"
				},
				{
					"name": "Contact Mailing Latitude",
					"id": "MailingLatitude",
					"type": "String"
				},
				{
					"name": "Contact Mailing Longitude",
					"id": "MailingLongitude",
					"type": "String"
				},
				{
					"name": "Contact Mailing Geo Code Accuracy",
					"id": "MailingGeocodeAccuracy",
					"type": "String"
				},
				{
					"name": "Contact Mobile Phone",
					"id": "MobilePhone",
					"type": "String"
				},
				{
					"name": "Contact Other Street",
					"id": "OtherStreet",
					"type": "String"
				},
				{
					"name": "Contact Other City",
					"id": "OtherCity",
					"type": "String"
				},
				{
					"name": "Contact Other State",
					"id": "OtherState",
					"type": "String"
				},
				{
					"name": "Contact Other Postal Code",
					"id": "OtherPostalCode",
					"type": "String"
				},
				{
					"name": "Contact Other Country",
					"id": "OtherCountry",
					"type": "String"
				},
				{
					"name": "Contact Other State Code",
					"id": "OtherStateCode",
					"type": "String"
				},
				{
					"name": "Contact Other Country Code",
					"id": "OtherCountryCode",
					"type": "String"
				},
				{
					"name": "Contact Other Latitude",
					"id": "OtherLatitude",
					"type": "String"
				},
				{
					"name": "Contact Other Longitude",
					"id": "OtherLongitude",
					"type": "String"
				},
				{
					"name": "Contact Other Geo Code Accuracy",
					"id": "OtherGeocodeAccuracy",
					"type": "String"
				},
				{
					"name": "Contact Other Phone",
					"id": "OtherPhone",
					"type": "String"
				},
				{
					"name": "Contact Salutation",
					"id": "Salutation",
					"type": "String"
				},
				{
					"name": "Contact Birthdate",
					"id": "Birthdate",
					"type": "String"
				},
				{
					"name": "Contact Clean Status",
					"id": "CleanStatus",
					"type": "String"
				},
				{
					"name": "Contact Data.com Key",
					"id": "Jigsaw",
					"type": "String"
				},
				{
					"name": "Contact Fax Opt Out",
					"id": "HasOptedOutOfFax",
					"type": "String"
				},
				{
					"name": "Master Record Id",
					"id": "MasterRecordId",
					"type": "String",
					"description": "If this record was deleted as the result of a merge, this field contains the ID of the record that remains. If this record was deleted for any other reason, or has not been deleted, the value is null.",
					"searchID": "value",
					"searchAction": "search-contact",
					"searchLabel": "Get Master Contact Details"
				},
				{
					"name": "Contact Reports To ID",
					"id": "ReportsTo",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-contact",
					"searchLabel": "Get Contact Details"
				},
				{
					"name": "Contact Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Contact\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = \"/v39.0\" ;\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Contact/gmi.test(el.label) ? el.label : `Contact ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "Updated Contact Property",
			"id": "updated-contact-property",
			"priority": 2,
			"entity": "person",
			"beta": true,
			"description": "Triggers when an existing Contact's property is updated",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n        return callback(retObj)\n\n    } else {\n\n        var workflow = params['workflow']\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate\n        lastPolledDate = new Date(lastPolledDate).toISOString();\n\n        let inputParams = workflow && workflow.trigger && workflow.trigger.params && workflow.trigger.params.length ? workflow.trigger.params : []\n        let propertyToTrack = inputParams.find(obj => obj.id === \"field\" && obj.value) || {}\n\n        if (!propertyToTrack || !propertyToTrack.value) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Required Property value to track is missing.\";\n            return callback(retObj)\n        }\n\n        let url = propertyToTrack  && propertyToTrack.value ? `/query/?q=SELECT+ContactId, CreatedDate, Field, NewValue, OldValue+FROM+ContactHistory+WHERE+Field='${propertyToTrack.value}'+AND+CreatedDate+>+${lastPolledDate}+ORDER+BY+CreatedDate+ASC+LIMIT+200` : ''\n        \n        var fetchedParams = params['userapp'].fetchAuthParams(params['appinfo']);\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: url,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n        retObj['step'] = { trackingField : !!url }\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    return callback(retObj);\n\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n    var moment;\n\n    if (!params || !params['response'] || !params['body'] || !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj)\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        let workflow = params['workflow']\n        let inputParams = workflow && workflow.trigger && workflow.trigger.params && workflow.trigger.params.length ? workflow.trigger.params : []\n        let propertyToTrack = inputParams.find(obj => obj.id === \"field\" && obj.value) || {}\n        let url = propertyToTrack && propertyToTrack.value ? `/query/?q=SELECT+CreatedDate+FROM+ContactHistory+WHERE+Field='${propertyToTrack.value}'+ORDER+BY+CreatedDate+DESC+LIMIT+20` : ''\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: url,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var formattedDate;\n    var lastDate;\n    var response;\n    var errorMsg;\n    var moment;\n    var body;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].CreatedDate ? moment(body.records[0].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.ContactId)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/Contact/${p.ContactId}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    console.log(JSON.stringify({ historyObj: parsedData[0]}))\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options },\n        step: { historyObj: parsedData[0]}\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n    const historyObj = params.step && params.step.historyObj || {}\n\n    if (!libDate) {\n        \n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field];\n            }\n        }, this);\n\n        if (historyObj) {\n            responseObject['Field'] =  historyObj['Field']\n            responseObject['NewValue'] = historyObj['NewValue']\n            responseObject['OldValue'] = historyObj['OldValue']\n        }\n\n        let data = { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } }\n\n        if (responseObject.Field === 'Owner' && (responseObject['NewValue'] !== responseObject['OwnerId'])) {\n            data = []\n        }\n\n        return callback({\n            data,\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [
				{
					"fixedValueSource": [],
					"name": "Contact Property",
					"id": "field",
					"description": "To track on a Property, please make sure Contact Field History is enabled for Property (In your Salesforce org go to Setup -> Object Manager -> Contact -> Fields & Relationships -> Set History Tracking -> Enable -> Select fields).",
					"inputType": "select",
					"type": "String",
					"required": true,
					"defaultValue": "LastName",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Contact/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [\n                {\n                  \"name\": \"First Name\",\n                  \"id\": \"FirstName\"\n                },\n                {\n                  \"name\": \"Last Name\",\n                  \"id\": \"LastName\"\n                },\n                {\n                  \"name\": \"Contact Mailing Street\",\n                  \"id\": \"MailingStreet\"\n                }, \n                {\n                  \"name\": \"Contact Mailing City\",\n                  \"id\": \"MailingCity\"\n                }, \n                {\n                  \"name\": \"Contact Mailing Postal Code\",\n                  \"id\": \"MailingPostalCode\"\n                }, \n                {\n                  \"name\": \"Contact Mailing State Code\",\n                  \"id\": \"MailingStateCode\"\n                }, \n                {\n                  \"name\": \"Contact Mailing Country Code\",\n                  \"id\": \"MailingCountryCode\"\n                }, \n                {\n                  \"name\": \"Contact Mailing Latitude\",\n                  \"id\": \"MailingLatitude\"\n                }, \n                {\n                  \"name\": \"Contact Mailing Longitude\",\n                  \"id\": \"MailingLongitude\"\n                }, \n                {\n                  \"name\": \"Contact Mailing Geo Code Accuracy\",\n                  \"id\": \"MailingGeocodeAccuracy\"\n                },\n                {\n                  \"name\": \"Contact Other Street\",\n                  \"id\": \"OtherStreet\"\n                }, \n                {\n                  \"name\": \"Contact Other City\",\n                  \"id\": \"OtherCity\"\n                }, \n                {\n                  \"name\": \"Contact Other Postal Code\",\n                  \"id\": \"OtherPostalCode\"\n                }, \n                {\n                  \"name\": \"Contact Other State Code\",\n                  \"id\": \"OtherStateCode\"\n                }, \n                {\n                  \"name\": \"Contact Other Country Code\",\n                  \"id\": \"OtherCountryCode\"\n                }, \n                {\n                  \"name\": \"Contact Other Latitude\",\n                  \"id\": \"OtherLatitude\"\n                }, \n                {\n                  \"name\": \"Contact Other Longitude\",\n                  \"id\": \"OtherLongitude\"\n                }, \n                {\n                  \"name\": \"Contact Other Geo Code Accuracy\",\n                  \"id\": \"OtherGeocodeAccuracy\"\n                },\n                {\n                  \"name\": \"Business Phone\",\n                  \"id\": \"Phone\"\n                },\n                {\n                  \"name\": \"Business Fax\",\n                  \"id\": \"Fax\"\n                },\n                {\n                  \"name\": \"Mobile Phone\",\n                  \"id\": \"MobilePhone\"\n                },\n                {\n                  \"name\": \"Other Phone\",\n                  \"id\": \"OtherPhone\"\n                },\n                {\n                  \"name\": \"Home Phone\",\n                  \"id\": \"HomePhone\"\n                },\n                {\n                  \"name\": \"Reports To ID\",\n                  \"id\": \"ReportsToId\"\n                },\n                {\n                    \"name\": \"Do Not Call\",\n                    \"id\": \"DoNotCall\"\n                },\n                  {\n                    \"name\": \"Email Opt Out\",\n                    \"id\": \"HasOptedOutOfEmail\"\n                },\n                {\n                    \"name\": \"Fax Opt Out\",\n                    \"id\": \"HasOptedOutOfFax\"\n                },\n                {\n                  \"name\": \"Email\",\n                  \"id\": \"Email\"\n                },\n                {\n                  \"name\": \"Title\",\n                  \"id\": \"Title\"\n                },\n                {\n                  \"name\": \"Department\",\n                  \"id\": \"Department\"\n                },\n                { \"name\":\"Asst. Phone\",\n                  \"id\":\"AssistantPhone\"\n                },\n                {\n                  \"name\": \"Assistant's Name\",\n                  \"id\": \"AssistantTextName\"\n                },\n                {\n                  \"name\": \"Lead Source\",\n                  \"id\": \"LeadSource\"\n                },\n                {\n                  \"name\": \"Birthdate\",\n                  \"id\": \"Birthdate\"\n                },\n                {\n                  \"name\": \"Owner ID\",\n                  \"id\": \"Owner\"\n                },\n                {\n                  \"name\": \"Email Bounced Reason\",\n                  \"id\": \"EmailBouncedReason\"\n                },\n                {\n                  \"name\": \"Email Bounced Date\",\n                  \"id\": \"EmailBouncedDate\"\n                },\n                {\n                  \"name\": \"Data.com Key\",\n                  \"id\": \"Jigsaw\"\n                },\n                {\n                    \"name\": \"Account\",\n                    \"id\": \"AccountId\"\n                },\n                {\n                  \"name\": \"Clean Status\",\n                  \"id\": \"CleanStatus\"\n                }\n            ];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.custom) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				}
			],
			"responseFields": [
				{
					"name": "Contact ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Contact Email",
					"id": "Email",
					"type": "String"
				},
				{
					"name": "Contact Name",
					"id": "Name",
					"type": "String"
				},
				{
					"name": "Contact Field Updated",
					"id": "Field",
					"type": "String"
				},
				{
					"name": "New Value of updated field",
					"id": "NewValue",
					"type": "String"
				},
				{
					"name": "Old Value of updated field",
					"id": "OldValue",
					"type": "String"
				},
				{
					"name": "Contact Phone",
					"id": "Phone",
					"type": "String"
				},
				{
					"name": "Contact Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Contact First Name",
					"id": "FirstName",
					"type": "String"
				},
				{
					"name": "Contact Last Name",
					"id": "LastName",
					"type": "String"
				},
				{
					"name": "Contact Account ID",
					"id": "AccountId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-account",
					"searchLabel": "Get Account Details"
				},
				{
					"name": "Contact Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Contact Title",
					"id": "Title",
					"type": "String"
				},
				{
					"name": "Contact Owner Id",
					"id": "OwnerId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Contact Owner Details"
				},
				{
					"name": "Contact Assistant Name",
					"id": "AssistantName",
					"type": "String"
				},
				{
					"name": "Contact Fax",
					"id": "Fax",
					"type": "String"
				},
				{
					"name": "Contact Assistant Phone",
					"id": "AssistantPhone",
					"type": "String"
				},
				{
					"name": "Contact Department",
					"id": "Department",
					"type": "String"
				},
				{
					"name": "Contact Created By Id",
					"id": "CreatedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-contact",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Contact Email Bounced Date",
					"id": "EmailBouncedDate",
					"type": "String"
				},
				{
					"name": "Contact Email Bounced Reason",
					"id": "EmailBouncedReason",
					"type": "String"
				},
				{
					"name": "Contact Email Opt Out",
					"id": "HasOptedOutOfEmail",
					"type": "String"
				},
				{
					"name": "Do Not Call",
					"id": "DoNotCall",
					"type": "String"
				},
				{
					"name": "Jigsaw Contact ID",
					"id": "JigsawContactId",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get Contact Details"
				},
				{
					"name": "Contact Last Activity",
					"id": "LastActivityDate",
					"type": "String"
				},
				{
					"name": "Contact Last Stay-In-Touch Request Date",
					"id": "LastCURequestDate",
					"type": "String"
				},
				{
					"name": "Contact Last Stay-In-Touch Save Date",
					"id": "LastCUUpdateDate",
					"type": "String"
				},
				{
					"name": "Contact Last Modified By Id",
					"id": "LastModifiedById",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-user",
					"searchLabel": "Get User Details"
				},
				{
					"name": "Contact Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Contact Home Phone",
					"id": "HomePhone",
					"type": "String"
				},
				{
					"name": "Is Contact Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Contact Lead Source",
					"id": "LeadSource",
					"type": "String"
				},
				{
					"name": "Contact Mailing Street",
					"id": "MailingStreet",
					"type": "String"
				},
				{
					"name": "Contact Mailing City",
					"id": "MailingCity",
					"type": "String"
				},
				{
					"name": "Contact Mailing State",
					"id": "MailingState",
					"type": "String"
				},
				{
					"name": "Contact Mailing Postal Code",
					"id": "MailingPostalCode",
					"type": "String"
				},
				{
					"name": "Contact Mailing Country",
					"id": "MailingCountry",
					"type": "String"
				},
				{
					"name": "Contact Mailing State Code",
					"id": "MailingStateCode",
					"type": "String"
				},
				{
					"name": "Contact Mailing Country Code",
					"id": "MailingCountryCode",
					"type": "String"
				},
				{
					"name": "Contact Mailing Latitude",
					"id": "MailingLatitude",
					"type": "String"
				},
				{
					"name": "Contact Mailing Longitude",
					"id": "MailingLongitude",
					"type": "String"
				},
				{
					"name": "Contact Mailing Geo Code Accuracy",
					"id": "MailingGeocodeAccuracy",
					"type": "String"
				},
				{
					"name": "Contact Mobile Phone",
					"id": "MobilePhone",
					"type": "String"
				},
				{
					"name": "Contact Other Street",
					"id": "OtherStreet",
					"type": "String"
				},
				{
					"name": "Contact Other City",
					"id": "OtherCity",
					"type": "String"
				},
				{
					"name": "Contact Other State",
					"id": "OtherState",
					"type": "String"
				},
				{
					"name": "Contact Other Postal Code",
					"id": "OtherPostalCode",
					"type": "String"
				},
				{
					"name": "Contact Other Country",
					"id": "OtherCountry",
					"type": "String"
				},
				{
					"name": "Contact Other State Code",
					"id": "OtherStateCode",
					"type": "String"
				},
				{
					"name": "Contact Other Country Code",
					"id": "OtherCountryCode",
					"type": "String"
				},
				{
					"name": "Contact Other Latitude",
					"id": "OtherLatitude",
					"type": "String"
				},
				{
					"name": "Contact Other Longitude",
					"id": "OtherLongitude",
					"type": "String"
				},
				{
					"name": "Contact Other Geo Code Accuracy",
					"id": "OtherGeocodeAccuracy",
					"type": "String"
				},
				{
					"name": "Contact Other Phone",
					"id": "OtherPhone",
					"type": "String"
				},
				{
					"name": "Contact Salutation",
					"id": "Salutation",
					"type": "String"
				},
				{
					"name": "Contact Birthdate",
					"id": "Birthdate",
					"type": "String"
				},
				{
					"name": "Contact Clean Status",
					"id": "CleanStatus",
					"type": "String"
				},
				{
					"name": "Contact Data.com Key",
					"id": "Jigsaw",
					"type": "String"
				},
				{
					"name": "Contact Fax Opt Out",
					"id": "HasOptedOutOfFax",
					"type": "String"
				},
				{
					"name": "Contact Reports To ID",
					"id": "ReportsTo",
					"type": "String",
					"searchID": "value",
					"searchAction": "search-contact",
					"searchLabel": "Get Contact Details"
				},
				{
					"name": "Master Record Id",
					"id": "MasterRecordId",
					"type": "String",
					"description": "If this record was deleted as the result of a merge, this field contains the ID of the record that remains. If this record was deleted for any other reason, or has not been deleted, the value is null.",
					"searchID": "value",
					"searchAction": "search-contact",
					"searchLabel": "Get Master Contact Details"
				},
				{
					"name": "Contact Record Type ID",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Contact\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0' ;\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Contact/gmi.test(el.label) ? el.label : `Contact ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [
				"customType"
			],
			"name": "Updated Custom Object",
			"id": "updated-custom-object",
			"priority": 2,
			"entity": "dataEntry",
			"beta": true,
			"description": "Triggers when an existing Custom Object is updated",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity\n    var resources = \"Id, LastModifiedDate, CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var workflow = params['workflow'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        lastPolledDate = new Date(lastPolledDate).toISOString();\n\n        // fetch the selected type of entity\n        let inputParams = workflow && workflow.trigger && workflow.trigger.params && workflow.trigger.params.length ? workflow.trigger.params : []\n        entity = inputParams.find(obj => obj.id === \"customType\" && obj.value) || {}\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        if (!entity || !entity.value) {\n\n            retObj['status'] = \"ERROR\"\n            retObj['error'] = {}\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n            retObj['error']['message'] = \"Error: Missing required user input\"\n            return callback(retObj)\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+${resources}+FROM+${entity.value}+WHERE+LastModifiedDate+>+${lastPolledDate}+ORDER+BY+LastModifiedDate+ASC+LIMIT+200`,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] ||\n        !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n            \n            // skipping the newly created contacts\n            body = body.filter(el => {\n                \n                return (el.LastModifiedDate && el.CreatedDate && (new Date(el.LastModifiedDate).getTime() > new Date(el.CreatedDate).getTime()))  \n            })\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].LastModifiedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity\n    var resources = \"LastModifiedDate\";\n    var orderBy = \"LastModifiedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        let workflow = params['workflow']\n        let inputParams = workflow && workflow.trigger && workflow.trigger.params && workflow.trigger.params.length ? workflow.trigger.params : []\n        entity = inputParams.find(obj => obj.id === \"customType\" && obj.value) || {}\n\n        if (!entity || !entity.value) {\n\n            retObj['status'] = \"ERROR\"\n            retObj['error'] = {}\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\"\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\"\n            retObj['error']['message'] = \"Error: Missing required user input\"\n            return callback(retObj)\n        }\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/query/?q=SELECT+'+resources+'+FROM+'+entity.value+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20',\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var lastDate;\n    var response;\n    var errorMsg;\n    var body;\n    var formattedDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['message'] = \"Missing response or body to process\"\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].LastModifiedDate ? moment(body.records[0].LastModifiedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n            \n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.Id)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/${p.attributes.type}/${p.Id}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field] ? body[field] : \"\";\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [
				{
					"fixedValueSource": [],
					"name": "Custom Object Type",
					"id": "customType",
					"description": "Select the type of Custom object to trigger for",
					"inputType": "select",
					"type": "String",
					"required": true,
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/sobjects?limit=5',\n\n            // Remain same\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = {status: \"ERROR\"};\n    var errorMsg;\n\n    if (!params || !params['response']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let response = params['response'];\n        let body = response['body'];\n        let responseObjArray = []\n\n        if (response['statusCode'] == 200 && response['body'] && response['body'].sobjects) {\n\n            response['body'].sobjects.filter(obj => obj.label && obj.name)\n            .sort(function(x, y) { return y.custom - x.custom })\n            .forEach(obj => {\n                responseObjArray.push({\n                    \"id\": obj.name,\n                    \"name\": obj.label\n                })\n            })\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}"
				}
			],
			"responseFields": [],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        let inputParams = params.params && params.params ? params.params : []\n        entity = inputParams.find(p => p.id === \"customType\") || {}\n\n        if (!entity || !entity.value) {\n\n            retObj['status'] = \"ERROR\";\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required user input\";\n            return callback(retObj)\n        }\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity.value+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                    let responseField = {\n                        \"name\": el.label,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    }\n\n                    if (el.referenceTo && el.referenceTo.length && el.referenceTo[0] && el.name !== 'Id') {\n\n                        // lookup / reference fields\n                        switch (el.referenceTo[0]) {\n                            case \"Contact\":\n                                responseField['searchAction'] = \"search-contact\";\n                                responseField['searchID'] = \"value\";\n                                responseField['searchLabel']= `Get Contact Details`;\n                                break;\n                            case \"Account\":\n                                responseField['searchAction'] = \"search-account\";\n                                responseField['searchID'] = \"value\";\n                                responseField['searchLabel']= \"Get Account Details\";\n                                break;\n                            case \"Lead\":\n                                responseField['searchAction'] = \"search-lead\";\n                                responseField['searchID'] = \"value\";\n                                responseField['searchLabel']= \"Get Lead Details\";\n                                break;\n                            case \"Opportunity\":\n                                responseField['searchAction'] = \"search-opportunity\";\n                                responseField['searchID'] = \"value\";\n                                responseField['searchLabel']= \"Get Opportunity Details\";\n                                break;\n                            case \"Task\":\n                                responseField['searchAction'] = \"search-task\";\n                                responseField['searchID'] = \"value\";\n                                responseField['searchLabel']= \"Get Task Details\";\n                                break;\n                            case \"Case\":\n                                responseField['searchAction'] = \"search-case\";\n                                responseField['searchID'] = \"value\";\n                                responseField['searchLabel']= \"Get Case Details\";\n                                break;\n                            case \"Event\":\n                                responseField['searchAction'] = \"search-event\";\n                                responseField['searchID'] = \"value\";\n                                responseField['searchLabel']= \"Get Event Details\";\n                                break;\n                            case \"User\":\n                                responseField['searchAction'] = \"search-user\";\n                                responseField['searchID'] = \"value\";\n                                responseField['searchLabel']= \"Get User Details\";\n                                break;\n                            case \"Campaign\":\n                                responseField['searchAction'] = \"search-campaign\";\n                                responseField['searchID'] = \"value\";\n                                responseField['searchLabel']= \"Get Campaign Details\";\n                        }\n                    }\n\n                    retObj['data'].push(responseField);\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "Updated Lead",
			"id": "updated-lead",
			"priority": 2,
			"entity": "person",
			"beta": true,
			"description": "Triggers when an existing Lead is updated",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity = \"Lead\"\n    var resources = \"Id, LastModifiedDate, CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var workflow = params['workflow'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        lastPolledDate = new Date(lastPolledDate).toISOString();\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+LastModifiedDate+>+${lastPolledDate}+ORDER+BY+LastModifiedDate+ASC+LIMIT+${200}`,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] ||\n        !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // skipping the newly created contacts\n            body = body.filter(el => {\n                \n                return (el.LastModifiedDate && el.CreatedDate && (new Date(el.LastModifiedDate).getTime() > new Date(el.CreatedDate).getTime()))  \n            })\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].LastModifiedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Lead\";\n    var resources = \"LastModifiedDate\";\n    var orderBy = \"LastModifiedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/query/?q=SELECT+'+resources+'+FROM+'+entity+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20',\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var lastDate;\n    var response;\n    var errorMsg;\n    var body;\n    var formattedDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['message'] = \"Missing response or body to process\"\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].LastModifiedDate ? moment(body.records[0].LastModifiedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n            \n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.Id)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/Lead/${p.Id}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field] ? body[field] : \"\";\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [],
			"responseFields": [],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Lead\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                let responseField = {\n                    \"name\": /^Lead/gmi.test(el.label) ? el.label : `Lead ${el.label}`,\n                    \"id\": el.name,\n                    \"type\": \"string\",\n                    \"defaultValue\": el.defaultValue || undefined,\n                    \"description\": el.inlineHelpText || undefined\n                }\n\n                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0] && el.name !== 'Id') {\n\n                    // lookup / reference fields\n                    switch (el.referenceTo[0]) {\n                        case \"Contact\":\n                            responseField['searchAction'] = \"search-contact\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= `Get Contact Details`;\n                            break;\n                        case \"Account\":\n                            responseField['searchAction'] = \"search-account\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Account Details\";\n                            break;\n                        case \"Lead\":\n                            responseField['searchAction'] = \"search-lead\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Lead Details\";\n                            break;\n                        case \"Opportunity\":\n                            responseField['searchAction'] = \"search-opportunity\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Opportunity Details\";\n                            break;\n                        case \"Task\":\n                            responseField['searchAction'] = \"search-task\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Task Details\";\n                            break;\n                        case \"Case\":\n                            responseField['searchAction'] = \"search-case\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Case Details\";\n                            break;\n                        case \"Event\":\n                            responseField['searchAction'] = \"search-event\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Event Details\";\n                            break;\n                        case \"User\":\n                            responseField['searchAction'] = \"search-user\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get User Details\";\n                            break;\n                        case \"Campaign\":\n                            responseField['searchAction'] = \"search-campaign\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Campaign Details\";\n                    }\n                }\n\n                retObj['data'].push(responseField);\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "Updated Opportunity",
			"id": "updated-opportunity",
			"priority": 1,
			"entity": "deal",
			"beta": true,
			"description": "Triggers when an existing Opportunity is updated",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity = \"Opportunity\"\n    var resources = \"Id, LastModifiedDate, CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var workflow = params['workflow'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        lastPolledDate = new Date(lastPolledDate).toISOString();\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+LastModifiedDate+>+${lastPolledDate}+ORDER+BY+LastModifiedDate+ASC+LIMIT+${200}`,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] ||\n        !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n\n            // skipping the newly created contacts\n            body = body.filter(el => {\n                \n                return (el.LastModifiedDate && el.CreatedDate && (new Date(el.LastModifiedDate).getTime() > new Date(el.CreatedDate).getTime()))  \n            })\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].LastModifiedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Opportunity\";\n    var resources = \"LastModifiedDate\";\n    var orderBy = \"LastModifiedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: '/query/?q=SELECT+'+resources+'+FROM+'+entity+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20',\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var lastDate;\n    var response;\n    var errorMsg;\n    var body;\n    var formattedDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['message'] = \"Missing response or body to process\"\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].LastModifiedDate ? moment(body.records[0].LastModifiedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n            \n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.Id)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/Opportunity/${p.Id}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field] ? body[field] : \"\";\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [],
			"responseFields": [],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Opportunity\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                let responseField = {\n                    \"name\": /^Opportunity/gmi.test(el.label) ? el.label : `Opportunity ${el.label}`,\n                    \"id\": el.name,\n                    \"type\": \"string\",\n                    \"defaultValue\": el.defaultValue || undefined,\n                    \"description\": el.inlineHelpText || undefined\n                }\n\n                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0] && el.name !== 'Id') {\n\n                    // lookup / reference fields\n                    switch (el.referenceTo[0]) {\n                        case \"Contact\":\n                            responseField['searchAction'] = \"search-contact\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= `Get Contact Details`;\n                            break;\n                        case \"Account\":\n                            responseField['searchAction'] = \"search-account\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Account Details\";\n                            break;\n                        case \"Lead\":\n                            responseField['searchAction'] = \"search-lead\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Lead Details\";\n                            break;\n                        case \"Opportunity\":\n                            responseField['searchAction'] = \"search-opportunity\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Opportunity Details\";\n                            break;\n                        case \"Task\":\n                            responseField['searchAction'] = \"search-task\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Task Details\";\n                            break;\n                        case \"Case\":\n                            responseField['searchAction'] = \"search-case\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Case Details\";\n                            break;\n                        case \"Event\":\n                            responseField['searchAction'] = \"search-event\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Event Details\";\n                            break;\n                        case \"User\":\n                            responseField['searchAction'] = \"search-user\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get User Details\";\n                            break;\n                        case \"Campaign\":\n                            responseField['searchAction'] = \"search-campaign\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Campaign Details\";\n                    }\n                }\n\n                retObj['data'].push(responseField);\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "Updated Opportunity Property",
			"id": "updated-opportunity-property",
			"priority": 2,
			"entity": "deal",
			"beta": true,
			"description": "Triggers when an existing Opportunity's property is updated",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity = \"Opportunity\"\n    var resources = \"Id, LastModifiedDate, CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n        var workflow = params['workflow'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        lastPolledDate = new Date(lastPolledDate).toISOString();\n        let inputParams = workflow && workflow.trigger && workflow.trigger.params && workflow.trigger.params.length ? workflow.trigger.params : []\n        let propertyToTrack = inputParams.find(obj => obj.id === \"field\" && obj.value) || {}\n        let url = propertyToTrack  && propertyToTrack.value ? `/query/?q=SELECT+OpportunityId, CreatedDate, Field, NewValue, OldValue+FROM+OpportunityFieldHistory+WHERE+Field='${propertyToTrack.value}'+AND+CreatedDate+>+${lastPolledDate}+ORDER+BY+CreatedDate+ASC+LIMIT+20` : ''\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: url,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n        console.log(JSON.stringify(options))\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var errorMsg;\n    var formattedDate;\n    var newLastDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] ||\n        !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n        console.log(JSON.stringify(body))\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n          \n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].LastModifiedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Opportunity\";\n    var resources = \"LastModifiedDate\";\n    var orderBy = \"LastModifiedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n        let workflow = params['workflow']\n        let inputParams = workflow && workflow.trigger && workflow.trigger.params && workflow.trigger.params.length ? workflow.trigger.params : []\n        let propertyToTrack = inputParams.find(obj => obj.id === \"field\" && obj.value) || {}\n        let url = propertyToTrack && propertyToTrack.value ? `/query/?q=SELECT+CreatedDate+FROM+OpportunityFieldHistory+WHERE+Field+='${propertyToTrack.value}'+ORDER+BY+CreatedDate+DESC+LIMIT+20` : ''\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: url,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var moment;\n    var lastDate;\n    var response;\n    var errorMsg;\n    var body;\n    var formattedDate;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['message'] = \"Missing response or body to process\"\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].LastModifiedDate ? moment(body.records[0].LastModifiedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n            \n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: {\n                    lastDate: lastDate\n                }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && (p.Id || p.OpportunityId))\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/Opportunity/${p.Id || p.OpportunityId}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options },\n        step: { historyObj: parsedData[0]}\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n\n        let responseObject = {};\n        const historyObj = params.step && params.step.historyObj || {}\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field] ? body[field] : \"\";\n            }\n        }, this);\n        \n        if (historyObj) {\n            responseObject['Field'] =  historyObj['Field']\n            responseObject['NewValue'] = historyObj['NewValue']\n            responseObject['OldValue'] = historyObj['OldValue']\n        }\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [
				{
					"fixedValueSource": [],
					"name": "Opportunity Property",
					"id": "field",
					"description": "To track on a Property, please make sure Opportunity Field History is enabled for Property (In your Salesforce org go to Setup -> Object Manager -> Opportunity -> Fields & Relationships -> Set History Tracking -> Enable -> Select fields).",
					"inputType": "select",
					"type": "String",
					"required": true,
					"defaultValue": "Name",
					"dynamicValueSourceRequest": "function dynamicValueSourceRequest(params, utils, callback) {\n\n    var retObj = {};\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            method: 'GET',\n            url: '/sobjects/Opportunity/describe/',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicValueSourceParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var response;\n    var errorMsg;\n    var body;\n    var fields;\n\n    if (!params || !params['response']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [\n                {\n                  \"name\": \"Account\",\n                  \"id\": \"AccountId\"\n                },\n                {\n                  \"name\": \"Private\",\n                  \"id\": \"IsPrivate\"\n                },\n                {\n                  \"name\": \"Name\",\n                  \"id\": \"Name\"\n                },\n                {\n                  \"name\": \"Description\",\n                  \"id\": \"Description\"\n                },\n                {\n                  \"name\": \"Stage\",\n                  \"id\": \"StageName\"\n                },\n                {\n                  \"name\": \"Amount\",\n                  \"id\": \"Amount\"\n                },\n                {\n                    \"name\": \"Contract\",\n                    \"id\": \"ContractId\"\n                },\n                {\n                  \"name\": \"Probability (%)\",\n                  \"id\": \"Probability\"\n                },\n                {\n                  \"name\": \"Quantity\",\n                  \"id\": \"TotalOpportunityQuantity\"\n                },\n                {\n                  \"name\": \"Close Date\",\n                  \"id\": \"CloseDate\"\n                },\n                {\n                  \"name\": \"Opportunity Type\",\n                  \"id\": \"Type\"\n                },\n                {\n                  \"name\": \"Next Step\",\n                  \"id\": \"NextStep\"\n                },\n                {\n                  \"name\": \"Lead Source\",\n                  \"id\": \"LeadSource\"\n                },\n                {\n                  \"name\": \"Forecast Category\",\n                  \"id\": \"ForecastCategory\"\n                },\n                {\n                  \"name\": \"Primary Campaign Source ID\",\n                  \"id\": \"CampaignId\"\n                },\n                {\n                  \"name\": \"Opportunity Owner ID\",\n                  \"id\": \"OwnerId\"\n                }\n            ];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                if(el.custom) {\n                    retObj['data'].push({\n                        \"name\": el.label,\n                        \"id\": el.name\n                    });\n                }\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n}"
				}
			],
			"responseFields": [
				{
					"name": "Opportunity Field Updated",
					"id": "Field",
					"type": "String"
				},
				{
					"name": "New Value of updated field",
					"id": "NewValue",
					"type": "String"
				},
				{
					"name": "Old Value of updated field",
					"id": "OldValue",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Opportunity\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n\n                let responseField = {\n                    \"name\": /^Opportunity/gmi.test(el.label) ? el.label : `Opportunity ${el.label}`,\n                    \"id\": el.name,\n                    \"type\": \"string\",\n                    \"defaultValue\": el.defaultValue || undefined,\n                    \"description\": el.inlineHelpText || undefined\n                }\n\n                if (el.referenceTo && el.referenceTo.length && el.referenceTo[0] && el.name !== 'Id') {\n\n                    // lookup / reference fields\n                    switch (el.referenceTo[0]) {\n                        case \"Contact\":\n                            responseField['searchAction'] = \"search-contact\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= `Get Contact Details`;\n                            break;\n                        case \"Account\":\n                            responseField['searchAction'] = \"search-account\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Account Details\";\n                            break;\n                        case \"Lead\":\n                            responseField['searchAction'] = \"search-lead\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Lead Details\";\n                            break;\n                        case \"Opportunity\":\n                            responseField['searchAction'] = \"search-opportunity\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Opportunity Details\";\n                            break;\n                        case \"Task\":\n                            responseField['searchAction'] = \"search-task\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Task Details\";\n                            break;\n                        case \"Case\":\n                            responseField['searchAction'] = \"search-case\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Case Details\";\n                            break;\n                        case \"Event\":\n                            responseField['searchAction'] = \"search-event\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Event Details\";\n                            break;\n                        case \"User\":\n                            responseField['searchAction'] = \"search-user\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get User Details\";\n                            break;\n                        case \"Campaign\":\n                            responseField['searchAction'] = \"search-campaign\";\n                            responseField['searchID'] = \"value\";\n                            responseField['searchLabel']= \"Get Campaign Details\";\n                    }\n                }\n\n                retObj['data'].push(responseField);\n\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
		},
		{
			"webhookType": "workflow",
			"dynamicResponseFieldsDependsOn": [],
			"name": "Updated Opportunity Stage",
			"id": "updated-opportunity-stage",
			"priority": 3,
			"entity": "deal",
			"beta": true,
			"description": "Triggers when an existing Opportunity's Stage is changed",
			"important": true,
			"source": {
				"type": "poll",
				"pollRequest": "function pollRequest(params, utils, callback) {\n\n    var retObj = {}\n    var entity = \"OpportunityHistory\"\n    var resources = \"Id, OpportunityId, StageName, CreatedDate\"\n    var orderBy = \"CreatedDate\"\n    const LIMIT = 200\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp']; \n        var workflow = params['workflow'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        lastPolledDate = new Date(lastPolledDate).toISOString();\n\n        // fetch the selected type of entity\n        let inputParams = workflow && workflow.trigger && workflow.trigger.params && workflow.trigger.params.length ? workflow.trigger.params : []\n        let stageToTrack = inputParams.find(obj => obj.id === \"stage\" && obj.value) || {}\n        let url = stageToTrack && stageToTrack.value? `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+CreatedDate+>+${lastPolledDate}+AND+StageName+='${stageToTrack.value}'+ORDER+BY+CreatedDate+ASC+LIMIT+${LIMIT}` : ''\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: url || `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+CreatedDate+>+${lastPolledDate}+ORDER+BY+CreatedDate+ASC+LIMIT+${LIMIT}`,\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n        console.log('check this')\n        console.log(JSON.stringify(options))\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"pollParse": "function pollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var formattedDate;\n    var newLastDate;\n    var errorMsg;\n    var moment;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body'] || !params['workflow']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var workflow = params['workflow'];\n        var body = response['body'];\n\n        var lastPolledDate = (((workflow.trigger || {}).pollData || {}).data || {}).lastDate;\n        lastPolledDate = new Date(lastPolledDate);\n\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n\n        } else if (!lastPolledDate || !lastPolledDate.getTime()) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_PARSE\";\n            retObj['error']['message'] = \"Error: Missing last PolledDate\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            body = response['body'].records ? response['body'].records : [];\n            retObj['status'] = \"SUCCESS\";\n            console.log(JSON.stringify(response['body'].records))\n\n            // if new objects are created\n            if (body && body.length) {\n\n                let arrayLength = body.length\n\n                formattedDate = body && body.length && body[arrayLength - 1] ? moment(body[arrayLength - 1].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n                newLastDate = utils.libDate.parseStandardStringToJSDateTime(formattedDate);\n\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': newLastDate } },\n                    'objects': body\n                };\n\n            } else {\n                // if no new objects created\n                retObj['data'] = {\n                    'pollData': { 'status': 'SUCCESS', 'data': { 'lastDate': lastPolledDate } },\n                    'objects': []\n                };\n            }\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n\n    callback(retObj);\n}",
				"initialPollRequest": "function initialPollRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"OpportunityHistory\";\n    var resources = \"CreatedDate\";\n    var orderBy = \"CreatedDate\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n        true\n        let workflow = params['workflow']\n        let inputParams = workflow && workflow.trigger && workflow.trigger.params && workflow.trigger.params.length ? workflow.trigger.params : []\n        let stageToTrack = inputParams.find(obj => obj.id === \"stage\" && obj.value) || {}\n        let url = stageToTrack && stageToTrack.value ? `/query/?q=SELECT+${resources}+FROM+${entity}+WHERE+StageName+='${stageToTrack.value}'+ORDER+BY+${orderBy}+DESC+LIMIT+20` : ''\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: url || '/query/?q=SELECT+'+resources+'+FROM+'+entity+'+ORDER+BY+'+orderBy+'+DESC+LIMIT+20',\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
				"initialPollParse": "function initialPollParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var formattedDate;\n    var errorMsg;\n    var lastDate;\n    var moment;\n\n    // Input Validation\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        var response = params['response'];\n        var body = response['body'];\n        moment = utils['moment'] ? utils['moment'] : null;\n\n        if (!moment) {\n\n            retObj['error'] = {};\n            retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n            retObj['error']['message'] = \"Error: Missing required util\";\n            return callback(retObj);\n        }\n\n        if (response.statusCode == 200) {\n\n            formattedDate = body.records && body.records[0] && body.records[0].CreatedDate ? moment(body.records[0].CreatedDate).format('DD-MMM-YYYY HH:mm:ss') : '';\n            lastDate = formattedDate ? utils.libDate.parseStandardStringToJSDateTime(formattedDate) : utils.libDate.parseStandardStringToJSDateTime(moment(new Date()).format('DD-MMM-YYYY HH:mm:ss'));\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = {};\n            retObj['data']['pollData'] = {\n                status: \"SUCCESS\",\n                data: { lastDate }\n            };\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}",
				"objectQuery": true,
				"objectRequest": "function objectRequest(params, utils, callback) {\n\n    if (!params || !params.userapp || !params.appinfo) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'Userapp or appinfo is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n    if (!params.parsedData || !params.parsedData.data) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'pass parsed Data from pollParse'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var fetchedParams = params.userapp.fetchAuthParams(params.appinfo)\n\n    if (!fetchedParams || !fetchedParams.access_token || !fetchedParams['instance_url']) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'cannot fetch access_token or instance url from fetchAuthParams'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var loginInstanceUrl = fetchedParams['instance_url'];\n    var REST_ENDPOINT = \"/services/data\";\n    var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n    var parsedData = params.parsedData.data.objects || []\n\n    var options = parsedData\n        .filter(p => p && p.OpportunityId)\n        .map(p => ({\n            method: 'GET',\n            url: `/sobjects/Opportunity/${p.OpportunityId}`,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        }))\n\n    return callback({\n        params: JSON.stringify(params),\n        status: 'SUCCESS',\n        message: 'Built options for request',\n        data: { options }\n    })\n}",
				"objectParse": "function objectParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var errorMsg;\n    var body;\n\n    if (!params || !params.response || !params.body) {\n        return callback({\n            error: {\n                code: 'ERROR_MISSING_PARAM',\n                message: 'response or body to parse is missing'\n            },\n            status: 'ERROR'\n        })\n    }\n\n    var response = params.response;\n    var body = response.body;\n    var libDate = utils['libDate'] ? utils['libDate'] : null;\n\n    if (!libDate) {\n\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Missing required util\";\n        return callback(retObj);\n\n    }\n\n    if (response.statusCode === 200) {\n        let responseObject = {};\n\n        Object.keys(body).forEach(field => {\n            if (typeof body[field] != \"object\") {\n                if (field.includes(\"Date\") || field.includes(\"date\") || field === \"SystemModstamp\")\n                    responseObject[field] = body[field] ? libDate.parseJSDateTimeToStandardString(new Date(body[field])) : \"\";\n                else\n                    responseObject[field] = body[field];\n            }\n        }, this);\n\n        return callback({\n            data: { newObject: { response: { params: responseObject } }, hash: { id: responseObject.Id } },\n            status: 'SUCCESS'\n        })\n\n    } else {\n\n        let rateErrorOccurred = false;\n        errorMsg = \"\";\n        if (body instanceof Array && body.length) {\n            body.forEach(err => {\n                if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                // if error code is present\n                errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                // if error msg is present\n                errorMsg += err.message ? err.message : \"\";\n            }, this);\n        }\n\n        if (response.statusCode == 401) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n            retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n            return callback(retObj);\n\n        } else if (response.statusCode == 403) {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n            return callback(retObj);\n\n        } else {\n\n            retObj['error'] = {};\n            retObj['errorCode'] = \"ERROR_UNKNOWN\";\n            retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n        }\n    }\n    callback(retObj)\n}"
			},
			"params": [
				{
					"fixedValueSource": [],
					"name": "Opportunity Stage",
					"id": "stage",
					"inputType": "select",
					"type": "String",
					"required": true,
					"dynamicValueSourceRequest": "function dynamicInputFieldsRequest(params, utils, callback) {\n\n    var retObj = {};\n    var entity = \"Opportunity\";\n    var update;\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\";\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\" + entity + \"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json: true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['step'] = { update: update };\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
					"dynamicValueSourceParse": "function dynamicInputFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var response;\n    var errorMsg;\n    var fields;\n    var update;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_UNKNOWN\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body'];\n        update = params.step && params.step.update ? params.step.update : null;\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n            let responseObjArray =[]\n\n            fields = body.fields ? body.fields : [];\n            let opportunityStages = fields.find(fld => fld.name === 'StageName')\n            \n            if (opportunityStages && opportunityStages.picklistValues) {\n                // options for picklist\n                opportunityStages.picklistValues.forEach(op => {\n\n                    // if the value is active\n                    if (op.active) {\n                        responseObjArray.push({\n                            \"id\": op.value || op.label,\n                            \"name\": op.label\n                        });\n                    }\n                }, this);\n            }\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = responseObjArray;\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n    }\n    callback(retObj);\n\n}"
				}
			],
			"responseFields": [
				{
					"name": "Opportunity Name",
					"id": "Name",
					"type": "String"
				},
				{
					"name": "Opportunity ID",
					"id": "Id",
					"type": "String"
				},
				{
					"name": "Opportunity Forecast Category",
					"id": "ForecastCategory",
					"type": "String"
				},
				{
					"name": "Opportunity Created Date",
					"id": "CreatedDate",
					"type": "String"
				},
				{
					"name": "Opportunity Stage Name",
					"id": "StageName",
					"type": "String"
				},
				{
					"name": "Opportunity Amount",
					"id": "Amount",
					"type": "String"
				},
				{
					"name": "Opportunity Type",
					"id": "Type",
					"type": "String"
				},
				{
					"name": "Opportunity Iq Score",
					"id": "IqScore",
					"type": "String"
				},
				{
					"name": "Opportunity Contract",
					"id": "ContractId",
					"type": "String"
				},
				{
					"name": "Opportunity Fiscal Period",
					"id": "Fiscal",
					"type": "String"
				},
				{
					"name": "Opportunity Won?",
					"id": "Won",
					"type": "String"
				},
				{
					"name": "Opportunity Account Id",
					"id": "AccountId",
					"type": "String"
				},
				{
					"name": "Opportunity Campaign Id",
					"id": "CampaignId",
					"type": "String"
				},
				{
					"name": "Opportunity Created By Id",
					"id": "CreatedById",
					"type": "String"
				},
				{
					"name": "Opportunity Expected Revenue",
					"id": "ExpectedRevenue",
					"type": "String"
				},
				{
					"name": "Opportunity Fiscal Quarter",
					"id": "FiscalQuarter",
					"type": "String"
				},
				{
					"name": "Opportunity Forecast Category Name",
					"id": "ForecastCategoryName",
					"type": "String"
				},
				{
					"name": "Opportunity Line Item?",
					"id": "HasOpportunityLineItem",
					"type": "String"
				},
				{
					"name": "Opportunity Last Activity Date",
					"id": "LastActivityDate",
					"type": "String"
				},
				{
					"name": "Opportunity Last Modified By",
					"id": "LastModifiedById",
					"type": "String"
				},
				{
					"name": "Opportunity Last Modified Date",
					"id": "LastModifiedDate",
					"type": "String"
				},
				{
					"name": "Opportunity Pricebook 2 Id",
					"id": "Pricebook2Id",
					"type": "String"
				},
				{
					"name": "Opportunity System Modstamp",
					"id": "SystemModstamp",
					"type": "String"
				},
				{
					"name": "Total Opportunity Quantity",
					"id": "TotalOpportunityQuantity",
					"type": "String"
				},
				{
					"name": "Opportunity Opportunity Close Date",
					"id": "CloseDate",
					"type": "String"
				},
				{
					"name": "Opportunity Description",
					"id": "Description",
					"type": "String"
				},
				{
					"name": "Opportunity Fiscal Year",
					"id": "FiscalYear",
					"type": "String"
				},
				{
					"name": "Is Opportunity Closed?",
					"id": "IsClosed",
					"type": "String"
				},
				{
					"name": "Is Opportunity Deleted?",
					"id": "IsDeleted",
					"type": "String"
				},
				{
					"name": "Is Opportunity Private?",
					"id": "IsPrivate",
					"type": "String"
				},
				{
					"name": "Opportunity Lead Source",
					"id": "LeadSource",
					"type": "String"
				},
				{
					"name": "Opportunity Next Step",
					"id": "NextStep",
					"type": "String"
				},
				{
					"name": "Opportunity Owner Id",
					"id": "OwnerId",
					"type": "String"
				},
				{
					"name": "Opportunity Probability",
					"id": "Probability",
					"type": "String"
				},
				{
					"name": "Opportunity Record Type Id",
					"id": "RecordTypeId",
					"type": "String"
				}
			],
			"dynamicResponseFields": true,
			"dynamicResponseFieldsRequest": "function dynamicResponseFieldsRequest(params, utils, callback) {\n\n\tvar retObj = {};\n    var entity = \"Opportunity\";\n\n    if (!params || !params['appinfo'] || !params['userapp']) {\n\n        retObj['status'] = \"ERROR\";\n        retObj['error'] = {};\n        retObj['error']['code'] = \"ERROR_MISSING_PARAM\";\n        retObj['errorCode'] = \"ERROR_MISSING_PARAM\";\n        retObj['error']['message'] = \"Error: Input parameters are missing.\";\n\n    } else {\n\n        var appinfo = params['appinfo'];\n        var userapp = params['userapp'];\n\n        // Generate HTTP Request body\n\n        var fetchedParams = userapp.fetchAuthParams(appinfo);\n\n        var loginInstanceUrl = fetchedParams['instance_url'];\n        var REST_ENDPOINT = \"/services/data\" ;\n        var API_VERSION = fetchedParams['apiVersion'] || '/v39.0'\n\n        var options = {\n            // Variables to be modified\n            method: 'GET',\n            url: \"/sobjects/\"+entity+\"/describe/\",\n\n            // Remain same\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + fetchedParams['access_token']\n            },\n            baseUrl: loginInstanceUrl + REST_ENDPOINT + API_VERSION,\n            json:true\n        };\n\n        // Form object to be returned\n        retObj['status'] = \"SUCCESS\";\n        retObj['data'] = {\n            options: options\n        };\n    }\n\n    callback(retObj);\n\n}",
			"dynamicResponseFieldsParse": "function dynamicResponseFieldsParse(params, utils, callback) {\n\n    var retObj = { status: \"ERROR\" };\n    var body;\n    var errorMsg;\n    var response;\n    var fields;\n\n    if (!params || !params['response'] || !params['body']) {\n\n        retObj['error'] = {};\n        retObj['errorCode'] = \"ERROR_PARSE\";\n        retObj['error']['message'] = \"Error: Missing response or body.\";\n\n    } else {\n\n        response = params['response'];\n        body = response['body']\n\n        if (response.statusCode == 200) {\n\n            retObj['status'] = \"SUCCESS\";\n            retObj['data'] = [];\n            fields = body.fields ? body.fields : [];\n\n            fields.map(function (el) {\n                // if the field is custom field\n                if (el.custom === true) {\n\n                    retObj['data'].push({\n                        \"name\": /^Opportunity/gmi.test(el.label) ? el.label : `Opportunity ${el.label}`,\n                        \"id\": el.name,\n                        \"type\": \"string\",\n                        \"defaultValue\": el.defaultValue || undefined,\n                        \"description\": el.inlineHelpText || undefined\n                    });\n\n                }\n            }, this);\n\n        } else {\n\n            let rateErrorOccurred = false;\n            errorMsg = \"\";\n            if (body instanceof Array && body.length) {\n                body.forEach(err => {\n                    if (err.errorCode === \"REQUEST_LIMIT_EXCEEDED\")\n                        rateErrorOccurred = true;\n                    // if error code is present\n                    errorMsg += err.errorCode ? err.errorCode + \": \" : \"\";\n                    // if error msg is present\n                    errorMsg += err.message ? err.message : \"\";\n                }, this);\n            }\n\n            if (response.statusCode == 401) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_AUTH_REFRESH\";\n                retObj['error']['message'] = errorMsg || \"Error occured due to expiration of token\";\n                return callback(retObj);\n\n            } else if (response.statusCode == 403) {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = rateErrorOccurred ? \"ERROR_RATE_LIMIT\" : \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Salesforce api not enabled for your account, please contact your salesforce admin/support\";\n                return callback(retObj);\n\n            } else {\n\n                retObj['error'] = {};\n                retObj['errorCode'] = \"ERROR_UNKNOWN\";\n                retObj['error']['message'] = errorMsg || \"Error with status code \" + response['statusCode'];\n            }\n        }\n\n    }\n\n    callback(retObj);\n\n}"
		}
	],
	"version": "1.0"
}